
LP-B01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b8c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc0  08002cc0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002cc0  08002cc0  00012cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cc8  08002cc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ccc  08002ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  08002cdc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08002cdc  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013178  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f7  00000000  00000000  000331ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  000352a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  000362f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016621  00000000  00000000  00037280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136c0  00000000  00000000  0004d8a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ab5  00000000  00000000  00060f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f3a16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be4  00000000  00000000  000f3a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002c30 	.word	0x08002c30

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08002c30 	.word	0x08002c30

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	1c08      	adds	r0, r1, #0
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	; (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	; (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	469b      	mov	fp, r3
 8000292:	d433      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000294:	465a      	mov	r2, fp
 8000296:	4653      	mov	r3, sl
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83a      	bhi.n	800031e <__udivmoddi4+0xc2>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e078      	b.n	80003a0 <__udivmoddi4+0x144>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e075      	b.n	80003a6 <__udivmoddi4+0x14a>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e028      	b.n	8000326 <__udivmoddi4+0xca>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	2320      	movs	r3, #32
 8000300:	1a9b      	subs	r3, r3, r2
 8000302:	4652      	mov	r2, sl
 8000304:	40da      	lsrs	r2, r3
 8000306:	4641      	mov	r1, r8
 8000308:	0013      	movs	r3, r2
 800030a:	464a      	mov	r2, r9
 800030c:	408a      	lsls	r2, r1
 800030e:	0017      	movs	r7, r2
 8000310:	4642      	mov	r2, r8
 8000312:	431f      	orrs	r7, r3
 8000314:	4653      	mov	r3, sl
 8000316:	4093      	lsls	r3, r2
 8000318:	001e      	movs	r6, r3
 800031a:	42af      	cmp	r7, r5
 800031c:	d9c4      	bls.n	80002a8 <__udivmoddi4+0x4c>
 800031e:	2200      	movs	r2, #0
 8000320:	2300      	movs	r3, #0
 8000322:	9200      	str	r2, [sp, #0]
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	4643      	mov	r3, r8
 8000328:	2b00      	cmp	r3, #0
 800032a:	d0d9      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032c:	07fb      	lsls	r3, r7, #31
 800032e:	0872      	lsrs	r2, r6, #1
 8000330:	431a      	orrs	r2, r3
 8000332:	4646      	mov	r6, r8
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	e00e      	b.n	8000356 <__udivmoddi4+0xfa>
 8000338:	42ab      	cmp	r3, r5
 800033a:	d101      	bne.n	8000340 <__udivmoddi4+0xe4>
 800033c:	42a2      	cmp	r2, r4
 800033e:	d80c      	bhi.n	800035a <__udivmoddi4+0xfe>
 8000340:	1aa4      	subs	r4, r4, r2
 8000342:	419d      	sbcs	r5, r3
 8000344:	2001      	movs	r0, #1
 8000346:	1924      	adds	r4, r4, r4
 8000348:	416d      	adcs	r5, r5
 800034a:	2100      	movs	r1, #0
 800034c:	3e01      	subs	r6, #1
 800034e:	1824      	adds	r4, r4, r0
 8000350:	414d      	adcs	r5, r1
 8000352:	2e00      	cmp	r6, #0
 8000354:	d006      	beq.n	8000364 <__udivmoddi4+0x108>
 8000356:	42ab      	cmp	r3, r5
 8000358:	d9ee      	bls.n	8000338 <__udivmoddi4+0xdc>
 800035a:	3e01      	subs	r6, #1
 800035c:	1924      	adds	r4, r4, r4
 800035e:	416d      	adcs	r5, r5
 8000360:	2e00      	cmp	r6, #0
 8000362:	d1f8      	bne.n	8000356 <__udivmoddi4+0xfa>
 8000364:	9800      	ldr	r0, [sp, #0]
 8000366:	9901      	ldr	r1, [sp, #4]
 8000368:	465b      	mov	r3, fp
 800036a:	1900      	adds	r0, r0, r4
 800036c:	4169      	adcs	r1, r5
 800036e:	2b00      	cmp	r3, #0
 8000370:	db24      	blt.n	80003bc <__udivmoddi4+0x160>
 8000372:	002b      	movs	r3, r5
 8000374:	465a      	mov	r2, fp
 8000376:	4644      	mov	r4, r8
 8000378:	40d3      	lsrs	r3, r2
 800037a:	002a      	movs	r2, r5
 800037c:	40e2      	lsrs	r2, r4
 800037e:	001c      	movs	r4, r3
 8000380:	465b      	mov	r3, fp
 8000382:	0015      	movs	r5, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	db2a      	blt.n	80003de <__udivmoddi4+0x182>
 8000388:	0026      	movs	r6, r4
 800038a:	409e      	lsls	r6, r3
 800038c:	0033      	movs	r3, r6
 800038e:	0026      	movs	r6, r4
 8000390:	4647      	mov	r7, r8
 8000392:	40be      	lsls	r6, r7
 8000394:	0032      	movs	r2, r6
 8000396:	1a80      	subs	r0, r0, r2
 8000398:	4199      	sbcs	r1, r3
 800039a:	9000      	str	r0, [sp, #0]
 800039c:	9101      	str	r1, [sp, #4]
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a0:	42a3      	cmp	r3, r4
 80003a2:	d8bc      	bhi.n	800031e <__udivmoddi4+0xc2>
 80003a4:	e783      	b.n	80002ae <__udivmoddi4+0x52>
 80003a6:	4642      	mov	r2, r8
 80003a8:	2320      	movs	r3, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	1a9b      	subs	r3, r3, r2
 80003ae:	2200      	movs	r2, #0
 80003b0:	9100      	str	r1, [sp, #0]
 80003b2:	9201      	str	r2, [sp, #4]
 80003b4:	2201      	movs	r2, #1
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	e786      	b.n	80002ca <__udivmoddi4+0x6e>
 80003bc:	4642      	mov	r2, r8
 80003be:	2320      	movs	r3, #32
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	002a      	movs	r2, r5
 80003c4:	4646      	mov	r6, r8
 80003c6:	409a      	lsls	r2, r3
 80003c8:	0023      	movs	r3, r4
 80003ca:	40f3      	lsrs	r3, r6
 80003cc:	4644      	mov	r4, r8
 80003ce:	4313      	orrs	r3, r2
 80003d0:	002a      	movs	r2, r5
 80003d2:	40e2      	lsrs	r2, r4
 80003d4:	001c      	movs	r4, r3
 80003d6:	465b      	mov	r3, fp
 80003d8:	0015      	movs	r5, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	dad4      	bge.n	8000388 <__udivmoddi4+0x12c>
 80003de:	4642      	mov	r2, r8
 80003e0:	002f      	movs	r7, r5
 80003e2:	2320      	movs	r3, #32
 80003e4:	0026      	movs	r6, r4
 80003e6:	4097      	lsls	r7, r2
 80003e8:	1a9b      	subs	r3, r3, r2
 80003ea:	40de      	lsrs	r6, r3
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7cd      	b.n	800038e <__udivmoddi4+0x132>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800044c:	f000 fb18 	bl	8000a80 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000450:	f000 f80b 	bl	800046a <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000454:	f000 f92e 	bl	80006b4 <MX_GPIO_Init>
	MX_SPI1_Init();
 8000458:	f000 f890 	bl	800057c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 800045c:	f000 f8f6 	bl	800064c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8000460:	f000 f8ca 	bl	80005f8 <MX_TIM16_Init>
	MX_I2C1_Init();
 8000464:	f000 f84a 	bl	80004fc <MX_I2C1_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000468:	e7fe      	b.n	8000468 <main+0x20>

0800046a <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800046a:	b590      	push	{r4, r7, lr}
 800046c:	b093      	sub	sp, #76	; 0x4c
 800046e:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000470:	2410      	movs	r4, #16
 8000472:	193b      	adds	r3, r7, r4
 8000474:	0018      	movs	r0, r3
 8000476:	2338      	movs	r3, #56	; 0x38
 8000478:	001a      	movs	r2, r3
 800047a:	2100      	movs	r1, #0
 800047c:	f002 fbd0 	bl	8002c20 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000480:	003b      	movs	r3, r7
 8000482:	0018      	movs	r0, r3
 8000484:	2310      	movs	r3, #16
 8000486:	001a      	movs	r2, r3
 8000488:	2100      	movs	r1, #0
 800048a:	f002 fbc9 	bl	8002c20 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800048e:	2380      	movs	r3, #128	; 0x80
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fede 	bl	8001254 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000498:	193b      	adds	r3, r7, r4
 800049a:	2202      	movs	r2, #2
 800049c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ac:	193b      	adds	r3, r7, r4
 80004ae:	2240      	movs	r2, #64	; 0x40
 80004b0:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004b2:	193b      	adds	r3, r7, r4
 80004b4:	2200      	movs	r2, #0
 80004b6:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 ff16 	bl	80012ec <HAL_RCC_OscConfig>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x5e>
		Error_Handler();
 80004c4:	f000 f956 	bl	8000774 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004c8:	003b      	movs	r3, r7
 80004ca:	2207      	movs	r2, #7
 80004cc:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ce:	003b      	movs	r3, r7
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004da:	003b      	movs	r3, r7
 80004dc:	2200      	movs	r2, #0
 80004de:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80004e0:	003b      	movs	r3, r7
 80004e2:	2100      	movs	r1, #0
 80004e4:	0018      	movs	r0, r3
 80004e6:	f001 fa21 	bl	800192c <HAL_RCC_ClockConfig>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x88>
		Error_Handler();
 80004ee:	f000 f941 	bl	8000774 <Error_Handler>
	}
}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	46bd      	mov	sp, r7
 80004f6:	b013      	add	sp, #76	; 0x4c
 80004f8:	bd90      	pop	{r4, r7, pc}
	...

080004fc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_I2C1_Init+0x74>)
 8000502:	4a1c      	ldr	r2, [pc, #112]	; (8000574 <MX_I2C1_Init+0x78>)
 8000504:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0010061A;
 8000506:	4b1a      	ldr	r3, [pc, #104]	; (8000570 <MX_I2C1_Init+0x74>)
 8000508:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <MX_I2C1_Init+0x7c>)
 800050a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_I2C1_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000512:	4b17      	ldr	r3, [pc, #92]	; (8000570 <MX_I2C1_Init+0x74>)
 8000514:	2201      	movs	r2, #1
 8000516:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <MX_I2C1_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800051e:	4b14      	ldr	r3, [pc, #80]	; (8000570 <MX_I2C1_Init+0x74>)
 8000520:	2200      	movs	r2, #0
 8000522:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <MX_I2C1_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000530:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <MX_I2C1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <MX_I2C1_Init+0x74>)
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fd5d 	bl	8000ff8 <HAL_I2C_Init>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000542:	f000 f917 	bl	8000774 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <MX_I2C1_Init+0x74>)
 8000548:	2100      	movs	r1, #0
 800054a:	0018      	movs	r0, r3
 800054c:	f000 fdea 	bl	8001124 <HAL_I2CEx_ConfigAnalogFilter>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000554:	f000 f90e 	bl	8000774 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <MX_I2C1_Init+0x74>)
 800055a:	2100      	movs	r1, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fe2d 	bl	80011bc <HAL_I2CEx_ConfigDigitalFilter>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000566:	f000 f905 	bl	8000774 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000028 	.word	0x20000028
 8000574:	40005400 	.word	0x40005400
 8000578:	0010061a 	.word	0x0010061a

0800057c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_SPI1_Init+0x78>)
 8000584:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000588:	2282      	movs	r2, #130	; 0x82
 800058a:	0052      	lsls	r2, r2, #1
 800058c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000594:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <MX_SPI1_Init+0x74>)
 8000596:	22e0      	movs	r2, #224	; 0xe0
 8000598:	00d2      	lsls	r2, r2, #3
 800059a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_SPI1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	02d2      	lsls	r2, r2, #11
 80005ae:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005ca:	2207      	movs	r2, #7
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005d6:	2208      	movs	r2, #8
 80005d8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <MX_SPI1_Init+0x74>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fcc9 	bl	8001f74 <HAL_SPI_Init>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <MX_SPI1_Init+0x6e>
		Error_Handler();
 80005e6:	f000 f8c5 	bl	8000774 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	20000074 	.word	0x20000074
 80005f4:	40013000 	.word	0x40013000

080005f8 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_TIM16_Init+0x44>)
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <MX_TIM16_Init+0x48>)
 8000600:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 1600 - 1;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_TIM16_Init+0x44>)
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MX_TIM16_Init+0x4c>)
 8000606:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_TIM16_Init+0x44>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_TIM16_Init+0x44>)
 8000610:	4a0d      	ldr	r2, [pc, #52]	; (8000648 <MX_TIM16_Init+0x50>)
 8000612:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_TIM16_Init+0x44>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_TIM16_Init+0x44>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_TIM16_Init+0x44>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <MX_TIM16_Init+0x44>)
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fd5b 	bl	80020e4 <HAL_TIM_Base_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM16_Init+0x3e>
		Error_Handler();
 8000632:	f000 f89f 	bl	8000774 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000168 	.word	0x20000168
 8000640:	40014400 	.word	0x40014400
 8000644:	0000063f 	.word	0x0000063f
 8000648:	0000ffff 	.word	0x0000ffff

0800064c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_USART2_UART_Init+0x60>)
 8000652:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <MX_USART2_UART_Init+0x64>)
 8000654:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_USART2_UART_Init+0x60>)
 8000658:	22e1      	movs	r2, #225	; 0xe1
 800065a:	0252      	lsls	r2, r2, #9
 800065c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b13      	ldr	r3, [pc, #76]	; (80006ac <MX_USART2_UART_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <MX_USART2_UART_Init+0x60>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b10      	ldr	r3, [pc, #64]	; (80006ac <MX_USART2_UART_Init+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_USART2_UART_Init+0x60>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <MX_USART2_UART_Init+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_USART2_UART_Init+0x60>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b0a      	ldr	r3, [pc, #40]	; (80006ac <MX_USART2_UART_Init+0x60>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_USART2_UART_Init+0x60>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MX_USART2_UART_Init+0x60>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MX_USART2_UART_Init+0x60>)
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fdf2 	bl	8002280 <HAL_UART_Init>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 80006a0:	f000 f868 	bl	8000774 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	200000d8 	.word	0x200000d8
 80006b0:	40004400 	.word	0x40004400

080006b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b089      	sub	sp, #36	; 0x24
 80006b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006ba:	240c      	movs	r4, #12
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	0018      	movs	r0, r3
 80006c0:	2314      	movs	r3, #20
 80006c2:	001a      	movs	r2, r3
 80006c4:	2100      	movs	r1, #0
 80006c6:	f002 faab 	bl	8002c20 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b28      	ldr	r3, [pc, #160]	; (800076c <MX_GPIO_Init+0xb8>)
 80006cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ce:	4b27      	ldr	r3, [pc, #156]	; (800076c <MX_GPIO_Init+0xb8>)
 80006d0:	2102      	movs	r1, #2
 80006d2:	430a      	orrs	r2, r1
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
 80006d6:	4b25      	ldr	r3, [pc, #148]	; (800076c <MX_GPIO_Init+0xb8>)
 80006d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006da:	2202      	movs	r2, #2
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b22      	ldr	r3, [pc, #136]	; (800076c <MX_GPIO_Init+0xb8>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e6:	4b21      	ldr	r3, [pc, #132]	; (800076c <MX_GPIO_Init+0xb8>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	430a      	orrs	r2, r1
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_GPIO_Init+0xb8>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f2:	2201      	movs	r2, #1
 80006f4:	4013      	ands	r3, r2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SDB_GPIO_Port, SDB_Pin, GPIO_PIN_RESET);
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	0119      	lsls	r1, r3, #4
 80006fe:	23a0      	movs	r3, #160	; 0xa0
 8000700:	05db      	lsls	r3, r3, #23
 8000702:	2200      	movs	r2, #0
 8000704:	0018      	movs	r0, r3
 8000706:	f000 fc59 	bl	8000fbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_GPIO_Init+0xbc>)
 800070c:	2200      	movs	r2, #0
 800070e:	2108      	movs	r1, #8
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fc53 	bl	8000fbc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : SDB_Pin */
	GPIO_InitStruct.Pin = SDB_Pin;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	0112      	lsls	r2, r2, #4
 800071c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2201      	movs	r2, #1
 8000722:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(SDB_GPIO_Port, &GPIO_InitStruct);
 8000730:	193a      	adds	r2, r7, r4
 8000732:	23a0      	movs	r3, #160	; 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fadb 	bl	8000cf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD1_Pin */
	GPIO_InitStruct.Pin = LD1_Pin;
 800073e:	0021      	movs	r1, r4
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2208      	movs	r2, #8
 8000744:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2201      	movs	r2, #1
 800074a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000758:	187b      	adds	r3, r7, r1
 800075a:	4a05      	ldr	r2, [pc, #20]	; (8000770 <MX_GPIO_Init+0xbc>)
 800075c:	0019      	movs	r1, r3
 800075e:	0010      	movs	r0, r2
 8000760:	f000 fac8 	bl	8000cf4 <HAL_GPIO_Init>

}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b009      	add	sp, #36	; 0x24
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	40021000 	.word	0x40021000
 8000770:	50000400 	.word	0x50000400

08000774 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800077c:	e7fe      	b.n	800077c <Error_Handler+0x8>
	...

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x44>)
 8000788:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <HAL_MspInit+0x44>)
 800078c:	2101      	movs	r1, #1
 800078e:	430a      	orrs	r2, r1
 8000790:	641a      	str	r2, [r3, #64]	; 0x40
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <HAL_MspInit+0x44>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	2201      	movs	r2, #1
 8000798:	4013      	ands	r3, r2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_MspInit+0x44>)
 80007a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_MspInit+0x44>)
 80007a4:	2180      	movs	r1, #128	; 0x80
 80007a6:	0549      	lsls	r1, r1, #21
 80007a8:	430a      	orrs	r2, r1
 80007aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <HAL_MspInit+0x44>)
 80007ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	055b      	lsls	r3, r3, #21
 80007b4:	4013      	ands	r3, r2
 80007b6:	603b      	str	r3, [r7, #0]
 80007b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	40021000 	.word	0x40021000

080007c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b095      	sub	sp, #84	; 0x54
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	233c      	movs	r3, #60	; 0x3c
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	0018      	movs	r0, r3
 80007d6:	2314      	movs	r3, #20
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f002 fa20 	bl	8002c20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e0:	2414      	movs	r4, #20
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	0018      	movs	r0, r3
 80007e6:	2328      	movs	r3, #40	; 0x28
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f002 fa18 	bl	8002c20 <memset>
  if(hi2c->Instance==I2C1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <HAL_I2C_MspInit+0xb8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d13e      	bne.n	8000878 <HAL_I2C_MspInit+0xb0>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2220      	movs	r2, #32
 80007fe:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000806:	193b      	adds	r3, r7, r4
 8000808:	0018      	movs	r0, r3
 800080a:	f001 fa39 	bl	8001c80 <HAL_RCCEx_PeriphCLKConfig>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000812:	f7ff ffaf 	bl	8000774 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <HAL_I2C_MspInit+0xbc>)
 8000818:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <HAL_I2C_MspInit+0xbc>)
 800081c:	2102      	movs	r1, #2
 800081e:	430a      	orrs	r2, r1
 8000820:	635a      	str	r2, [r3, #52]	; 0x34
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_I2C_MspInit+0xbc>)
 8000824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000826:	2202      	movs	r2, #2
 8000828:	4013      	ands	r3, r2
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800082e:	213c      	movs	r1, #60	; 0x3c
 8000830:	187b      	adds	r3, r7, r1
 8000832:	22c0      	movs	r2, #192	; 0xc0
 8000834:	0092      	lsls	r2, r2, #2
 8000836:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2212      	movs	r2, #18
 800083c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2206      	movs	r2, #6
 800084e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000850:	187b      	adds	r3, r7, r1
 8000852:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <HAL_I2C_MspInit+0xc0>)
 8000854:	0019      	movs	r1, r3
 8000856:	0010      	movs	r0, r2
 8000858:	f000 fa4c 	bl	8000cf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_I2C_MspInit+0xbc>)
 800085e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_I2C_MspInit+0xbc>)
 8000862:	2180      	movs	r1, #128	; 0x80
 8000864:	0389      	lsls	r1, r1, #14
 8000866:	430a      	orrs	r2, r1
 8000868:	63da      	str	r2, [r3, #60]	; 0x3c
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_I2C_MspInit+0xbc>)
 800086c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	039b      	lsls	r3, r3, #14
 8000872:	4013      	ands	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b015      	add	sp, #84	; 0x54
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	40005400 	.word	0x40005400
 8000884:	40021000 	.word	0x40021000
 8000888:	50000400 	.word	0x50000400

0800088c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b08b      	sub	sp, #44	; 0x2c
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	2414      	movs	r4, #20
 8000896:	193b      	adds	r3, r7, r4
 8000898:	0018      	movs	r0, r3
 800089a:	2314      	movs	r3, #20
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f002 f9be 	bl	8002c20 <memset>
  if(hspi->Instance==SPI1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a1b      	ldr	r2, [pc, #108]	; (8000918 <HAL_SPI_MspInit+0x8c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d130      	bne.n	8000910 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <HAL_SPI_MspInit+0x90>)
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	4b1a      	ldr	r3, [pc, #104]	; (800091c <HAL_SPI_MspInit+0x90>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	0149      	lsls	r1, r1, #5
 80008b8:	430a      	orrs	r2, r1
 80008ba:	641a      	str	r2, [r3, #64]	; 0x40
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <HAL_SPI_MspInit+0x90>)
 80008be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	015b      	lsls	r3, r3, #5
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
 80008c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <HAL_SPI_MspInit+0x90>)
 80008cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <HAL_SPI_MspInit+0x90>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	430a      	orrs	r2, r1
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <HAL_SPI_MspInit+0x90>)
 80008d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008e2:	0021      	movs	r1, r4
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	22f0      	movs	r2, #240	; 0xf0
 80008e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	187b      	adds	r3, r7, r1
 80008ec:	2202      	movs	r2, #2
 80008ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	187a      	adds	r2, r7, r1
 8000904:	23a0      	movs	r3, #160	; 0xa0
 8000906:	05db      	lsls	r3, r3, #23
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f000 f9f2 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b00b      	add	sp, #44	; 0x2c
 8000916:	bd90      	pop	{r4, r7, pc}
 8000918:	40013000 	.word	0x40013000
 800091c:	40021000 	.word	0x40021000

08000920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <HAL_TIM_Base_MspInit+0x38>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10d      	bne.n	800094e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	0289      	lsls	r1, r1, #10
 800093c:	430a      	orrs	r2, r1
 800093e:	641a      	str	r2, [r3, #64]	; 0x40
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_TIM_Base_MspInit+0x3c>)
 8000942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000944:	2380      	movs	r3, #128	; 0x80
 8000946:	029b      	lsls	r3, r3, #10
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b004      	add	sp, #16
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	40014400 	.word	0x40014400
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	2414      	movs	r4, #20
 800096a:	193b      	adds	r3, r7, r4
 800096c:	0018      	movs	r0, r3
 800096e:	2314      	movs	r3, #20
 8000970:	001a      	movs	r2, r3
 8000972:	2100      	movs	r1, #0
 8000974:	f002 f954 	bl	8002c20 <memset>
  if(huart->Instance==USART2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <HAL_UART_MspInit+0x8c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d130      	bne.n	80009e4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <HAL_UART_MspInit+0x90>)
 8000984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <HAL_UART_MspInit+0x90>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0289      	lsls	r1, r1, #10
 800098c:	430a      	orrs	r2, r1
 800098e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000990:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_UART_MspInit+0x90>)
 8000992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	029b      	lsls	r3, r3, #10
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_UART_MspInit+0x90>)
 80009a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <HAL_UART_MspInit+0x90>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_UART_MspInit+0x90>)
 80009ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	220c      	movs	r2, #12
 80009bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2202      	movs	r2, #2
 80009c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2201      	movs	r2, #1
 80009d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	187a      	adds	r2, r7, r1
 80009d8:	23a0      	movs	r3, #160	; 0xa0
 80009da:	05db      	lsls	r3, r3, #23
 80009dc:	0011      	movs	r1, r2
 80009de:	0018      	movs	r0, r3
 80009e0:	f000 f988 	bl	8000cf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	b00b      	add	sp, #44	; 0x2c
 80009ea:	bd90      	pop	{r4, r7, pc}
 80009ec:	40004400 	.word	0x40004400
 80009f0:	40021000 	.word	0x40021000

080009f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <NMI_Handler+0x4>

080009fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <HardFault_Handler+0x4>

08000a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a18:	f000 f89c 	bl	8000b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a2c:	480d      	ldr	r0, [pc, #52]	; (8000a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a30:	f7ff fff7 	bl	8000a22 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LoopForever+0xe>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	; (8000a78 <LoopForever+0x16>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5a:	f002 f8bd 	bl	8002bd8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a5e:	f7ff fcf3 	bl	8000448 <main>

08000a62 <LoopForever>:

LoopForever:
  b LoopForever
 8000a62:	e7fe      	b.n	8000a62 <LoopForever>
  ldr   r0, =_estack
 8000a64:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a70:	08002cd0 	.word	0x08002cd0
  ldr r2, =_sbss
 8000a74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a78:	200001b8 	.word	0x200001b8

08000a7c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_IRQHandler>
	...

08000a80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <HAL_Init+0x3c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_Init+0x3c>)
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	0049      	lsls	r1, r1, #1
 8000a96:	430a      	orrs	r2, r1
 8000a98:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f000 f810 	bl	8000ac0 <HAL_InitTick>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e001      	b.n	8000ab0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000aac:	f7ff fe68 	bl	8000780 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <HAL_InitTick+0x88>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d02b      	beq.n	8000b30 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_InitTick+0x8c>)
 8000ada:	681c      	ldr	r4, [r3, #0]
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <HAL_InitTick+0x88>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	23fa      	movs	r3, #250	; 0xfa
 8000ae4:	0098      	lsls	r0, r3, #2
 8000ae6:	f7ff fb0d 	bl	8000104 <__udivsi3>
 8000aea:	0003      	movs	r3, r0
 8000aec:	0019      	movs	r1, r3
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fb08 	bl	8000104 <__udivsi3>
 8000af4:	0003      	movs	r3, r0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f8ef 	bl	8000cda <HAL_SYSTICK_Config>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d112      	bne.n	8000b26 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d80a      	bhi.n	8000b1c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	2301      	movs	r3, #1
 8000b0a:	425b      	negs	r3, r3
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 f8ce 	bl	8000cb0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_InitTick+0x90>)
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	e00d      	b.n	8000b38 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	18fb      	adds	r3, r7, r3
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	e008      	b.n	8000b38 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b26:	230f      	movs	r3, #15
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e003      	b.n	8000b38 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	2201      	movs	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
}
 8000b3e:	0018      	movs	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b005      	add	sp, #20
 8000b44:	bd90      	pop	{r4, r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000004 	.word	0x20000004

08000b54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b58:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <HAL_IncTick+0x1c>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	001a      	movs	r2, r3
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_IncTick+0x20>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	18d2      	adds	r2, r2, r3
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_IncTick+0x20>)
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	20000008 	.word	0x20000008
 8000b74:	200001b4 	.word	0x200001b4

08000b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b7c:	4b02      	ldr	r3, [pc, #8]	; (8000b88 <HAL_GetTick+0x10>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
}
 8000b80:	0018      	movs	r0, r3
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	200001b4 	.word	0x200001b4

08000b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	0002      	movs	r2, r0
 8000b94:	6039      	str	r1, [r7, #0]
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000ba0:	d828      	bhi.n	8000bf4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba2:	4a2f      	ldr	r2, [pc, #188]	; (8000c60 <__NVIC_SetPriority+0xd4>)
 8000ba4:	1dfb      	adds	r3, r7, #7
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b25b      	sxtb	r3, r3
 8000baa:	089b      	lsrs	r3, r3, #2
 8000bac:	33c0      	adds	r3, #192	; 0xc0
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	589b      	ldr	r3, [r3, r2]
 8000bb2:	1dfa      	adds	r2, r7, #7
 8000bb4:	7812      	ldrb	r2, [r2, #0]
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	2203      	movs	r2, #3
 8000bba:	400a      	ands	r2, r1
 8000bbc:	00d2      	lsls	r2, r2, #3
 8000bbe:	21ff      	movs	r1, #255	; 0xff
 8000bc0:	4091      	lsls	r1, r2
 8000bc2:	000a      	movs	r2, r1
 8000bc4:	43d2      	mvns	r2, r2
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	22ff      	movs	r2, #255	; 0xff
 8000bd0:	401a      	ands	r2, r3
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	2303      	movs	r3, #3
 8000bda:	4003      	ands	r3, r0
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be0:	481f      	ldr	r0, [pc, #124]	; (8000c60 <__NVIC_SetPriority+0xd4>)
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b25b      	sxtb	r3, r3
 8000be8:	089b      	lsrs	r3, r3, #2
 8000bea:	430a      	orrs	r2, r1
 8000bec:	33c0      	adds	r3, #192	; 0xc0
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bf2:	e031      	b.n	8000c58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <__NVIC_SetPriority+0xd8>)
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	400b      	ands	r3, r1
 8000c00:	3b08      	subs	r3, #8
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	3306      	adds	r3, #6
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	18d3      	adds	r3, r2, r3
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	1dfa      	adds	r2, r7, #7
 8000c10:	7812      	ldrb	r2, [r2, #0]
 8000c12:	0011      	movs	r1, r2
 8000c14:	2203      	movs	r2, #3
 8000c16:	400a      	ands	r2, r1
 8000c18:	00d2      	lsls	r2, r2, #3
 8000c1a:	21ff      	movs	r1, #255	; 0xff
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	43d2      	mvns	r2, r2
 8000c22:	401a      	ands	r2, r3
 8000c24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	019b      	lsls	r3, r3, #6
 8000c2a:	22ff      	movs	r2, #255	; 0xff
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	0018      	movs	r0, r3
 8000c34:	2303      	movs	r3, #3
 8000c36:	4003      	ands	r3, r0
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3c:	4809      	ldr	r0, [pc, #36]	; (8000c64 <__NVIC_SetPriority+0xd8>)
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	001c      	movs	r4, r3
 8000c44:	230f      	movs	r3, #15
 8000c46:	4023      	ands	r3, r4
 8000c48:	3b08      	subs	r3, #8
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	3306      	adds	r3, #6
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	18c3      	adds	r3, r0, r3
 8000c54:	3304      	adds	r3, #4
 8000c56:	601a      	str	r2, [r3, #0]
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	e000e100 	.word	0xe000e100
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	1e5a      	subs	r2, r3, #1
 8000c74:	2380      	movs	r3, #128	; 0x80
 8000c76:	045b      	lsls	r3, r3, #17
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d301      	bcc.n	8000c80 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e010      	b.n	8000ca2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c80:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <SysTick_Config+0x44>)
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	3a01      	subs	r2, #1
 8000c86:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c88:	2301      	movs	r3, #1
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	2103      	movs	r1, #3
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff ff7c 	bl	8000b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x44>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x44>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	210f      	movs	r1, #15
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	1c02      	adds	r2, r0, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ff5d 	bl	8000b8c <__NVIC_SetPriority>
}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b082      	sub	sp, #8
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ffbf 	bl	8000c68 <SysTick_Config>
 8000cea:	0003      	movs	r3, r0
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e147      	b.n	8000f94 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	000a      	movs	r2, r1
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d100      	bne.n	8000d1c <HAL_GPIO_Init+0x28>
 8000d1a:	e138      	b.n	8000f8e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2203      	movs	r2, #3
 8000d22:	4013      	ands	r3, r2
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d005      	beq.n	8000d34 <HAL_GPIO_Init+0x40>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d130      	bne.n	8000d96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	409a      	lsls	r2, r3
 8000d42:	0013      	movs	r3, r2
 8000d44:	43da      	mvns	r2, r3
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	409a      	lsls	r2, r3
 8000d56:	0013      	movs	r3, r2
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
 8000d70:	0013      	movs	r3, r2
 8000d72:	43da      	mvns	r2, r3
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	091b      	lsrs	r3, r3, #4
 8000d80:	2201      	movs	r2, #1
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d017      	beq.n	8000dd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	68db      	ldr	r3, [r3, #12]
 8000da6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	409a      	lsls	r2, r3
 8000db0:	0013      	movs	r3, r2
 8000db2:	43da      	mvns	r2, r3
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	689a      	ldr	r2, [r3, #8]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	0013      	movs	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d123      	bne.n	8000e26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	0092      	lsls	r2, r2, #2
 8000de8:	58d3      	ldr	r3, [r2, r3]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2207      	movs	r2, #7
 8000df0:	4013      	ands	r3, r2
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	220f      	movs	r2, #15
 8000df6:	409a      	lsls	r2, r3
 8000df8:	0013      	movs	r3, r2
 8000dfa:	43da      	mvns	r2, r3
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	691a      	ldr	r2, [r3, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2107      	movs	r1, #7
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3208      	adds	r2, #8
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	6939      	ldr	r1, [r7, #16]
 8000e24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2203      	movs	r2, #3
 8000e44:	401a      	ands	r2, r3
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	409a      	lsls	r2, r3
 8000e4c:	0013      	movs	r3, r2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	23c0      	movs	r3, #192	; 0xc0
 8000e60:	029b      	lsls	r3, r3, #10
 8000e62:	4013      	ands	r3, r2
 8000e64:	d100      	bne.n	8000e68 <HAL_GPIO_Init+0x174>
 8000e66:	e092      	b.n	8000f8e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e68:	4a50      	ldr	r2, [pc, #320]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	089b      	lsrs	r3, r3, #2
 8000e6e:	3318      	adds	r3, #24
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	589b      	ldr	r3, [r3, r2]
 8000e74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	220f      	movs	r2, #15
 8000e80:	409a      	lsls	r2, r3
 8000e82:	0013      	movs	r3, r2
 8000e84:	43da      	mvns	r2, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	23a0      	movs	r3, #160	; 0xa0
 8000e90:	05db      	lsls	r3, r3, #23
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d013      	beq.n	8000ebe <HAL_GPIO_Init+0x1ca>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a45      	ldr	r2, [pc, #276]	; (8000fb0 <HAL_GPIO_Init+0x2bc>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d00d      	beq.n	8000eba <HAL_GPIO_Init+0x1c6>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a44      	ldr	r2, [pc, #272]	; (8000fb4 <HAL_GPIO_Init+0x2c0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x1c2>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a43      	ldr	r2, [pc, #268]	; (8000fb8 <HAL_GPIO_Init+0x2c4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d101      	bne.n	8000eb2 <HAL_GPIO_Init+0x1be>
 8000eae:	2303      	movs	r3, #3
 8000eb0:	e006      	b.n	8000ec0 <HAL_GPIO_Init+0x1cc>
 8000eb2:	2305      	movs	r3, #5
 8000eb4:	e004      	b.n	8000ec0 <HAL_GPIO_Init+0x1cc>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e002      	b.n	8000ec0 <HAL_GPIO_Init+0x1cc>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <HAL_GPIO_Init+0x1cc>
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	697a      	ldr	r2, [r7, #20]
 8000ec2:	2103      	movs	r1, #3
 8000ec4:	400a      	ands	r2, r1
 8000ec6:	00d2      	lsls	r2, r2, #3
 8000ec8:	4093      	lsls	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ed0:	4936      	ldr	r1, [pc, #216]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	089b      	lsrs	r3, r3, #2
 8000ed6:	3318      	adds	r3, #24
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ede:	4a33      	ldr	r2, [pc, #204]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	58d3      	ldr	r3, [r2, r3]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	43da      	mvns	r2, r3
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	2380      	movs	r3, #128	; 0x80
 8000ef6:	025b      	lsls	r3, r3, #9
 8000ef8:	4013      	ands	r3, r2
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f04:	4929      	ldr	r1, [pc, #164]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000f06:	2280      	movs	r2, #128	; 0x80
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000f0c:	4a27      	ldr	r2, [pc, #156]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000f0e:	2384      	movs	r3, #132	; 0x84
 8000f10:	58d3      	ldr	r3, [r2, r3]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	029b      	lsls	r3, r3, #10
 8000f26:	4013      	ands	r3, r2
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f32:	491e      	ldr	r1, [pc, #120]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000f34:	2284      	movs	r2, #132	; 0x84
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f3a:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43da      	mvns	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685a      	ldr	r2, [r3, #4]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	035b      	lsls	r3, r3, #13
 8000f52:	4013      	ands	r3, r2
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43da      	mvns	r2, r3
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	2380      	movs	r3, #128	; 0x80
 8000f7a:	039b      	lsls	r3, r3, #14
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <HAL_GPIO_Init+0x2b8>)
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	3301      	adds	r3, #1
 8000f92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	40da      	lsrs	r2, r3
 8000f9c:	1e13      	subs	r3, r2, #0
 8000f9e:	d000      	beq.n	8000fa2 <HAL_GPIO_Init+0x2ae>
 8000fa0:	e6b0      	b.n	8000d04 <HAL_GPIO_Init+0x10>
  }
}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b006      	add	sp, #24
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40021800 	.word	0x40021800
 8000fb0:	50000400 	.word	0x50000400
 8000fb4:	50000800 	.word	0x50000800
 8000fb8:	50000c00 	.word	0x50000c00

08000fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	0008      	movs	r0, r1
 8000fc6:	0011      	movs	r1, r2
 8000fc8:	1cbb      	adds	r3, r7, #2
 8000fca:	1c02      	adds	r2, r0, #0
 8000fcc:	801a      	strh	r2, [r3, #0]
 8000fce:	1c7b      	adds	r3, r7, #1
 8000fd0:	1c0a      	adds	r2, r1, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	1c7b      	adds	r3, r7, #1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d004      	beq.n	8000fe6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fdc:	1cbb      	adds	r3, r7, #2
 8000fde:	881a      	ldrh	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fe4:	e003      	b.n	8000fee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fe6:	1cbb      	adds	r3, r7, #2
 8000fe8:	881a      	ldrh	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b002      	add	sp, #8
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e082      	b.n	8001110 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2241      	movs	r2, #65	; 0x41
 800100e:	5c9b      	ldrb	r3, [r3, r2]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d107      	bne.n	8001026 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2240      	movs	r2, #64	; 0x40
 800101a:	2100      	movs	r1, #0
 800101c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	0018      	movs	r0, r3
 8001022:	f7ff fbd1 	bl	80007c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2241      	movs	r2, #65	; 0x41
 800102a:	2124      	movs	r1, #36	; 0x24
 800102c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2101      	movs	r1, #1
 800103a:	438a      	bics	r2, r1
 800103c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4934      	ldr	r1, [pc, #208]	; (8001118 <HAL_I2C_Init+0x120>)
 8001048:	400a      	ands	r2, r1
 800104a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4931      	ldr	r1, [pc, #196]	; (800111c <HAL_I2C_Init+0x124>)
 8001058:	400a      	ands	r2, r1
 800105a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d108      	bne.n	8001076 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689a      	ldr	r2, [r3, #8]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	0209      	lsls	r1, r1, #8
 8001070:	430a      	orrs	r2, r1
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	e007      	b.n	8001086 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2184      	movs	r1, #132	; 0x84
 8001080:	0209      	lsls	r1, r1, #8
 8001082:	430a      	orrs	r2, r1
 8001084:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	2b02      	cmp	r3, #2
 800108c:	d104      	bne.n	8001098 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	491f      	ldr	r1, [pc, #124]	; (8001120 <HAL_I2C_Init+0x128>)
 80010a4:	430a      	orrs	r2, r1
 80010a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	491a      	ldr	r1, [pc, #104]	; (800111c <HAL_I2C_Init+0x124>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	431a      	orrs	r2, r3
 80010c2:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69d9      	ldr	r1, [r3, #28]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a1a      	ldr	r2, [r3, #32]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	430a      	orrs	r2, r1
 80010e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2241      	movs	r2, #65	; 0x41
 80010fc:	2120      	movs	r1, #32
 80010fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2242      	movs	r2, #66	; 0x42
 800110a:	2100      	movs	r1, #0
 800110c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800110e:	2300      	movs	r3, #0
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}
 8001118:	f0ffffff 	.word	0xf0ffffff
 800111c:	ffff7fff 	.word	0xffff7fff
 8001120:	02008000 	.word	0x02008000

08001124 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2241      	movs	r2, #65	; 0x41
 8001132:	5c9b      	ldrb	r3, [r3, r2]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b20      	cmp	r3, #32
 8001138:	d138      	bne.n	80011ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	5c9b      	ldrb	r3, [r3, r2]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d101      	bne.n	8001148 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001144:	2302      	movs	r3, #2
 8001146:	e032      	b.n	80011ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2240      	movs	r2, #64	; 0x40
 800114c:	2101      	movs	r1, #1
 800114e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2241      	movs	r2, #65	; 0x41
 8001154:	2124      	movs	r1, #36	; 0x24
 8001156:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2101      	movs	r1, #1
 8001164:	438a      	bics	r2, r1
 8001166:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4911      	ldr	r1, [pc, #68]	; (80011b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001174:	400a      	ands	r2, r1
 8001176:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6819      	ldr	r1, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2101      	movs	r1, #1
 8001194:	430a      	orrs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2241      	movs	r2, #65	; 0x41
 800119c:	2120      	movs	r1, #32
 800119e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2240      	movs	r2, #64	; 0x40
 80011a4:	2100      	movs	r1, #0
 80011a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	e000      	b.n	80011ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80011ac:	2302      	movs	r3, #2
  }
}
 80011ae:	0018      	movs	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	ffffefff 	.word	0xffffefff

080011bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2241      	movs	r2, #65	; 0x41
 80011ca:	5c9b      	ldrb	r3, [r3, r2]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b20      	cmp	r3, #32
 80011d0:	d139      	bne.n	8001246 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2240      	movs	r2, #64	; 0x40
 80011d6:	5c9b      	ldrb	r3, [r3, r2]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80011dc:	2302      	movs	r3, #2
 80011de:	e033      	b.n	8001248 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2240      	movs	r2, #64	; 0x40
 80011e4:	2101      	movs	r1, #1
 80011e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2241      	movs	r2, #65	; 0x41
 80011ec:	2124      	movs	r1, #36	; 0x24
 80011ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2101      	movs	r1, #1
 80011fc:	438a      	bics	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4a11      	ldr	r2, [pc, #68]	; (8001250 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2101      	movs	r1, #1
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2241      	movs	r2, #65	; 0x41
 8001236:	2120      	movs	r1, #32
 8001238:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2240      	movs	r2, #64	; 0x40
 800123e:	2100      	movs	r1, #0
 8001240:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001246:	2302      	movs	r3, #2
  }
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b004      	add	sp, #16
 800124e:	bd80      	pop	{r7, pc}
 8001250:	fffff0ff 	.word	0xfffff0ff

08001254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001262:	4013      	ands	r3, r2
 8001264:	0019      	movs	r1, r3
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	429a      	cmp	r2, r3
 8001276:	d11f      	bne.n	80012b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	0013      	movs	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	189b      	adds	r3, r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	4912      	ldr	r1, [pc, #72]	; (80012d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001286:	0018      	movs	r0, r3
 8001288:	f7fe ff3c 	bl	8000104 <__udivsi3>
 800128c:	0003      	movs	r3, r0
 800128e:	3301      	adds	r3, #1
 8001290:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001292:	e008      	b.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3b01      	subs	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e001      	b.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e009      	b.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012a8:	695a      	ldr	r2, [r3, #20]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	401a      	ands	r2, r3
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d0ed      	beq.n	8001294 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	b004      	add	sp, #16
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	40007000 	.word	0x40007000
 80012c8:	fffff9ff 	.word	0xfffff9ff
 80012cc:	20000000 	.word	0x20000000
 80012d0:	000f4240 	.word	0x000f4240

080012d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	23e0      	movs	r3, #224	; 0xe0
 80012de:	01db      	lsls	r3, r3, #7
 80012e0:	4013      	ands	r3, r2
}
 80012e2:	0018      	movs	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e304      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2201      	movs	r2, #1
 8001304:	4013      	ands	r3, r2
 8001306:	d100      	bne.n	800130a <HAL_RCC_OscConfig+0x1e>
 8001308:	e07c      	b.n	8001404 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800130a:	4bc3      	ldr	r3, [pc, #780]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2238      	movs	r2, #56	; 0x38
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001314:	4bc0      	ldr	r3, [pc, #768]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2203      	movs	r2, #3
 800131a:	4013      	ands	r3, r2
 800131c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	2b10      	cmp	r3, #16
 8001322:	d102      	bne.n	800132a <HAL_RCC_OscConfig+0x3e>
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	2b03      	cmp	r3, #3
 8001328:	d002      	beq.n	8001330 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2b08      	cmp	r3, #8
 800132e:	d10b      	bne.n	8001348 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	4bb9      	ldr	r3, [pc, #740]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d062      	beq.n	8001402 <HAL_RCC_OscConfig+0x116>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d15e      	bne.n	8001402 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e2df      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	025b      	lsls	r3, r3, #9
 8001350:	429a      	cmp	r2, r3
 8001352:	d107      	bne.n	8001364 <HAL_RCC_OscConfig+0x78>
 8001354:	4bb0      	ldr	r3, [pc, #704]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4baf      	ldr	r3, [pc, #700]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0249      	lsls	r1, r1, #9
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	e020      	b.n	80013a6 <HAL_RCC_OscConfig+0xba>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	23a0      	movs	r3, #160	; 0xa0
 800136a:	02db      	lsls	r3, r3, #11
 800136c:	429a      	cmp	r2, r3
 800136e:	d10e      	bne.n	800138e <HAL_RCC_OscConfig+0xa2>
 8001370:	4ba9      	ldr	r3, [pc, #676]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	4ba8      	ldr	r3, [pc, #672]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001376:	2180      	movs	r1, #128	; 0x80
 8001378:	02c9      	lsls	r1, r1, #11
 800137a:	430a      	orrs	r2, r1
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	4ba6      	ldr	r3, [pc, #664]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4ba5      	ldr	r3, [pc, #660]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0249      	lsls	r1, r1, #9
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e00b      	b.n	80013a6 <HAL_RCC_OscConfig+0xba>
 800138e:	4ba2      	ldr	r3, [pc, #648]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	4ba1      	ldr	r3, [pc, #644]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001394:	49a1      	ldr	r1, [pc, #644]	; (800161c <HAL_RCC_OscConfig+0x330>)
 8001396:	400a      	ands	r2, r1
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	4b9f      	ldr	r3, [pc, #636]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b9e      	ldr	r3, [pc, #632]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80013a0:	499f      	ldr	r1, [pc, #636]	; (8001620 <HAL_RCC_OscConfig+0x334>)
 80013a2:	400a      	ands	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d014      	beq.n	80013d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fbe3 	bl	8000b78 <HAL_GetTick>
 80013b2:	0003      	movs	r3, r0
 80013b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fbde 	bl	8000b78 <HAL_GetTick>
 80013bc:	0002      	movs	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	; 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e29e      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ca:	4b93      	ldr	r3, [pc, #588]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	029b      	lsls	r3, r3, #10
 80013d2:	4013      	ands	r3, r2
 80013d4:	d0f0      	beq.n	80013b8 <HAL_RCC_OscConfig+0xcc>
 80013d6:	e015      	b.n	8001404 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d8:	f7ff fbce 	bl	8000b78 <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013e2:	f7ff fbc9 	bl	8000b78 <HAL_GetTick>
 80013e6:	0002      	movs	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b64      	cmp	r3, #100	; 0x64
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e289      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013f4:	4b88      	ldr	r3, [pc, #544]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	029b      	lsls	r3, r3, #10
 80013fc:	4013      	ands	r3, r2
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0xf6>
 8001400:	e000      	b.n	8001404 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001402:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2202      	movs	r2, #2
 800140a:	4013      	ands	r3, r2
 800140c:	d100      	bne.n	8001410 <HAL_RCC_OscConfig+0x124>
 800140e:	e099      	b.n	8001544 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001410:	4b81      	ldr	r3, [pc, #516]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	2238      	movs	r2, #56	; 0x38
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800141a:	4b7f      	ldr	r3, [pc, #508]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2203      	movs	r2, #3
 8001420:	4013      	ands	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	2b10      	cmp	r3, #16
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0x144>
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d002      	beq.n	8001436 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d135      	bne.n	80014a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001436:	4b78      	ldr	r3, [pc, #480]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	4013      	ands	r3, r2
 8001440:	d005      	beq.n	800144e <HAL_RCC_OscConfig+0x162>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e25c      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800144e:	4b72      	ldr	r3, [pc, #456]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	4a74      	ldr	r2, [pc, #464]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 8001454:	4013      	ands	r3, r2
 8001456:	0019      	movs	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	695b      	ldr	r3, [r3, #20]
 800145c:	021a      	lsls	r2, r3, #8
 800145e:	4b6e      	ldr	r3, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d112      	bne.n	8001490 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800146a:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a6e      	ldr	r2, [pc, #440]	; (8001628 <HAL_RCC_OscConfig+0x33c>)
 8001470:	4013      	ands	r3, r2
 8001472:	0019      	movs	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691a      	ldr	r2, [r3, #16]
 8001478:	4b67      	ldr	r3, [pc, #412]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800147a:	430a      	orrs	r2, r1
 800147c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800147e:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	0adb      	lsrs	r3, r3, #11
 8001484:	2207      	movs	r2, #7
 8001486:	4013      	ands	r3, r2
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x340>)
 800148a:	40da      	lsrs	r2, r3
 800148c:	4b68      	ldr	r3, [pc, #416]	; (8001630 <HAL_RCC_OscConfig+0x344>)
 800148e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001490:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x348>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff fb13 	bl	8000ac0 <HAL_InitTick>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d051      	beq.n	8001542 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e232      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d030      	beq.n	800150c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014aa:	4b5b      	ldr	r3, [pc, #364]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <HAL_RCC_OscConfig+0x33c>)
 80014b0:	4013      	ands	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	691a      	ldr	r2, [r3, #16]
 80014b8:	4b57      	ldr	r3, [pc, #348]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80014be:	4b56      	ldr	r3, [pc, #344]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b55      	ldr	r3, [pc, #340]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	0049      	lsls	r1, r1, #1
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb54 	bl	8000b78 <HAL_GetTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fb4f 	bl	8000b78 <HAL_GetTick>
 80014da:	0002      	movs	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e20f      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	4b4b      	ldr	r3, [pc, #300]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4013      	ands	r3, r2
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b48      	ldr	r3, [pc, #288]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	4a4a      	ldr	r2, [pc, #296]	; (8001624 <HAL_RCC_OscConfig+0x338>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	0019      	movs	r1, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	021a      	lsls	r2, r3, #8
 8001504:	4b44      	ldr	r3, [pc, #272]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001506:	430a      	orrs	r2, r1
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	e01b      	b.n	8001544 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800150c:	4b42      	ldr	r3, [pc, #264]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b41      	ldr	r3, [pc, #260]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001512:	4949      	ldr	r1, [pc, #292]	; (8001638 <HAL_RCC_OscConfig+0x34c>)
 8001514:	400a      	ands	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fb2e 	bl	8000b78 <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fb29 	bl	8000b78 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1e9      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001534:	4b38      	ldr	r3, [pc, #224]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4013      	ands	r3, r2
 800153e:	d1f0      	bne.n	8001522 <HAL_RCC_OscConfig+0x236>
 8001540:	e000      	b.n	8001544 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001542:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2208      	movs	r2, #8
 800154a:	4013      	ands	r3, r2
 800154c:	d047      	beq.n	80015de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800154e:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2238      	movs	r2, #56	; 0x38
 8001554:	4013      	ands	r3, r2
 8001556:	2b18      	cmp	r3, #24
 8001558:	d10a      	bne.n	8001570 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800155a:	4b2f      	ldr	r3, [pc, #188]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800155c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d03c      	beq.n	80015de <HAL_RCC_OscConfig+0x2f2>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d138      	bne.n	80015de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e1cb      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d019      	beq.n	80015ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001578:	4b27      	ldr	r3, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800157a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800157c:	4b26      	ldr	r3, [pc, #152]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 800157e:	2101      	movs	r1, #1
 8001580:	430a      	orrs	r2, r1
 8001582:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001584:	f7ff faf8 	bl	8000b78 <HAL_GetTick>
 8001588:	0003      	movs	r3, r0
 800158a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158e:	f7ff faf3 	bl	8000b78 <HAL_GetTick>
 8001592:	0002      	movs	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e1b3      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80015a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d0f1      	beq.n	800158e <HAL_RCC_OscConfig+0x2a2>
 80015aa:	e018      	b.n	80015de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80015ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015b0:	4b19      	ldr	r3, [pc, #100]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80015b2:	2101      	movs	r1, #1
 80015b4:	438a      	bics	r2, r1
 80015b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fade 	bl	8000b78 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c2:	f7ff fad9 	bl	8000b78 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e199      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d8:	2202      	movs	r2, #2
 80015da:	4013      	ands	r3, r2
 80015dc:	d1f1      	bne.n	80015c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2204      	movs	r2, #4
 80015e4:	4013      	ands	r3, r2
 80015e6:	d100      	bne.n	80015ea <HAL_RCC_OscConfig+0x2fe>
 80015e8:	e0c6      	b.n	8001778 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ea:	231f      	movs	r3, #31
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2238      	movs	r2, #56	; 0x38
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	d11e      	bne.n	800163c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_RCC_OscConfig+0x32c>)
 8001600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d100      	bne.n	800160a <HAL_RCC_OscConfig+0x31e>
 8001608:	e0b6      	b.n	8001778 <HAL_RCC_OscConfig+0x48c>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d000      	beq.n	8001614 <HAL_RCC_OscConfig+0x328>
 8001612:	e0b1      	b.n	8001778 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e177      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
 8001618:	40021000 	.word	0x40021000
 800161c:	fffeffff 	.word	0xfffeffff
 8001620:	fffbffff 	.word	0xfffbffff
 8001624:	ffff80ff 	.word	0xffff80ff
 8001628:	ffffc7ff 	.word	0xffffc7ff
 800162c:	00f42400 	.word	0x00f42400
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004
 8001638:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800163c:	4bb4      	ldr	r3, [pc, #720]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 800163e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	055b      	lsls	r3, r3, #21
 8001644:	4013      	ands	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x360>
 8001648:	2301      	movs	r3, #1
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x362>
 800164c:	2300      	movs	r3, #0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d011      	beq.n	8001676 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4baf      	ldr	r3, [pc, #700]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001656:	4bae      	ldr	r3, [pc, #696]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	0549      	lsls	r1, r1, #21
 800165c:	430a      	orrs	r2, r1
 800165e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001660:	4bab      	ldr	r3, [pc, #684]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	055b      	lsls	r3, r3, #21
 8001668:	4013      	ands	r3, r2
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800166e:	231f      	movs	r3, #31
 8001670:	18fb      	adds	r3, r7, r3
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001676:	4ba7      	ldr	r3, [pc, #668]	; (8001914 <HAL_RCC_OscConfig+0x628>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4013      	ands	r3, r2
 8001680:	d11a      	bne.n	80016b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001682:	4ba4      	ldr	r3, [pc, #656]	; (8001914 <HAL_RCC_OscConfig+0x628>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	4ba3      	ldr	r3, [pc, #652]	; (8001914 <HAL_RCC_OscConfig+0x628>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	0049      	lsls	r1, r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001690:	f7ff fa72 	bl	8000b78 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169a:	f7ff fa6d 	bl	8000b78 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e12d      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ac:	4b99      	ldr	r3, [pc, #612]	; (8001914 <HAL_RCC_OscConfig+0x628>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4013      	ands	r3, r2
 80016b6:	d0f0      	beq.n	800169a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d106      	bne.n	80016ce <HAL_RCC_OscConfig+0x3e2>
 80016c0:	4b93      	ldr	r3, [pc, #588]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80016c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016c4:	4b92      	ldr	r3, [pc, #584]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80016c6:	2101      	movs	r1, #1
 80016c8:	430a      	orrs	r2, r1
 80016ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80016cc:	e01c      	b.n	8001708 <HAL_RCC_OscConfig+0x41c>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b05      	cmp	r3, #5
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x404>
 80016d6:	4b8e      	ldr	r3, [pc, #568]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80016d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016da:	4b8d      	ldr	r3, [pc, #564]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80016dc:	2104      	movs	r1, #4
 80016de:	430a      	orrs	r2, r1
 80016e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80016e2:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80016e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016e6:	4b8a      	ldr	r3, [pc, #552]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80016e8:	2101      	movs	r1, #1
 80016ea:	430a      	orrs	r2, r1
 80016ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0x41c>
 80016f0:	4b87      	ldr	r3, [pc, #540]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80016f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f4:	4b86      	ldr	r3, [pc, #536]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	438a      	bics	r2, r1
 80016fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80016fc:	4b84      	ldr	r3, [pc, #528]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80016fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001700:	4b83      	ldr	r3, [pc, #524]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001702:	2104      	movs	r1, #4
 8001704:	438a      	bics	r2, r1
 8001706:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d014      	beq.n	800173a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff fa32 	bl	8000b78 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001718:	e009      	b.n	800172e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fa2d 	bl	8000b78 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4a7c      	ldr	r2, [pc, #496]	; (8001918 <HAL_RCC_OscConfig+0x62c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e0ec      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800172e:	4b78      	ldr	r3, [pc, #480]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x42e>
 8001738:	e013      	b.n	8001762 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173a:	f7ff fa1d 	bl	8000b78 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001742:	e009      	b.n	8001758 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001744:	f7ff fa18 	bl	8000b78 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	4a72      	ldr	r2, [pc, #456]	; (8001918 <HAL_RCC_OscConfig+0x62c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e0d7      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001758:	4b6d      	ldr	r3, [pc, #436]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 800175a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001762:	231f      	movs	r3, #31
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d105      	bne.n	8001778 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800176c:	4b68      	ldr	r3, [pc, #416]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 800176e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001770:	4b67      	ldr	r3, [pc, #412]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001772:	496a      	ldr	r1, [pc, #424]	; (800191c <HAL_RCC_OscConfig+0x630>)
 8001774:	400a      	ands	r2, r1
 8001776:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d100      	bne.n	8001782 <HAL_RCC_OscConfig+0x496>
 8001780:	e0c1      	b.n	8001906 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001782:	4b63      	ldr	r3, [pc, #396]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	2238      	movs	r2, #56	; 0x38
 8001788:	4013      	ands	r3, r2
 800178a:	2b10      	cmp	r3, #16
 800178c:	d100      	bne.n	8001790 <HAL_RCC_OscConfig+0x4a4>
 800178e:	e081      	b.n	8001894 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d156      	bne.n	8001846 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001798:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 800179e:	4960      	ldr	r1, [pc, #384]	; (8001920 <HAL_RCC_OscConfig+0x634>)
 80017a0:	400a      	ands	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff f9e8 	bl	8000b78 <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff f9e3 	bl	8000b78 <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0a3      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c0:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	049b      	lsls	r3, r3, #18
 80017c8:	4013      	ands	r3, r2
 80017ca:	d1f0      	bne.n	80017ae <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4a54      	ldr	r2, [pc, #336]	; (8001924 <HAL_RCC_OscConfig+0x638>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1a      	ldr	r2, [r3, #32]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	431a      	orrs	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f8:	431a      	orrs	r2, r3
 80017fa:	4b45      	ldr	r3, [pc, #276]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	4b43      	ldr	r3, [pc, #268]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b42      	ldr	r3, [pc, #264]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	0449      	lsls	r1, r1, #17
 800180a:	430a      	orrs	r2, r1
 800180c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800180e:	4b40      	ldr	r3, [pc, #256]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001810:	68da      	ldr	r2, [r3, #12]
 8001812:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0549      	lsls	r1, r1, #21
 8001818:	430a      	orrs	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181c:	f7ff f9ac 	bl	8000b78 <HAL_GetTick>
 8001820:	0003      	movs	r3, r0
 8001822:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001826:	f7ff f9a7 	bl	8000b78 <HAL_GetTick>
 800182a:	0002      	movs	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e067      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	049b      	lsls	r3, r3, #18
 8001840:	4013      	ands	r3, r2
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x53a>
 8001844:	e05f      	b.n	8001906 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001846:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b31      	ldr	r3, [pc, #196]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 800184c:	4934      	ldr	r1, [pc, #208]	; (8001920 <HAL_RCC_OscConfig+0x634>)
 800184e:	400a      	ands	r2, r1
 8001850:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	4b2e      	ldr	r3, [pc, #184]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001858:	2103      	movs	r1, #3
 800185a:	438a      	bics	r2, r1
 800185c:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800185e:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001864:	4930      	ldr	r1, [pc, #192]	; (8001928 <HAL_RCC_OscConfig+0x63c>)
 8001866:	400a      	ands	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff f985 	bl	8000b78 <HAL_GetTick>
 800186e:	0003      	movs	r3, r0
 8001870:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001874:	f7ff f980 	bl	8000b78 <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e040      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	049b      	lsls	r3, r3, #18
 800188e:	4013      	ands	r3, r2
 8001890:	d1f0      	bne.n	8001874 <HAL_RCC_OscConfig+0x588>
 8001892:	e038      	b.n	8001906 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e033      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_RCC_OscConfig+0x624>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2203      	movs	r2, #3
 80018aa:	401a      	ands	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d126      	bne.n	8001902 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2270      	movs	r2, #112	; 0x70
 80018b8:	401a      	ands	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11f      	bne.n	8001902 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	23fe      	movs	r3, #254	; 0xfe
 80018c6:	01db      	lsls	r3, r3, #7
 80018c8:	401a      	ands	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ce:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d116      	bne.n	8001902 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	23f8      	movs	r3, #248	; 0xf8
 80018d8:	039b      	lsls	r3, r3, #14
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d10e      	bne.n	8001902 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	23e0      	movs	r3, #224	; 0xe0
 80018e8:	051b      	lsls	r3, r3, #20
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	0f5b      	lsrs	r3, r3, #29
 80018f8:	075a      	lsls	r2, r3, #29
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	0018      	movs	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	b008      	add	sp, #32
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000
 8001914:	40007000 	.word	0x40007000
 8001918:	00001388 	.word	0x00001388
 800191c:	efffffff 	.word	0xefffffff
 8001920:	feffffff 	.word	0xfeffffff
 8001924:	11c1808c 	.word	0x11c1808c
 8001928:	eefeffff 	.word	0xeefeffff

0800192c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e0e9      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001940:	4b76      	ldr	r3, [pc, #472]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2207      	movs	r2, #7
 8001946:	4013      	ands	r3, r2
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d91e      	bls.n	800198c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194e:	4b73      	ldr	r3, [pc, #460]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2207      	movs	r2, #7
 8001954:	4393      	bics	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001960:	f7ff f90a 	bl	8000b78 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001968:	e009      	b.n	800197e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196a:	f7ff f905 	bl	8000b78 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e0ca      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800197e:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d1ee      	bne.n	800196a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2202      	movs	r2, #2
 8001992:	4013      	ands	r3, r2
 8001994:	d015      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2204      	movs	r2, #4
 800199c:	4013      	ands	r3, r2
 800199e:	d006      	beq.n	80019ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019a0:	4b60      	ldr	r3, [pc, #384]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019a6:	21e0      	movs	r1, #224	; 0xe0
 80019a8:	01c9      	lsls	r1, r1, #7
 80019aa:	430a      	orrs	r2, r1
 80019ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	4a5d      	ldr	r2, [pc, #372]	; (8001b28 <HAL_RCC_ClockConfig+0x1fc>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	0019      	movs	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2201      	movs	r2, #1
 80019c8:	4013      	ands	r3, r2
 80019ca:	d057      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d107      	bne.n	80019e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	029b      	lsls	r3, r3, #10
 80019dc:	4013      	ands	r3, r2
 80019de:	d12b      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e097      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ec:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	049b      	lsls	r3, r3, #18
 80019f4:	4013      	ands	r3, r2
 80019f6:	d11f      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e08b      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a04:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d113      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e07f      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d106      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1c:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a20:	2202      	movs	r2, #2
 8001a22:	4013      	ands	r3, r2
 8001a24:	d108      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e074      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	2202      	movs	r2, #2
 8001a30:	4013      	ands	r3, r2
 8001a32:	d101      	bne.n	8001a38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e06d      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a38:	4b3a      	ldr	r3, [pc, #232]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	4393      	bics	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a4c:	f7ff f894 	bl	8000b78 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a54:	e009      	b.n	8001a6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a56:	f7ff f88f 	bl	8000b78 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	4a2f      	ldr	r2, [pc, #188]	; (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e054      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2238      	movs	r2, #56	; 0x38
 8001a70:	401a      	ands	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	00db      	lsls	r3, r3, #3
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d1ec      	bne.n	8001a56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2207      	movs	r2, #7
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d21e      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2207      	movs	r2, #7
 8001a90:	4393      	bics	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f86c 	bl	8000b78 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7ff f867 	bl	8000b78 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_RCC_ClockConfig+0x1f4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e02c      	b.n	8001b14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_RCC_ClockConfig+0x1f0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2207      	movs	r2, #7
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2204      	movs	r2, #4
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4a15      	ldr	r2, [pc, #84]	; (8001b2c <HAL_RCC_ClockConfig+0x200>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ae6:	f000 f829 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8001aea:	0001      	movs	r1, r0
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_ClockConfig+0x1f8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	220f      	movs	r2, #15
 8001af4:	401a      	ands	r2, r3
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_RCC_ClockConfig+0x204>)
 8001af8:	0092      	lsls	r2, r2, #2
 8001afa:	58d3      	ldr	r3, [r2, r3]
 8001afc:	221f      	movs	r2, #31
 8001afe:	4013      	ands	r3, r2
 8001b00:	000a      	movs	r2, r1
 8001b02:	40da      	lsrs	r2, r3
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x208>)
 8001b06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b08:	4b0b      	ldr	r3, [pc, #44]	; (8001b38 <HAL_RCC_ClockConfig+0x20c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7fe ffd7 	bl	8000ac0 <HAL_InitTick>
 8001b12:	0003      	movs	r3, r0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b004      	add	sp, #16
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40022000 	.word	0x40022000
 8001b20:	00001388 	.word	0x00001388
 8001b24:	40021000 	.word	0x40021000
 8001b28:	fffff0ff 	.word	0xfffff0ff
 8001b2c:	ffff8fff 	.word	0xffff8fff
 8001b30:	08002c48 	.word	0x08002c48
 8001b34:	20000000 	.word	0x20000000
 8001b38:	20000004 	.word	0x20000004

08001b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b42:	4b3c      	ldr	r3, [pc, #240]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2238      	movs	r2, #56	; 0x38
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d10f      	bne.n	8001b6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b4c:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0adb      	lsrs	r3, r3, #11
 8001b52:	2207      	movs	r2, #7
 8001b54:	4013      	ands	r3, r2
 8001b56:	2201      	movs	r2, #1
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	4835      	ldr	r0, [pc, #212]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b62:	f7fe facf 	bl	8000104 <__udivsi3>
 8001b66:	0003      	movs	r3, r0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	e05d      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2238      	movs	r2, #56	; 0x38
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d102      	bne.n	8001b7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001b7a:	613b      	str	r3, [r7, #16]
 8001b7c:	e054      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2238      	movs	r2, #56	; 0x38
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d138      	bne.n	8001bfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2203      	movs	r2, #3
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b94:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d10d      	bne.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	4824      	ldr	r0, [pc, #144]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001bac:	f7fe faaa 	bl	8000104 <__udivsi3>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	0019      	movs	r1, r3
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	227f      	movs	r2, #127	; 0x7f
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	434b      	muls	r3, r1
 8001bc0:	617b      	str	r3, [r7, #20]
        break;
 8001bc2:	e00d      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	481c      	ldr	r0, [pc, #112]	; (8001c38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bc8:	f7fe fa9c 	bl	8000104 <__udivsi3>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	0019      	movs	r1, r3
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	227f      	movs	r2, #127	; 0x7f
 8001bd8:	4013      	ands	r3, r2
 8001bda:	434b      	muls	r3, r1
 8001bdc:	617b      	str	r3, [r7, #20]
        break;
 8001bde:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001be0:	4b14      	ldr	r3, [pc, #80]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0f5b      	lsrs	r3, r3, #29
 8001be6:	2207      	movs	r2, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	3301      	adds	r3, #1
 8001bec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	6978      	ldr	r0, [r7, #20]
 8001bf2:	f7fe fa87 	bl	8000104 <__udivsi3>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	613b      	str	r3, [r7, #16]
 8001bfa:	e015      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001bfc:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2238      	movs	r2, #56	; 0x38
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d103      	bne.n	8001c10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2238      	movs	r2, #56	; 0x38
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b18      	cmp	r3, #24
 8001c1a:	d103      	bne.n	8001c24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c1c:	23fa      	movs	r3, #250	; 0xfa
 8001c1e:	01db      	lsls	r3, r3, #7
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	e001      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c28:	693b      	ldr	r3, [r7, #16]
}
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	b006      	add	sp, #24
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	40021000 	.word	0x40021000
 8001c38:	00f42400 	.word	0x00f42400
 8001c3c:	007a1200 	.word	0x007a1200

08001c40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c44:	4b02      	ldr	r3, [pc, #8]	; (8001c50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c46:	681b      	ldr	r3, [r3, #0]
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	20000000 	.word	0x20000000

08001c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c54:	b5b0      	push	{r4, r5, r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c58:	f7ff fff2 	bl	8001c40 <HAL_RCC_GetHCLKFreq>
 8001c5c:	0004      	movs	r4, r0
 8001c5e:	f7ff fb39 	bl	80012d4 <LL_RCC_GetAPB1Prescaler>
 8001c62:	0003      	movs	r3, r0
 8001c64:	0b1a      	lsrs	r2, r3, #12
 8001c66:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c68:	0092      	lsls	r2, r2, #2
 8001c6a:	58d3      	ldr	r3, [r2, r3]
 8001c6c:	221f      	movs	r2, #31
 8001c6e:	4013      	ands	r3, r2
 8001c70:	40dc      	lsrs	r4, r3
 8001c72:	0023      	movs	r3, r4
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bdb0      	pop	{r4, r5, r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	08002c88 	.word	0x08002c88

08001c80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001c88:	2313      	movs	r3, #19
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c90:	2312      	movs	r3, #18
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	029b      	lsls	r3, r3, #10
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d100      	bne.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001ca4:	e0a3      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca6:	2011      	movs	r0, #17
 8001ca8:	183b      	adds	r3, r7, r0
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4ba5      	ldr	r3, [pc, #660]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	055b      	lsls	r3, r3, #21
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d110      	bne.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4ba2      	ldr	r3, [pc, #648]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cbe:	4ba1      	ldr	r3, [pc, #644]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	0549      	lsls	r1, r1, #21
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001cc8:	4b9e      	ldr	r3, [pc, #632]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	055b      	lsls	r3, r3, #21
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cd6:	183b      	adds	r3, r7, r0
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cdc:	4b9a      	ldr	r3, [pc, #616]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	4b99      	ldr	r3, [pc, #612]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	0049      	lsls	r1, r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cea:	f7fe ff45 	bl	8000b78 <HAL_GetTick>
 8001cee:	0003      	movs	r3, r0
 8001cf0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf4:	f7fe ff40 	bl	8000b78 <HAL_GetTick>
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d904      	bls.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d02:	2313      	movs	r3, #19
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2203      	movs	r2, #3
 8001d08:	701a      	strb	r2, [r3, #0]
        break;
 8001d0a:	e005      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d0c:	4b8e      	ldr	r3, [pc, #568]	; (8001f48 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4013      	ands	r3, r2
 8001d16:	d0ed      	beq.n	8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d18:	2313      	movs	r3, #19
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d154      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d26:	23c0      	movs	r3, #192	; 0xc0
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d019      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d014      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d3e:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	4a82      	ldr	r2, [pc, #520]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d48:	4b7e      	ldr	r3, [pc, #504]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d4c:	4b7d      	ldr	r3, [pc, #500]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d4e:	2180      	movs	r1, #128	; 0x80
 8001d50:	0249      	lsls	r1, r1, #9
 8001d52:	430a      	orrs	r2, r1
 8001d54:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d56:	4b7b      	ldr	r3, [pc, #492]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d5a:	4b7a      	ldr	r3, [pc, #488]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d5c:	497c      	ldr	r1, [pc, #496]	; (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8001d5e:	400a      	ands	r2, r1
 8001d60:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d62:	4b78      	ldr	r3, [pc, #480]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d016      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7fe ff02 	bl	8000b78 <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d78:	e00c      	b.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7a:	f7fe fefd 	bl	8000b78 <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	4a73      	ldr	r2, [pc, #460]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d904      	bls.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001d8a:	2313      	movs	r3, #19
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2203      	movs	r2, #3
 8001d90:	701a      	strb	r2, [r3, #0]
            break;
 8001d92:	e004      	b.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d94:	4b6b      	ldr	r3, [pc, #428]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d0ed      	beq.n	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001d9e:	2313      	movs	r3, #19
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10a      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001da8:	4b66      	ldr	r3, [pc, #408]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dac:	4a67      	ldr	r2, [pc, #412]	; (8001f4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001db6:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dbc:	e00c      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dbe:	2312      	movs	r3, #18
 8001dc0:	18fb      	adds	r3, r7, r3
 8001dc2:	2213      	movs	r2, #19
 8001dc4:	18ba      	adds	r2, r7, r2
 8001dc6:	7812      	ldrb	r2, [r2, #0]
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e005      	b.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dcc:	2312      	movs	r3, #18
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2213      	movs	r2, #19
 8001dd2:	18ba      	adds	r2, r7, r2
 8001dd4:	7812      	ldrb	r2, [r2, #0]
 8001dd6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dd8:	2311      	movs	r3, #17
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d105      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001de4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001de6:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001de8:	495b      	ldr	r1, [pc, #364]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2201      	movs	r2, #1
 8001df4:	4013      	ands	r3, r2
 8001df6:	d009      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001df8:	4b52      	ldr	r3, [pc, #328]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	4393      	bics	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2210      	movs	r2, #16
 8001e12:	4013      	ands	r3, r2
 8001e14:	d009      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e16:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	4a50      	ldr	r2, [pc, #320]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	0019      	movs	r1, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	4b47      	ldr	r3, [pc, #284]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e26:	430a      	orrs	r2, r1
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4013      	ands	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e36:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3a:	4a49      	ldr	r2, [pc, #292]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e46:	430a      	orrs	r2, r1
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4013      	ands	r3, r2
 8001e54:	d009      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	4a42      	ldr	r2, [pc, #264]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	4b37      	ldr	r3, [pc, #220]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e66:	430a      	orrs	r2, r1
 8001e68:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	4013      	ands	r3, r2
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e78:	4a3b      	ldr	r2, [pc, #236]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	0019      	movs	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e84:	430a      	orrs	r2, r1
 8001e86:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	01db      	lsls	r3, r3, #7
 8001e90:	4013      	ands	r3, r2
 8001e92:	d015      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	0899      	lsrs	r1, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	69da      	ldr	r2, [r3, #28]
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	05db      	lsls	r3, r3, #23
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d106      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001eb2:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eb8:	2180      	movs	r1, #128	; 0x80
 8001eba:	0249      	lsls	r1, r1, #9
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	039b      	lsls	r3, r3, #14
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d016      	beq.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed0:	4a26      	ldr	r2, [pc, #152]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1a      	ldr	r2, [r3, #32]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	03db      	lsls	r3, r3, #15
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d106      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0449      	lsls	r1, r1, #17
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	4013      	ands	r3, r2
 8001f04:	d016      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	0019      	movs	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691a      	ldr	r2, [r3, #16]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	01db      	lsls	r3, r3, #7
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d106      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	0249      	lsls	r1, r1, #9
 8001f30:	430a      	orrs	r2, r1
 8001f32:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001f34:	2312      	movs	r3, #18
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	781b      	ldrb	r3, [r3, #0]
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b006      	add	sp, #24
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	fffffcff 	.word	0xfffffcff
 8001f50:	fffeffff 	.word	0xfffeffff
 8001f54:	00001388 	.word	0x00001388
 8001f58:	efffffff 	.word	0xefffffff
 8001f5c:	fffff3ff 	.word	0xfffff3ff
 8001f60:	fff3ffff 	.word	0xfff3ffff
 8001f64:	ffcfffff 	.word	0xffcfffff
 8001f68:	ffffcfff 	.word	0xffffcfff
 8001f6c:	ffbfffff 	.word	0xffbfffff
 8001f70:	ffff3fff 	.word	0xffff3fff

08001f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e0a8      	b.n	80020d8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	2382      	movs	r3, #130	; 0x82
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d009      	beq.n	8001fae <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	61da      	str	r2, [r3, #28]
 8001fa0:	e005      	b.n	8001fae <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	225d      	movs	r2, #93	; 0x5d
 8001fb8:	5c9b      	ldrb	r3, [r3, r2]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d107      	bne.n	8001fd0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	225c      	movs	r2, #92	; 0x5c
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f7fe fc5e 	bl	800088c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	225d      	movs	r2, #93	; 0x5d
 8001fd4:	2102      	movs	r1, #2
 8001fd6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2140      	movs	r1, #64	; 0x40
 8001fe4:	438a      	bics	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	23e0      	movs	r3, #224	; 0xe0
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d902      	bls.n	8001ffa <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e002      	b.n	8002000 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	015b      	lsls	r3, r3, #5
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	23f0      	movs	r3, #240	; 0xf0
 8002006:	011b      	lsls	r3, r3, #4
 8002008:	429a      	cmp	r2, r3
 800200a:	d008      	beq.n	800201e <HAL_SPI_Init+0xaa>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68da      	ldr	r2, [r3, #12]
 8002010:	23e0      	movs	r3, #224	; 0xe0
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	429a      	cmp	r2, r3
 8002016:	d002      	beq.n	800201e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	2382      	movs	r3, #130	; 0x82
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6899      	ldr	r1, [r3, #8]
 800202c:	2384      	movs	r3, #132	; 0x84
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	400b      	ands	r3, r1
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2102      	movs	r1, #2
 800203a:	400b      	ands	r3, r1
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2101      	movs	r1, #1
 8002044:	400b      	ands	r3, r1
 8002046:	431a      	orrs	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6999      	ldr	r1, [r3, #24]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	400b      	ands	r3, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69db      	ldr	r3, [r3, #28]
 8002058:	2138      	movs	r1, #56	; 0x38
 800205a:	400b      	ands	r3, r1
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	400b      	ands	r3, r1
 8002066:	431a      	orrs	r2, r3
 8002068:	0011      	movs	r1, r2
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	019b      	lsls	r3, r3, #6
 8002072:	401a      	ands	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	2204      	movs	r2, #4
 8002084:	401a      	ands	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	2110      	movs	r1, #16
 800208c:	400b      	ands	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002094:	2108      	movs	r1, #8
 8002096:	400b      	ands	r3, r1
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68d9      	ldr	r1, [r3, #12]
 800209e:	23f0      	movs	r3, #240	; 0xf0
 80020a0:	011b      	lsls	r3, r3, #4
 80020a2:	400b      	ands	r3, r1
 80020a4:	431a      	orrs	r2, r3
 80020a6:	0011      	movs	r1, r2
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	015b      	lsls	r3, r3, #5
 80020ae:	401a      	ands	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4907      	ldr	r1, [pc, #28]	; (80020e0 <HAL_SPI_Init+0x16c>)
 80020c4:	400a      	ands	r2, r1
 80020c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	225d      	movs	r2, #93	; 0x5d
 80020d2:	2101      	movs	r1, #1
 80020d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	fffff7ff 	.word	0xfffff7ff

080020e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e04a      	b.n	800218c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	223d      	movs	r2, #61	; 0x3d
 80020fa:	5c9b      	ldrb	r3, [r3, r2]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	223c      	movs	r2, #60	; 0x3c
 8002106:	2100      	movs	r1, #0
 8002108:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f7fe fc07 	bl	8000920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	223d      	movs	r2, #61	; 0x3d
 8002116:	2102      	movs	r1, #2
 8002118:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	0019      	movs	r1, r3
 8002124:	0010      	movs	r0, r2
 8002126:	f000 f835 	bl	8002194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2248      	movs	r2, #72	; 0x48
 800212e:	2101      	movs	r1, #1
 8002130:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	223e      	movs	r2, #62	; 0x3e
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	223f      	movs	r2, #63	; 0x3f
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	2101      	movs	r1, #1
 8002148:	5499      	strb	r1, [r3, r2]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2241      	movs	r2, #65	; 0x41
 800214e:	2101      	movs	r1, #1
 8002150:	5499      	strb	r1, [r3, r2]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2242      	movs	r2, #66	; 0x42
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2243      	movs	r2, #67	; 0x43
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2244      	movs	r2, #68	; 0x44
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2245      	movs	r2, #69	; 0x45
 800216e:	2101      	movs	r1, #1
 8002170:	5499      	strb	r1, [r3, r2]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2246      	movs	r2, #70	; 0x46
 8002176:	2101      	movs	r1, #1
 8002178:	5499      	strb	r1, [r3, r2]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2247      	movs	r2, #71	; 0x47
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	223d      	movs	r2, #61	; 0x3d
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	0018      	movs	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}

08002194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a30      	ldr	r2, [pc, #192]	; (8002268 <TIM_Base_SetConfig+0xd4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d008      	beq.n	80021be <TIM_Base_SetConfig+0x2a>
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	05db      	lsls	r3, r3, #23
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0x2a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2c      	ldr	r2, [pc, #176]	; (800226c <TIM_Base_SetConfig+0xd8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2270      	movs	r2, #112	; 0x70
 80021c2:	4393      	bics	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a25      	ldr	r2, [pc, #148]	; (8002268 <TIM_Base_SetConfig+0xd4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d014      	beq.n	8002202 <TIM_Base_SetConfig+0x6e>
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	05db      	lsls	r3, r3, #23
 80021de:	429a      	cmp	r2, r3
 80021e0:	d00f      	beq.n	8002202 <TIM_Base_SetConfig+0x6e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a21      	ldr	r2, [pc, #132]	; (800226c <TIM_Base_SetConfig+0xd8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00b      	beq.n	8002202 <TIM_Base_SetConfig+0x6e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a20      	ldr	r2, [pc, #128]	; (8002270 <TIM_Base_SetConfig+0xdc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <TIM_Base_SetConfig+0x6e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1f      	ldr	r2, [pc, #124]	; (8002274 <TIM_Base_SetConfig+0xe0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d003      	beq.n	8002202 <TIM_Base_SetConfig+0x6e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a1e      	ldr	r2, [pc, #120]	; (8002278 <TIM_Base_SetConfig+0xe4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d108      	bne.n	8002214 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4a1d      	ldr	r2, [pc, #116]	; (800227c <TIM_Base_SetConfig+0xe8>)
 8002206:	4013      	ands	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4313      	orrs	r3, r2
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	4393      	bics	r3, r2
 800221a:	001a      	movs	r2, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <TIM_Base_SetConfig+0xd4>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d007      	beq.n	8002252 <TIM_Base_SetConfig+0xbe>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <TIM_Base_SetConfig+0xe0>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d003      	beq.n	8002252 <TIM_Base_SetConfig+0xbe>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <TIM_Base_SetConfig+0xe4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d103      	bne.n	800225a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	615a      	str	r2, [r3, #20]
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b004      	add	sp, #16
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40012c00 	.word	0x40012c00
 800226c:	40000400 	.word	0x40000400
 8002270:	40002000 	.word	0x40002000
 8002274:	40014400 	.word	0x40014400
 8002278:	40014800 	.word	0x40014800
 800227c:	fffffcff 	.word	0xfffffcff

08002280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e046      	b.n	8002320 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2284      	movs	r2, #132	; 0x84
 8002296:	589b      	ldr	r3, [r3, r2]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d107      	bne.n	80022ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	2100      	movs	r1, #0
 80022a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f7fe fb5a 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2284      	movs	r2, #132	; 0x84
 80022b0:	2124      	movs	r1, #36	; 0x24
 80022b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2101      	movs	r1, #1
 80022c0:	438a      	bics	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 f830 	bl	800232c <UART_SetConfig>
 80022cc:	0003      	movs	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e024      	b.n	8002320 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 fab3 	bl	800284c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	490d      	ldr	r1, [pc, #52]	; (8002328 <HAL_UART_Init+0xa8>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	212a      	movs	r1, #42	; 0x2a
 8002302:	438a      	bics	r2, r1
 8002304:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	430a      	orrs	r2, r1
 8002314:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	0018      	movs	r0, r3
 800231a:	f000 fb4b 	bl	80029b4 <UART_CheckIdleState>
 800231e:	0003      	movs	r3, r0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b002      	add	sp, #8
 8002326:	bd80      	pop	{r7, pc}
 8002328:	ffffb7ff 	.word	0xffffb7ff

0800232c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800232c:	b5b0      	push	{r4, r5, r7, lr}
 800232e:	b090      	sub	sp, #64	; 0x40
 8002330:	af00      	add	r7, sp, #0
 8002332:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002334:	231a      	movs	r3, #26
 8002336:	2220      	movs	r2, #32
 8002338:	4694      	mov	ip, r2
 800233a:	44bc      	add	ip, r7
 800233c:	4463      	add	r3, ip
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	431a      	orrs	r2, r3
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	431a      	orrs	r2, r3
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	4313      	orrs	r3, r2
 8002358:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4ac7      	ldr	r2, [pc, #796]	; (8002680 <UART_SetConfig+0x354>)
 8002362:	4013      	ands	r3, r2
 8002364:	0019      	movs	r1, r3
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236c:	430b      	orrs	r3, r1
 800236e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4ac3      	ldr	r2, [pc, #780]	; (8002684 <UART_SetConfig+0x358>)
 8002378:	4013      	ands	r3, r2
 800237a:	0018      	movs	r0, r3
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	68d9      	ldr	r1, [r3, #12]
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	0003      	movs	r3, r0
 8002386:	430b      	orrs	r3, r1
 8002388:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4abc      	ldr	r2, [pc, #752]	; (8002688 <UART_SetConfig+0x35c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d004      	beq.n	80023a4 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023a0:	4313      	orrs	r3, r2
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	4ab8      	ldr	r2, [pc, #736]	; (800268c <UART_SetConfig+0x360>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b6:	430b      	orrs	r3, r1
 80023b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	220f      	movs	r2, #15
 80023c2:	4393      	bics	r3, r2
 80023c4:	0018      	movs	r0, r3
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	0003      	movs	r3, r0
 80023d0:	430b      	orrs	r3, r1
 80023d2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4aad      	ldr	r2, [pc, #692]	; (8002690 <UART_SetConfig+0x364>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d136      	bne.n	800244c <UART_SetConfig+0x120>
 80023de:	4bad      	ldr	r3, [pc, #692]	; (8002694 <UART_SetConfig+0x368>)
 80023e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e2:	2203      	movs	r2, #3
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d020      	beq.n	800242c <UART_SetConfig+0x100>
 80023ea:	d827      	bhi.n	800243c <UART_SetConfig+0x110>
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d00d      	beq.n	800240c <UART_SetConfig+0xe0>
 80023f0:	d824      	bhi.n	800243c <UART_SetConfig+0x110>
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d002      	beq.n	80023fc <UART_SetConfig+0xd0>
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d010      	beq.n	800241c <UART_SetConfig+0xf0>
 80023fa:	e01f      	b.n	800243c <UART_SetConfig+0x110>
 80023fc:	231b      	movs	r3, #27
 80023fe:	2220      	movs	r2, #32
 8002400:	4694      	mov	ip, r2
 8002402:	44bc      	add	ip, r7
 8002404:	4463      	add	r3, ip
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
 800240a:	e07c      	b.n	8002506 <UART_SetConfig+0x1da>
 800240c:	231b      	movs	r3, #27
 800240e:	2220      	movs	r2, #32
 8002410:	4694      	mov	ip, r2
 8002412:	44bc      	add	ip, r7
 8002414:	4463      	add	r3, ip
 8002416:	2202      	movs	r2, #2
 8002418:	701a      	strb	r2, [r3, #0]
 800241a:	e074      	b.n	8002506 <UART_SetConfig+0x1da>
 800241c:	231b      	movs	r3, #27
 800241e:	2220      	movs	r2, #32
 8002420:	4694      	mov	ip, r2
 8002422:	44bc      	add	ip, r7
 8002424:	4463      	add	r3, ip
 8002426:	2204      	movs	r2, #4
 8002428:	701a      	strb	r2, [r3, #0]
 800242a:	e06c      	b.n	8002506 <UART_SetConfig+0x1da>
 800242c:	231b      	movs	r3, #27
 800242e:	2220      	movs	r2, #32
 8002430:	4694      	mov	ip, r2
 8002432:	44bc      	add	ip, r7
 8002434:	4463      	add	r3, ip
 8002436:	2208      	movs	r2, #8
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e064      	b.n	8002506 <UART_SetConfig+0x1da>
 800243c:	231b      	movs	r3, #27
 800243e:	2220      	movs	r2, #32
 8002440:	4694      	mov	ip, r2
 8002442:	44bc      	add	ip, r7
 8002444:	4463      	add	r3, ip
 8002446:	2210      	movs	r2, #16
 8002448:	701a      	strb	r2, [r3, #0]
 800244a:	e05c      	b.n	8002506 <UART_SetConfig+0x1da>
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a91      	ldr	r2, [pc, #580]	; (8002698 <UART_SetConfig+0x36c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d107      	bne.n	8002466 <UART_SetConfig+0x13a>
 8002456:	231b      	movs	r3, #27
 8002458:	2220      	movs	r2, #32
 800245a:	4694      	mov	ip, r2
 800245c:	44bc      	add	ip, r7
 800245e:	4463      	add	r3, ip
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
 8002464:	e04f      	b.n	8002506 <UART_SetConfig+0x1da>
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a87      	ldr	r2, [pc, #540]	; (8002688 <UART_SetConfig+0x35c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d143      	bne.n	80024f8 <UART_SetConfig+0x1cc>
 8002470:	4b88      	ldr	r3, [pc, #544]	; (8002694 <UART_SetConfig+0x368>)
 8002472:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002474:	23c0      	movs	r3, #192	; 0xc0
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	4013      	ands	r3, r2
 800247a:	22c0      	movs	r2, #192	; 0xc0
 800247c:	0112      	lsls	r2, r2, #4
 800247e:	4293      	cmp	r3, r2
 8002480:	d02a      	beq.n	80024d8 <UART_SetConfig+0x1ac>
 8002482:	22c0      	movs	r2, #192	; 0xc0
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	4293      	cmp	r3, r2
 8002488:	d82e      	bhi.n	80024e8 <UART_SetConfig+0x1bc>
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	4293      	cmp	r3, r2
 8002490:	d012      	beq.n	80024b8 <UART_SetConfig+0x18c>
 8002492:	2280      	movs	r2, #128	; 0x80
 8002494:	0112      	lsls	r2, r2, #4
 8002496:	4293      	cmp	r3, r2
 8002498:	d826      	bhi.n	80024e8 <UART_SetConfig+0x1bc>
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <UART_SetConfig+0x17c>
 800249e:	2280      	movs	r2, #128	; 0x80
 80024a0:	00d2      	lsls	r2, r2, #3
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d010      	beq.n	80024c8 <UART_SetConfig+0x19c>
 80024a6:	e01f      	b.n	80024e8 <UART_SetConfig+0x1bc>
 80024a8:	231b      	movs	r3, #27
 80024aa:	2220      	movs	r2, #32
 80024ac:	4694      	mov	ip, r2
 80024ae:	44bc      	add	ip, r7
 80024b0:	4463      	add	r3, ip
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
 80024b6:	e026      	b.n	8002506 <UART_SetConfig+0x1da>
 80024b8:	231b      	movs	r3, #27
 80024ba:	2220      	movs	r2, #32
 80024bc:	4694      	mov	ip, r2
 80024be:	44bc      	add	ip, r7
 80024c0:	4463      	add	r3, ip
 80024c2:	2202      	movs	r2, #2
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	e01e      	b.n	8002506 <UART_SetConfig+0x1da>
 80024c8:	231b      	movs	r3, #27
 80024ca:	2220      	movs	r2, #32
 80024cc:	4694      	mov	ip, r2
 80024ce:	44bc      	add	ip, r7
 80024d0:	4463      	add	r3, ip
 80024d2:	2204      	movs	r2, #4
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e016      	b.n	8002506 <UART_SetConfig+0x1da>
 80024d8:	231b      	movs	r3, #27
 80024da:	2220      	movs	r2, #32
 80024dc:	4694      	mov	ip, r2
 80024de:	44bc      	add	ip, r7
 80024e0:	4463      	add	r3, ip
 80024e2:	2208      	movs	r2, #8
 80024e4:	701a      	strb	r2, [r3, #0]
 80024e6:	e00e      	b.n	8002506 <UART_SetConfig+0x1da>
 80024e8:	231b      	movs	r3, #27
 80024ea:	2220      	movs	r2, #32
 80024ec:	4694      	mov	ip, r2
 80024ee:	44bc      	add	ip, r7
 80024f0:	4463      	add	r3, ip
 80024f2:	2210      	movs	r2, #16
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	e006      	b.n	8002506 <UART_SetConfig+0x1da>
 80024f8:	231b      	movs	r3, #27
 80024fa:	2220      	movs	r2, #32
 80024fc:	4694      	mov	ip, r2
 80024fe:	44bc      	add	ip, r7
 8002500:	4463      	add	r3, ip
 8002502:	2210      	movs	r2, #16
 8002504:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a5f      	ldr	r2, [pc, #380]	; (8002688 <UART_SetConfig+0x35c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d000      	beq.n	8002512 <UART_SetConfig+0x1e6>
 8002510:	e096      	b.n	8002640 <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002512:	231b      	movs	r3, #27
 8002514:	2220      	movs	r2, #32
 8002516:	4694      	mov	ip, r2
 8002518:	44bc      	add	ip, r7
 800251a:	4463      	add	r3, ip
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b08      	cmp	r3, #8
 8002520:	d015      	beq.n	800254e <UART_SetConfig+0x222>
 8002522:	dc18      	bgt.n	8002556 <UART_SetConfig+0x22a>
 8002524:	2b04      	cmp	r3, #4
 8002526:	d00d      	beq.n	8002544 <UART_SetConfig+0x218>
 8002528:	dc15      	bgt.n	8002556 <UART_SetConfig+0x22a>
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <UART_SetConfig+0x208>
 800252e:	2b02      	cmp	r3, #2
 8002530:	d005      	beq.n	800253e <UART_SetConfig+0x212>
 8002532:	e010      	b.n	8002556 <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002534:	f7ff fb8e 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002538:	0003      	movs	r3, r0
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800253c:	e015      	b.n	800256a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800253e:	4b57      	ldr	r3, [pc, #348]	; (800269c <UART_SetConfig+0x370>)
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002542:	e012      	b.n	800256a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002544:	f7ff fafa 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8002548:	0003      	movs	r3, r0
 800254a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800254c:	e00d      	b.n	800256a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002554:	e009      	b.n	800256a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800255a:	231a      	movs	r3, #26
 800255c:	2220      	movs	r2, #32
 800255e:	4694      	mov	ip, r2
 8002560:	44bc      	add	ip, r7
 8002562:	4463      	add	r3, ip
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
        break;
 8002568:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800256c:	2b00      	cmp	r3, #0
 800256e:	d100      	bne.n	8002572 <UART_SetConfig+0x246>
 8002570:	e14f      	b.n	8002812 <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002576:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <UART_SetConfig+0x374>)
 8002578:	0052      	lsls	r2, r2, #1
 800257a:	5ad3      	ldrh	r3, [r2, r3]
 800257c:	0019      	movs	r1, r3
 800257e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002580:	f7fd fdc0 	bl	8000104 <__udivsi3>
 8002584:	0003      	movs	r3, r0
 8002586:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	0013      	movs	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	189b      	adds	r3, r3, r2
 8002592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002594:	429a      	cmp	r2, r3
 8002596:	d305      	bcc.n	80025a4 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800259e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d907      	bls.n	80025b4 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 80025a4:	231a      	movs	r3, #26
 80025a6:	2220      	movs	r2, #32
 80025a8:	4694      	mov	ip, r2
 80025aa:	44bc      	add	ip, r7
 80025ac:	4463      	add	r3, ip
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e12e      	b.n	8002812 <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c0:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <UART_SetConfig+0x374>)
 80025c2:	0052      	lsls	r2, r2, #1
 80025c4:	5ad3      	ldrh	r3, [r2, r3]
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	69b8      	ldr	r0, [r7, #24]
 80025d2:	69f9      	ldr	r1, [r7, #28]
 80025d4:	f7fd fe22 	bl	800021c <__aeabi_uldivmod>
 80025d8:	0002      	movs	r2, r0
 80025da:	000b      	movs	r3, r1
 80025dc:	0e11      	lsrs	r1, r2, #24
 80025de:	021d      	lsls	r5, r3, #8
 80025e0:	430d      	orrs	r5, r1
 80025e2:	0214      	lsls	r4, r2, #8
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68b8      	ldr	r0, [r7, #8]
 80025f2:	68f9      	ldr	r1, [r7, #12]
 80025f4:	1900      	adds	r0, r0, r4
 80025f6:	4169      	adcs	r1, r5
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	603b      	str	r3, [r7, #0]
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f7fd fe09 	bl	800021c <__aeabi_uldivmod>
 800260a:	0002      	movs	r2, r0
 800260c:	000b      	movs	r3, r1
 800260e:	0013      	movs	r3, r2
 8002610:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002614:	23c0      	movs	r3, #192	; 0xc0
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	429a      	cmp	r2, r3
 800261a:	d309      	bcc.n	8002630 <UART_SetConfig+0x304>
 800261c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	035b      	lsls	r3, r3, #13
 8002622:	429a      	cmp	r2, r3
 8002624:	d204      	bcs.n	8002630 <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	e0f0      	b.n	8002812 <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 8002630:	231a      	movs	r3, #26
 8002632:	2220      	movs	r2, #32
 8002634:	4694      	mov	ip, r2
 8002636:	44bc      	add	ip, r7
 8002638:	4463      	add	r3, ip
 800263a:	2201      	movs	r2, #1
 800263c:	701a      	strb	r2, [r3, #0]
 800263e:	e0e8      	b.n	8002812 <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	69da      	ldr	r2, [r3, #28]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	429a      	cmp	r2, r3
 800264a:	d000      	beq.n	800264e <UART_SetConfig+0x322>
 800264c:	e086      	b.n	800275c <UART_SetConfig+0x430>
  {
    switch (clocksource)
 800264e:	231b      	movs	r3, #27
 8002650:	2220      	movs	r2, #32
 8002652:	4694      	mov	ip, r2
 8002654:	44bc      	add	ip, r7
 8002656:	4463      	add	r3, ip
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b08      	cmp	r3, #8
 800265c:	d027      	beq.n	80026ae <UART_SetConfig+0x382>
 800265e:	dc2a      	bgt.n	80026b6 <UART_SetConfig+0x38a>
 8002660:	2b04      	cmp	r3, #4
 8002662:	d01f      	beq.n	80026a4 <UART_SetConfig+0x378>
 8002664:	dc27      	bgt.n	80026b6 <UART_SetConfig+0x38a>
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <UART_SetConfig+0x344>
 800266a:	2b02      	cmp	r3, #2
 800266c:	d005      	beq.n	800267a <UART_SetConfig+0x34e>
 800266e:	e022      	b.n	80026b6 <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002670:	f7ff faf0 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002674:	0003      	movs	r3, r0
 8002676:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002678:	e027      	b.n	80026ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <UART_SetConfig+0x370>)
 800267c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800267e:	e024      	b.n	80026ca <UART_SetConfig+0x39e>
 8002680:	cfff69f3 	.word	0xcfff69f3
 8002684:	ffffcfff 	.word	0xffffcfff
 8002688:	40008000 	.word	0x40008000
 800268c:	11fff4ff 	.word	0x11fff4ff
 8002690:	40013800 	.word	0x40013800
 8002694:	40021000 	.word	0x40021000
 8002698:	40004400 	.word	0x40004400
 800269c:	00f42400 	.word	0x00f42400
 80026a0:	08002ca8 	.word	0x08002ca8
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026a4:	f7ff fa4a 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 80026a8:	0003      	movs	r3, r0
 80026aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026ac:	e00d      	b.n	80026ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80026b4:	e009      	b.n	80026ca <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80026ba:	231a      	movs	r3, #26
 80026bc:	2220      	movs	r2, #32
 80026be:	4694      	mov	ip, r2
 80026c0:	44bc      	add	ip, r7
 80026c2:	4463      	add	r3, ip
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
        break;
 80026c8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d100      	bne.n	80026d2 <UART_SetConfig+0x3a6>
 80026d0:	e09f      	b.n	8002812 <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026d6:	4b5b      	ldr	r3, [pc, #364]	; (8002844 <UART_SetConfig+0x518>)
 80026d8:	0052      	lsls	r2, r2, #1
 80026da:	5ad3      	ldrh	r3, [r2, r3]
 80026dc:	0019      	movs	r1, r3
 80026de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026e0:	f7fd fd10 	bl	8000104 <__udivsi3>
 80026e4:	0003      	movs	r3, r0
 80026e6:	005a      	lsls	r2, r3, #1
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	085b      	lsrs	r3, r3, #1
 80026ee:	18d2      	adds	r2, r2, r3
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	0019      	movs	r1, r3
 80026f6:	0010      	movs	r0, r2
 80026f8:	f7fd fd04 	bl	8000104 <__udivsi3>
 80026fc:	0003      	movs	r3, r0
 80026fe:	b29b      	uxth	r3, r3
 8002700:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002704:	2b0f      	cmp	r3, #15
 8002706:	d921      	bls.n	800274c <UART_SetConfig+0x420>
 8002708:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800270a:	2380      	movs	r3, #128	; 0x80
 800270c:	025b      	lsls	r3, r3, #9
 800270e:	429a      	cmp	r2, r3
 8002710:	d21c      	bcs.n	800274c <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002714:	b29a      	uxth	r2, r3
 8002716:	200e      	movs	r0, #14
 8002718:	2420      	movs	r4, #32
 800271a:	193b      	adds	r3, r7, r4
 800271c:	181b      	adds	r3, r3, r0
 800271e:	210f      	movs	r1, #15
 8002720:	438a      	bics	r2, r1
 8002722:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	b29b      	uxth	r3, r3
 800272a:	2207      	movs	r2, #7
 800272c:	4013      	ands	r3, r2
 800272e:	b299      	uxth	r1, r3
 8002730:	193b      	adds	r3, r7, r4
 8002732:	181b      	adds	r3, r3, r0
 8002734:	193a      	adds	r2, r7, r4
 8002736:	1812      	adds	r2, r2, r0
 8002738:	8812      	ldrh	r2, [r2, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	193a      	adds	r2, r7, r4
 8002744:	1812      	adds	r2, r2, r0
 8002746:	8812      	ldrh	r2, [r2, #0]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	e062      	b.n	8002812 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 800274c:	231a      	movs	r3, #26
 800274e:	2220      	movs	r2, #32
 8002750:	4694      	mov	ip, r2
 8002752:	44bc      	add	ip, r7
 8002754:	4463      	add	r3, ip
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e05a      	b.n	8002812 <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800275c:	231b      	movs	r3, #27
 800275e:	2220      	movs	r2, #32
 8002760:	4694      	mov	ip, r2
 8002762:	44bc      	add	ip, r7
 8002764:	4463      	add	r3, ip
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d015      	beq.n	8002798 <UART_SetConfig+0x46c>
 800276c:	dc18      	bgt.n	80027a0 <UART_SetConfig+0x474>
 800276e:	2b04      	cmp	r3, #4
 8002770:	d00d      	beq.n	800278e <UART_SetConfig+0x462>
 8002772:	dc15      	bgt.n	80027a0 <UART_SetConfig+0x474>
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <UART_SetConfig+0x452>
 8002778:	2b02      	cmp	r3, #2
 800277a:	d005      	beq.n	8002788 <UART_SetConfig+0x45c>
 800277c:	e010      	b.n	80027a0 <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800277e:	f7ff fa69 	bl	8001c54 <HAL_RCC_GetPCLK1Freq>
 8002782:	0003      	movs	r3, r0
 8002784:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002786:	e015      	b.n	80027b4 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002788:	4b2f      	ldr	r3, [pc, #188]	; (8002848 <UART_SetConfig+0x51c>)
 800278a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800278c:	e012      	b.n	80027b4 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800278e:	f7ff f9d5 	bl	8001b3c <HAL_RCC_GetSysClockFreq>
 8002792:	0003      	movs	r3, r0
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002796:	e00d      	b.n	80027b4 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800279e:	e009      	b.n	80027b4 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80027a4:	231a      	movs	r3, #26
 80027a6:	2220      	movs	r2, #32
 80027a8:	4694      	mov	ip, r2
 80027aa:	44bc      	add	ip, r7
 80027ac:	4463      	add	r3, ip
 80027ae:	2201      	movs	r2, #1
 80027b0:	701a      	strb	r2, [r3, #0]
        break;
 80027b2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d02b      	beq.n	8002812 <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027be:	4b21      	ldr	r3, [pc, #132]	; (8002844 <UART_SetConfig+0x518>)
 80027c0:	0052      	lsls	r2, r2, #1
 80027c2:	5ad3      	ldrh	r3, [r2, r3]
 80027c4:	0019      	movs	r1, r3
 80027c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80027c8:	f7fd fc9c 	bl	8000104 <__udivsi3>
 80027cc:	0003      	movs	r3, r0
 80027ce:	001a      	movs	r2, r3
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	18d2      	adds	r2, r2, r3
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0019      	movs	r1, r3
 80027de:	0010      	movs	r0, r2
 80027e0:	f7fd fc90 	bl	8000104 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ec:	2b0f      	cmp	r3, #15
 80027ee:	d909      	bls.n	8002804 <UART_SetConfig+0x4d8>
 80027f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	025b      	lsls	r3, r3, #9
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d204      	bcs.n	8002804 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	e006      	b.n	8002812 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8002804:	231a      	movs	r3, #26
 8002806:	2220      	movs	r2, #32
 8002808:	4694      	mov	ip, r2
 800280a:	44bc      	add	ip, r7
 800280c:	4463      	add	r3, ip
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	226a      	movs	r2, #106	; 0x6a
 8002816:	2101      	movs	r1, #1
 8002818:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	2268      	movs	r2, #104	; 0x68
 800281e:	2101      	movs	r1, #1
 8002820:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	2200      	movs	r2, #0
 8002826:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	2200      	movs	r2, #0
 800282c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800282e:	231a      	movs	r3, #26
 8002830:	2220      	movs	r2, #32
 8002832:	4694      	mov	ip, r2
 8002834:	44bc      	add	ip, r7
 8002836:	4463      	add	r3, ip
 8002838:	781b      	ldrb	r3, [r3, #0]
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b010      	add	sp, #64	; 0x40
 8002840:	bdb0      	pop	{r4, r5, r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	08002ca8 	.word	0x08002ca8
 8002848:	00f42400 	.word	0x00f42400

0800284c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	2201      	movs	r2, #1
 800285a:	4013      	ands	r3, r2
 800285c:	d00b      	beq.n	8002876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a4a      	ldr	r2, [pc, #296]	; (8002990 <UART_AdvFeatureConfig+0x144>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	d00b      	beq.n	8002898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4a43      	ldr	r2, [pc, #268]	; (8002994 <UART_AdvFeatureConfig+0x148>)
 8002888:	4013      	ands	r3, r2
 800288a:	0019      	movs	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	2204      	movs	r2, #4
 800289e:	4013      	ands	r3, r2
 80028a0:	d00b      	beq.n	80028ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <UART_AdvFeatureConfig+0x14c>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	2208      	movs	r2, #8
 80028c0:	4013      	ands	r3, r2
 80028c2:	d00b      	beq.n	80028dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a34      	ldr	r2, [pc, #208]	; (800299c <UART_AdvFeatureConfig+0x150>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	0019      	movs	r1, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	2210      	movs	r2, #16
 80028e2:	4013      	ands	r3, r2
 80028e4:	d00b      	beq.n	80028fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a2c      	ldr	r2, [pc, #176]	; (80029a0 <UART_AdvFeatureConfig+0x154>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	0019      	movs	r1, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002902:	2220      	movs	r2, #32
 8002904:	4013      	ands	r3, r2
 8002906:	d00b      	beq.n	8002920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	4a25      	ldr	r2, [pc, #148]	; (80029a4 <UART_AdvFeatureConfig+0x158>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	2240      	movs	r2, #64	; 0x40
 8002926:	4013      	ands	r3, r2
 8002928:	d01d      	beq.n	8002966 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <UART_AdvFeatureConfig+0x15c>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002946:	2380      	movs	r3, #128	; 0x80
 8002948:	035b      	lsls	r3, r3, #13
 800294a:	429a      	cmp	r2, r3
 800294c:	d10b      	bne.n	8002966 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <UART_AdvFeatureConfig+0x160>)
 8002956:	4013      	ands	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	4013      	ands	r3, r2
 800296e:	d00b      	beq.n	8002988 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <UART_AdvFeatureConfig+0x164>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
  }
}
 8002988:	46c0      	nop			; (mov r8, r8)
 800298a:	46bd      	mov	sp, r7
 800298c:	b002      	add	sp, #8
 800298e:	bd80      	pop	{r7, pc}
 8002990:	fffdffff 	.word	0xfffdffff
 8002994:	fffeffff 	.word	0xfffeffff
 8002998:	fffbffff 	.word	0xfffbffff
 800299c:	ffff7fff 	.word	0xffff7fff
 80029a0:	ffffefff 	.word	0xffffefff
 80029a4:	ffffdfff 	.word	0xffffdfff
 80029a8:	ffefffff 	.word	0xffefffff
 80029ac:	ff9fffff 	.word	0xff9fffff
 80029b0:	fff7ffff 	.word	0xfff7ffff

080029b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	228c      	movs	r2, #140	; 0x8c
 80029c0:	2100      	movs	r1, #0
 80029c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029c4:	f7fe f8d8 	bl	8000b78 <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2208      	movs	r2, #8
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d10c      	bne.n	80029f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2280      	movs	r2, #128	; 0x80
 80029de:	0391      	lsls	r1, r2, #14
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <UART_CheckIdleState+0x90>)
 80029e4:	9200      	str	r2, [sp, #0]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f000 f82e 	bl	8002a48 <UART_WaitOnFlagUntilTimeout>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d001      	beq.n	80029f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e023      	b.n	8002a3c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2204      	movs	r2, #4
 80029fc:	4013      	ands	r3, r2
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d10c      	bne.n	8002a1c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2280      	movs	r2, #128	; 0x80
 8002a06:	03d1      	lsls	r1, r2, #15
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <UART_CheckIdleState+0x90>)
 8002a0c:	9200      	str	r2, [sp, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f000 f81a 	bl	8002a48 <UART_WaitOnFlagUntilTimeout>
 8002a14:	1e03      	subs	r3, r0, #0
 8002a16:	d001      	beq.n	8002a1c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e00f      	b.n	8002a3c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2284      	movs	r2, #132	; 0x84
 8002a20:	2120      	movs	r1, #32
 8002a22:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2288      	movs	r2, #136	; 0x88
 8002a28:	2120      	movs	r1, #32
 8002a2a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2280      	movs	r2, #128	; 0x80
 8002a36:	2100      	movs	r1, #0
 8002a38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b004      	add	sp, #16
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	01ffffff 	.word	0x01ffffff

08002a48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b094      	sub	sp, #80	; 0x50
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	603b      	str	r3, [r7, #0]
 8002a54:	1dfb      	adds	r3, r7, #7
 8002a56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a58:	e0a7      	b.n	8002baa <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	d100      	bne.n	8002a62 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002a60:	e0a3      	b.n	8002baa <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7fe f889 	bl	8000b78 <HAL_GetTick>
 8002a66:	0002      	movs	r2, r0
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d302      	bcc.n	8002a78 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d13f      	bne.n	8002af8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a78:	f3ef 8310 	mrs	r3, PRIMASK
 8002a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
 8002a82:	2301      	movs	r3, #1
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	f383 8810 	msr	PRIMASK, r3
}
 8002a8c:	46c0      	nop			; (mov r8, r8)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	494e      	ldr	r1, [pc, #312]	; (8002bd4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002a9a:	400a      	ands	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa4:	f383 8810 	msr	PRIMASK, r3
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	f383 8810 	msr	PRIMASK, r3
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2101      	movs	r1, #1
 8002acc:	438a      	bics	r2, r1
 8002ace:	609a      	str	r2, [r3, #8]
 8002ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad6:	f383 8810 	msr	PRIMASK, r3
}
 8002ada:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2284      	movs	r2, #132	; 0x84
 8002ae0:	2120      	movs	r1, #32
 8002ae2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2288      	movs	r2, #136	; 0x88
 8002ae8:	2120      	movs	r1, #32
 8002aea:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e069      	b.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2204      	movs	r2, #4
 8002b00:	4013      	ands	r3, r2
 8002b02:	d052      	beq.n	8002baa <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	401a      	ands	r2, r3
 8002b10:	2380      	movs	r3, #128	; 0x80
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d148      	bne.n	8002baa <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	0112      	lsls	r2, r2, #4
 8002b20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b22:	f3ef 8310 	mrs	r3, PRIMASK
 8002b26:	613b      	str	r3, [r7, #16]
  return(result);
 8002b28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f383 8810 	msr	PRIMASK, r3
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4924      	ldr	r1, [pc, #144]	; (8002bd4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f383 8810 	msr	PRIMASK, r3
}
 8002b52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b54:	f3ef 8310 	mrs	r3, PRIMASK
 8002b58:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b5a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b5e:	2301      	movs	r3, #1
 8002b60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	f383 8810 	msr	PRIMASK, r3
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2101      	movs	r1, #1
 8002b76:	438a      	bics	r2, r1
 8002b78:	609a      	str	r2, [r3, #8]
 8002b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	f383 8810 	msr	PRIMASK, r3
}
 8002b84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2284      	movs	r2, #132	; 0x84
 8002b8a:	2120      	movs	r1, #32
 8002b8c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2288      	movs	r2, #136	; 0x88
 8002b92:	2120      	movs	r1, #32
 8002b94:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	228c      	movs	r2, #140	; 0x8c
 8002b9a:	2120      	movs	r1, #32
 8002b9c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2280      	movs	r2, #128	; 0x80
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e010      	b.n	8002bcc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	1ad3      	subs	r3, r2, r3
 8002bb8:	425a      	negs	r2, r3
 8002bba:	4153      	adcs	r3, r2
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	001a      	movs	r2, r3
 8002bc0:	1dfb      	adds	r3, r7, #7
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d100      	bne.n	8002bca <UART_WaitOnFlagUntilTimeout+0x182>
 8002bc8:	e747      	b.n	8002a5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b014      	add	sp, #80	; 0x50
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	fffffe5f 	.word	0xfffffe5f

08002bd8 <__libc_init_array>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	2600      	movs	r6, #0
 8002bdc:	4d0c      	ldr	r5, [pc, #48]	; (8002c10 <__libc_init_array+0x38>)
 8002bde:	4c0d      	ldr	r4, [pc, #52]	; (8002c14 <__libc_init_array+0x3c>)
 8002be0:	1b64      	subs	r4, r4, r5
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	42a6      	cmp	r6, r4
 8002be6:	d109      	bne.n	8002bfc <__libc_init_array+0x24>
 8002be8:	2600      	movs	r6, #0
 8002bea:	f000 f821 	bl	8002c30 <_init>
 8002bee:	4d0a      	ldr	r5, [pc, #40]	; (8002c18 <__libc_init_array+0x40>)
 8002bf0:	4c0a      	ldr	r4, [pc, #40]	; (8002c1c <__libc_init_array+0x44>)
 8002bf2:	1b64      	subs	r4, r4, r5
 8002bf4:	10a4      	asrs	r4, r4, #2
 8002bf6:	42a6      	cmp	r6, r4
 8002bf8:	d105      	bne.n	8002c06 <__libc_init_array+0x2e>
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	00b3      	lsls	r3, r6, #2
 8002bfe:	58eb      	ldr	r3, [r5, r3]
 8002c00:	4798      	blx	r3
 8002c02:	3601      	adds	r6, #1
 8002c04:	e7ee      	b.n	8002be4 <__libc_init_array+0xc>
 8002c06:	00b3      	lsls	r3, r6, #2
 8002c08:	58eb      	ldr	r3, [r5, r3]
 8002c0a:	4798      	blx	r3
 8002c0c:	3601      	adds	r6, #1
 8002c0e:	e7f2      	b.n	8002bf6 <__libc_init_array+0x1e>
 8002c10:	08002cc8 	.word	0x08002cc8
 8002c14:	08002cc8 	.word	0x08002cc8
 8002c18:	08002cc8 	.word	0x08002cc8
 8002c1c:	08002ccc 	.word	0x08002ccc

08002c20 <memset>:
 8002c20:	0003      	movs	r3, r0
 8002c22:	1882      	adds	r2, r0, r2
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d100      	bne.n	8002c2a <memset+0xa>
 8002c28:	4770      	bx	lr
 8002c2a:	7019      	strb	r1, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	e7f9      	b.n	8002c24 <memset+0x4>

08002c30 <_init>:
 8002c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c36:	bc08      	pop	{r3}
 8002c38:	469e      	mov	lr, r3
 8002c3a:	4770      	bx	lr

08002c3c <_fini>:
 8002c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c42:	bc08      	pop	{r3}
 8002c44:	469e      	mov	lr, r3
 8002c46:	4770      	bx	lr
