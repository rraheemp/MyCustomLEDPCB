
LMP-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d00  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f04  08003f04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f0c  08003f0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  2000000c  08003f20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08003f20  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bbc  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000237e  00000000  00000000  00034bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00036f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00037dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d2f8  00000000  00000000  00038b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000046a3  00000000  00000000  00045e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0004a4e3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000033d4  00000000  00000000  0004a538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003da4 	.word	0x08003da4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08003da4 	.word	0x08003da4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	1c08      	adds	r0, r1, #0
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	469b      	mov	fp, r3
 8000466:	d433      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000468:	465a      	mov	r2, fp
 800046a:	4653      	mov	r3, sl
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83a      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e078      	b.n	8000574 <__udivmoddi4+0x144>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e075      	b.n	800057a <__udivmoddi4+0x14a>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e028      	b.n	80004fa <__udivmoddi4+0xca>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	2320      	movs	r3, #32
 80004d4:	1a9b      	subs	r3, r3, r2
 80004d6:	4652      	mov	r2, sl
 80004d8:	40da      	lsrs	r2, r3
 80004da:	4641      	mov	r1, r8
 80004dc:	0013      	movs	r3, r2
 80004de:	464a      	mov	r2, r9
 80004e0:	408a      	lsls	r2, r1
 80004e2:	0017      	movs	r7, r2
 80004e4:	4642      	mov	r2, r8
 80004e6:	431f      	orrs	r7, r3
 80004e8:	4653      	mov	r3, sl
 80004ea:	4093      	lsls	r3, r2
 80004ec:	001e      	movs	r6, r3
 80004ee:	42af      	cmp	r7, r5
 80004f0:	d9c4      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f2:	2200      	movs	r2, #0
 80004f4:	2300      	movs	r3, #0
 80004f6:	9200      	str	r2, [sp, #0]
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	4643      	mov	r3, r8
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0d9      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000500:	07fb      	lsls	r3, r7, #31
 8000502:	0872      	lsrs	r2, r6, #1
 8000504:	431a      	orrs	r2, r3
 8000506:	4646      	mov	r6, r8
 8000508:	087b      	lsrs	r3, r7, #1
 800050a:	e00e      	b.n	800052a <__udivmoddi4+0xfa>
 800050c:	42ab      	cmp	r3, r5
 800050e:	d101      	bne.n	8000514 <__udivmoddi4+0xe4>
 8000510:	42a2      	cmp	r2, r4
 8000512:	d80c      	bhi.n	800052e <__udivmoddi4+0xfe>
 8000514:	1aa4      	subs	r4, r4, r2
 8000516:	419d      	sbcs	r5, r3
 8000518:	2001      	movs	r0, #1
 800051a:	1924      	adds	r4, r4, r4
 800051c:	416d      	adcs	r5, r5
 800051e:	2100      	movs	r1, #0
 8000520:	3e01      	subs	r6, #1
 8000522:	1824      	adds	r4, r4, r0
 8000524:	414d      	adcs	r5, r1
 8000526:	2e00      	cmp	r6, #0
 8000528:	d006      	beq.n	8000538 <__udivmoddi4+0x108>
 800052a:	42ab      	cmp	r3, r5
 800052c:	d9ee      	bls.n	800050c <__udivmoddi4+0xdc>
 800052e:	3e01      	subs	r6, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2e00      	cmp	r6, #0
 8000536:	d1f8      	bne.n	800052a <__udivmoddi4+0xfa>
 8000538:	9800      	ldr	r0, [sp, #0]
 800053a:	9901      	ldr	r1, [sp, #4]
 800053c:	465b      	mov	r3, fp
 800053e:	1900      	adds	r0, r0, r4
 8000540:	4169      	adcs	r1, r5
 8000542:	2b00      	cmp	r3, #0
 8000544:	db24      	blt.n	8000590 <__udivmoddi4+0x160>
 8000546:	002b      	movs	r3, r5
 8000548:	465a      	mov	r2, fp
 800054a:	4644      	mov	r4, r8
 800054c:	40d3      	lsrs	r3, r2
 800054e:	002a      	movs	r2, r5
 8000550:	40e2      	lsrs	r2, r4
 8000552:	001c      	movs	r4, r3
 8000554:	465b      	mov	r3, fp
 8000556:	0015      	movs	r5, r2
 8000558:	2b00      	cmp	r3, #0
 800055a:	db2a      	blt.n	80005b2 <__udivmoddi4+0x182>
 800055c:	0026      	movs	r6, r4
 800055e:	409e      	lsls	r6, r3
 8000560:	0033      	movs	r3, r6
 8000562:	0026      	movs	r6, r4
 8000564:	4647      	mov	r7, r8
 8000566:	40be      	lsls	r6, r7
 8000568:	0032      	movs	r2, r6
 800056a:	1a80      	subs	r0, r0, r2
 800056c:	4199      	sbcs	r1, r3
 800056e:	9000      	str	r0, [sp, #0]
 8000570:	9101      	str	r1, [sp, #4]
 8000572:	e79f      	b.n	80004b4 <__udivmoddi4+0x84>
 8000574:	42a3      	cmp	r3, r4
 8000576:	d8bc      	bhi.n	80004f2 <__udivmoddi4+0xc2>
 8000578:	e783      	b.n	8000482 <__udivmoddi4+0x52>
 800057a:	4642      	mov	r2, r8
 800057c:	2320      	movs	r3, #32
 800057e:	2100      	movs	r1, #0
 8000580:	1a9b      	subs	r3, r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	9100      	str	r1, [sp, #0]
 8000586:	9201      	str	r2, [sp, #4]
 8000588:	2201      	movs	r2, #1
 800058a:	40da      	lsrs	r2, r3
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	e786      	b.n	800049e <__udivmoddi4+0x6e>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	1a9b      	subs	r3, r3, r2
 8000596:	002a      	movs	r2, r5
 8000598:	4646      	mov	r6, r8
 800059a:	409a      	lsls	r2, r3
 800059c:	0023      	movs	r3, r4
 800059e:	40f3      	lsrs	r3, r6
 80005a0:	4644      	mov	r4, r8
 80005a2:	4313      	orrs	r3, r2
 80005a4:	002a      	movs	r2, r5
 80005a6:	40e2      	lsrs	r2, r4
 80005a8:	001c      	movs	r4, r3
 80005aa:	465b      	mov	r3, fp
 80005ac:	0015      	movs	r5, r2
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dad4      	bge.n	800055c <__udivmoddi4+0x12c>
 80005b2:	4642      	mov	r2, r8
 80005b4:	002f      	movs	r7, r5
 80005b6:	2320      	movs	r3, #32
 80005b8:	0026      	movs	r6, r4
 80005ba:	4097      	lsls	r7, r2
 80005bc:	1a9b      	subs	r3, r3, r2
 80005be:	40de      	lsrs	r6, r3
 80005c0:	003b      	movs	r3, r7
 80005c2:	4333      	orrs	r3, r6
 80005c4:	e7cd      	b.n	8000562 <__udivmoddi4+0x132>
 80005c6:	46c0      	nop			; (mov r8, r8)

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	1c08      	adds	r0, r1, #0
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000622:	f000 fd11 	bl	8001048 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000626:	f000 f99d 	bl	8000964 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800062a:	f000 fadb 	bl	8000be4 <MX_GPIO_Init>
	MX_SPI1_Init();
 800062e:	f000 f9f7 	bl	8000a20 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000632:	f000 faa3 	bl	8000b7c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8000636:	f000 fa73 	bl	8000b20 <MX_TIM16_Init>
	MX_SPI2_Init();
 800063a:	f000 fa37 	bl	8000aac <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	extern void LedBlink(uint8_t count);
	uint8_t x = 0;
 800063e:	230f      	movs	r3, #15
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	IS31FL3743B_init();
 8000646:	f002 ff99 	bl	800357c <IS31FL3743B_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (x) {
 800064a:	230f      	movs	r3, #15
 800064c:	18fb      	adds	r3, r7, r3
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b09      	cmp	r3, #9
 8000652:	d8fa      	bhi.n	800064a <main+0x2e>
 8000654:	009a      	lsls	r2, r3, #2
 8000656:	4bb8      	ldr	r3, [pc, #736]	; (8000938 <main+0x31c>)
 8000658:	18d3      	adds	r3, r2, r3
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	469f      	mov	pc, r3
		case 0:
			for (uint8_t dot = 0; dot <= sizeof(zeroR); dot++) {
 800065e:	230e      	movs	r3, #14
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	e00e      	b.n	8000686 <main+0x6a>
				IS31FL3743B_SetDotColor(zeroR[dot], Green, full);
 8000668:	240e      	movs	r4, #14
 800066a:	193b      	adds	r3, r7, r4
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	4ab3      	ldr	r2, [pc, #716]	; (800093c <main+0x320>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	22fe      	movs	r2, #254	; 0xfe
 8000674:	2101      	movs	r1, #1
 8000676:	0018      	movs	r0, r3
 8000678:	f003 f810 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(zeroR); dot++) {
 800067c:	193b      	adds	r3, r7, r4
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	193b      	adds	r3, r7, r4
 8000682:	3201      	adds	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
 8000686:	230e      	movs	r3, #14
 8000688:	18fb      	adds	r3, r7, r3
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b0c      	cmp	r3, #12
 800068e:	d9eb      	bls.n	8000668 <main+0x4c>
			}
			MyDelay_ms(TIME);
 8000690:	20c8      	movs	r0, #200	; 0xc8
 8000692:	f003 fb33 	bl	8003cfc <MyDelay_ms>
			x++;
 8000696:	210f      	movs	r1, #15
 8000698:	187b      	adds	r3, r7, r1
 800069a:	781a      	ldrb	r2, [r3, #0]
 800069c:	187b      	adds	r3, r7, r1
 800069e:	3201      	adds	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 80006a2:	f003 faa1 	bl	8003be8 <IS31FL3743B_ClearAll>

			break;
 80006a6:	e145      	b.n	8000934 <main+0x318>

		case 1:
			for (uint8_t dot = 0; dot <= sizeof(oneR); dot++) {
 80006a8:	230d      	movs	r3, #13
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
 80006b0:	e00e      	b.n	80006d0 <main+0xb4>
				IS31FL3743B_SetDotColor(oneR[dot], Green, full);
 80006b2:	240d      	movs	r4, #13
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4aa1      	ldr	r2, [pc, #644]	; (8000940 <main+0x324>)
 80006ba:	5cd3      	ldrb	r3, [r2, r3]
 80006bc:	22fe      	movs	r2, #254	; 0xfe
 80006be:	2101      	movs	r1, #1
 80006c0:	0018      	movs	r0, r3
 80006c2:	f002 ffeb 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(oneR); dot++) {
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	3201      	adds	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	230d      	movs	r3, #13
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b05      	cmp	r3, #5
 80006d8:	d9eb      	bls.n	80006b2 <main+0x96>
			}
			MyDelay_ms(TIME);
 80006da:	20c8      	movs	r0, #200	; 0xc8
 80006dc:	f003 fb0e 	bl	8003cfc <MyDelay_ms>
			x++;
 80006e0:	210f      	movs	r1, #15
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	781a      	ldrb	r2, [r3, #0]
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	3201      	adds	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 80006ec:	f003 fa7c 	bl	8003be8 <IS31FL3743B_ClearAll>

			break;
 80006f0:	e120      	b.n	8000934 <main+0x318>

		case 2:
			for (uint8_t dot = 0; dot <= sizeof(twoR); dot++) {
 80006f2:	230c      	movs	r3, #12
 80006f4:	18fb      	adds	r3, r7, r3
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e00e      	b.n	800071a <main+0xfe>
				IS31FL3743B_SetDotColor(twoR[dot], Green, full);
 80006fc:	240c      	movs	r4, #12
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4a90      	ldr	r2, [pc, #576]	; (8000944 <main+0x328>)
 8000704:	5cd3      	ldrb	r3, [r2, r3]
 8000706:	22fe      	movs	r2, #254	; 0xfe
 8000708:	2101      	movs	r1, #1
 800070a:	0018      	movs	r0, r3
 800070c:	f002 ffc6 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(twoR); dot++) {
 8000710:	193b      	adds	r3, r7, r4
 8000712:	781a      	ldrb	r2, [r3, #0]
 8000714:	193b      	adds	r3, r7, r4
 8000716:	3201      	adds	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	230c      	movs	r3, #12
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b0b      	cmp	r3, #11
 8000722:	d9eb      	bls.n	80006fc <main+0xe0>
			}
			MyDelay_ms(TIME);
 8000724:	20c8      	movs	r0, #200	; 0xc8
 8000726:	f003 fae9 	bl	8003cfc <MyDelay_ms>
			x++;
 800072a:	210f      	movs	r1, #15
 800072c:	187b      	adds	r3, r7, r1
 800072e:	781a      	ldrb	r2, [r3, #0]
 8000730:	187b      	adds	r3, r7, r1
 8000732:	3201      	adds	r2, #1
 8000734:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 8000736:	f003 fa57 	bl	8003be8 <IS31FL3743B_ClearAll>
			break;
 800073a:	e0fb      	b.n	8000934 <main+0x318>

		case 3:
			for (uint8_t dot = 0; dot <= sizeof(threeR); dot++) {
 800073c:	230b      	movs	r3, #11
 800073e:	18fb      	adds	r3, r7, r3
 8000740:	2200      	movs	r2, #0
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	e00e      	b.n	8000764 <main+0x148>
				IS31FL3743B_SetDotColor(threeR[dot], Green, full);
 8000746:	240b      	movs	r4, #11
 8000748:	193b      	adds	r3, r7, r4
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4a7e      	ldr	r2, [pc, #504]	; (8000948 <main+0x32c>)
 800074e:	5cd3      	ldrb	r3, [r2, r3]
 8000750:	22fe      	movs	r2, #254	; 0xfe
 8000752:	2101      	movs	r1, #1
 8000754:	0018      	movs	r0, r3
 8000756:	f002 ffa1 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(threeR); dot++) {
 800075a:	193b      	adds	r3, r7, r4
 800075c:	781a      	ldrb	r2, [r3, #0]
 800075e:	193b      	adds	r3, r7, r4
 8000760:	3201      	adds	r2, #1
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	230b      	movs	r3, #11
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b0b      	cmp	r3, #11
 800076c:	d9eb      	bls.n	8000746 <main+0x12a>
			}
			MyDelay_ms(TIME);
 800076e:	20c8      	movs	r0, #200	; 0xc8
 8000770:	f003 fac4 	bl	8003cfc <MyDelay_ms>
			x++;
 8000774:	210f      	movs	r1, #15
 8000776:	187b      	adds	r3, r7, r1
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	187b      	adds	r3, r7, r1
 800077c:	3201      	adds	r2, #1
 800077e:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 8000780:	f003 fa32 	bl	8003be8 <IS31FL3743B_ClearAll>
			break;
 8000784:	e0d6      	b.n	8000934 <main+0x318>

		case 4:
			for (uint8_t dot = 0; dot <= sizeof(fourR); dot++) {
 8000786:	230a      	movs	r3, #10
 8000788:	18fb      	adds	r3, r7, r3
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e00e      	b.n	80007ae <main+0x192>
				IS31FL3743B_SetDotColor(fourR[dot], Green, full);
 8000790:	240a      	movs	r4, #10
 8000792:	193b      	adds	r3, r7, r4
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	4a6d      	ldr	r2, [pc, #436]	; (800094c <main+0x330>)
 8000798:	5cd3      	ldrb	r3, [r2, r3]
 800079a:	22fe      	movs	r2, #254	; 0xfe
 800079c:	2101      	movs	r1, #1
 800079e:	0018      	movs	r0, r3
 80007a0:	f002 ff7c 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(fourR); dot++) {
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	781a      	ldrb	r2, [r3, #0]
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	3201      	adds	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	230a      	movs	r3, #10
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b09      	cmp	r3, #9
 80007b6:	d9eb      	bls.n	8000790 <main+0x174>
			}
			MyDelay_ms(TIME);
 80007b8:	20c8      	movs	r0, #200	; 0xc8
 80007ba:	f003 fa9f 	bl	8003cfc <MyDelay_ms>
			x++;
 80007be:	210f      	movs	r1, #15
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	3201      	adds	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 80007ca:	f003 fa0d 	bl	8003be8 <IS31FL3743B_ClearAll>
			break;
 80007ce:	e0b1      	b.n	8000934 <main+0x318>

		case 5:
			for (uint8_t dot = 0; dot <= sizeof(fiveR); dot++) {
 80007d0:	2309      	movs	r3, #9
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	e00e      	b.n	80007f8 <main+0x1dc>
				IS31FL3743B_SetDotColor(fiveR[dot], Green, full);
 80007da:	2409      	movs	r4, #9
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4a5b      	ldr	r2, [pc, #364]	; (8000950 <main+0x334>)
 80007e2:	5cd3      	ldrb	r3, [r2, r3]
 80007e4:	22fe      	movs	r2, #254	; 0xfe
 80007e6:	2101      	movs	r1, #1
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 ff57 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(fiveR); dot++) {
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	781a      	ldrb	r2, [r3, #0]
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	3201      	adds	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
 80007f8:	2309      	movs	r3, #9
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b0b      	cmp	r3, #11
 8000800:	d9eb      	bls.n	80007da <main+0x1be>
			}
			MyDelay_ms(TIME);
 8000802:	20c8      	movs	r0, #200	; 0xc8
 8000804:	f003 fa7a 	bl	8003cfc <MyDelay_ms>
			x++;
 8000808:	210f      	movs	r1, #15
 800080a:	187b      	adds	r3, r7, r1
 800080c:	781a      	ldrb	r2, [r3, #0]
 800080e:	187b      	adds	r3, r7, r1
 8000810:	3201      	adds	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 8000814:	f003 f9e8 	bl	8003be8 <IS31FL3743B_ClearAll>
			break;
 8000818:	e08c      	b.n	8000934 <main+0x318>

		case 6:
			for (uint8_t dot = 0; dot <= sizeof(sixR); dot++) {
 800081a:	2308      	movs	r3, #8
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	e00e      	b.n	8000842 <main+0x226>
				IS31FL3743B_SetDotColor(sixR[dot], Green, full);
 8000824:	2408      	movs	r4, #8
 8000826:	193b      	adds	r3, r7, r4
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4a4a      	ldr	r2, [pc, #296]	; (8000954 <main+0x338>)
 800082c:	5cd3      	ldrb	r3, [r2, r3]
 800082e:	22fe      	movs	r2, #254	; 0xfe
 8000830:	2101      	movs	r1, #1
 8000832:	0018      	movs	r0, r3
 8000834:	f002 ff32 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(sixR); dot++) {
 8000838:	193b      	adds	r3, r7, r4
 800083a:	781a      	ldrb	r2, [r3, #0]
 800083c:	193b      	adds	r3, r7, r4
 800083e:	3201      	adds	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	2308      	movs	r3, #8
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b0c      	cmp	r3, #12
 800084a:	d9eb      	bls.n	8000824 <main+0x208>
			}
			MyDelay_ms(TIME + 300);
 800084c:	23fa      	movs	r3, #250	; 0xfa
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	0018      	movs	r0, r3
 8000852:	f003 fa53 	bl	8003cfc <MyDelay_ms>
			x++;
 8000856:	210f      	movs	r1, #15
 8000858:	187b      	adds	r3, r7, r1
 800085a:	781a      	ldrb	r2, [r3, #0]
 800085c:	187b      	adds	r3, r7, r1
 800085e:	3201      	adds	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 8000862:	f003 f9c1 	bl	8003be8 <IS31FL3743B_ClearAll>
			break;
 8000866:	e065      	b.n	8000934 <main+0x318>

		case 7:
			for (uint8_t dot = 0; dot <= sizeof(sevenR); dot++) {
 8000868:	1dfb      	adds	r3, r7, #7
 800086a:	2200      	movs	r2, #0
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	e00d      	b.n	800088c <main+0x270>
				IS31FL3743B_SetDotColor(sevenR[dot], Green, full);
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4a38      	ldr	r2, [pc, #224]	; (8000958 <main+0x33c>)
 8000876:	5cd3      	ldrb	r3, [r2, r3]
 8000878:	22fe      	movs	r2, #254	; 0xfe
 800087a:	2101      	movs	r1, #1
 800087c:	0018      	movs	r0, r3
 800087e:	f002 ff0d 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(sevenR); dot++) {
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781a      	ldrb	r2, [r3, #0]
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	3201      	adds	r2, #1
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b07      	cmp	r3, #7
 8000892:	d9ed      	bls.n	8000870 <main+0x254>
			}
			MyDelay_ms(TIME);
 8000894:	20c8      	movs	r0, #200	; 0xc8
 8000896:	f003 fa31 	bl	8003cfc <MyDelay_ms>
			x++;
 800089a:	210f      	movs	r1, #15
 800089c:	187b      	adds	r3, r7, r1
 800089e:	781a      	ldrb	r2, [r3, #0]
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	3201      	adds	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 80008a6:	f003 f99f 	bl	8003be8 <IS31FL3743B_ClearAll>
			break;
 80008aa:	e043      	b.n	8000934 <main+0x318>

		case 8:
			for (uint8_t dot = 0; dot <= sizeof(eightR); dot++) {
 80008ac:	1dbb      	adds	r3, r7, #6
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	e00d      	b.n	80008d0 <main+0x2b4>
				IS31FL3743B_SetDotColor(eightR[dot], Green, full);
 80008b4:	1dbb      	adds	r3, r7, #6
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4a28      	ldr	r2, [pc, #160]	; (800095c <main+0x340>)
 80008ba:	5cd3      	ldrb	r3, [r2, r3]
 80008bc:	22fe      	movs	r2, #254	; 0xfe
 80008be:	2101      	movs	r1, #1
 80008c0:	0018      	movs	r0, r3
 80008c2:	f002 feeb 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(eightR); dot++) {
 80008c6:	1dbb      	adds	r3, r7, #6
 80008c8:	781a      	ldrb	r2, [r3, #0]
 80008ca:	1dbb      	adds	r3, r7, #6
 80008cc:	3201      	adds	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	1dbb      	adds	r3, r7, #6
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b0d      	cmp	r3, #13
 80008d6:	d9ed      	bls.n	80008b4 <main+0x298>
			}
			MyDelay_ms(TIME);
 80008d8:	20c8      	movs	r0, #200	; 0xc8
 80008da:	f003 fa0f 	bl	8003cfc <MyDelay_ms>
			x++;
 80008de:	210f      	movs	r1, #15
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	781a      	ldrb	r2, [r3, #0]
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	3201      	adds	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 80008ea:	f003 f97d 	bl	8003be8 <IS31FL3743B_ClearAll>
			break;
 80008ee:	e021      	b.n	8000934 <main+0x318>

		case 9:
			for (uint8_t dot = 0; dot <= sizeof(nineR); dot++) {
 80008f0:	1d7b      	adds	r3, r7, #5
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	e00d      	b.n	8000914 <main+0x2f8>
				IS31FL3743B_SetDotColor(nineR[dot], Green, full);
 80008f8:	1d7b      	adds	r3, r7, #5
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4a18      	ldr	r2, [pc, #96]	; (8000960 <main+0x344>)
 80008fe:	5cd3      	ldrb	r3, [r2, r3]
 8000900:	22fe      	movs	r2, #254	; 0xfe
 8000902:	2101      	movs	r1, #1
 8000904:	0018      	movs	r0, r3
 8000906:	f002 fec9 	bl	800369c <IS31FL3743B_SetDotColor>
			for (uint8_t dot = 0; dot <= sizeof(nineR); dot++) {
 800090a:	1d7b      	adds	r3, r7, #5
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	1d7b      	adds	r3, r7, #5
 8000910:	3201      	adds	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	1d7b      	adds	r3, r7, #5
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b0a      	cmp	r3, #10
 800091a:	d9ed      	bls.n	80008f8 <main+0x2dc>
			}
			MyDelay_ms(TIME);
 800091c:	20c8      	movs	r0, #200	; 0xc8
 800091e:	f003 f9ed 	bl	8003cfc <MyDelay_ms>
			x++;
 8000922:	210f      	movs	r1, #15
 8000924:	187b      	adds	r3, r7, r1
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	187b      	adds	r3, r7, r1
 800092a:	3201      	adds	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
			IS31FL3743B_ClearAll();
 800092e:	f003 f95b 	bl	8003be8 <IS31FL3743B_ClearAll>
			break;
 8000932:	46c0      	nop			; (mov r8, r8)
		switch (x) {
 8000934:	e689      	b.n	800064a <main+0x2e>
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	08003e44 	.word	0x08003e44
 800093c:	08003dd0 	.word	0x08003dd0
 8000940:	08003ddc 	.word	0x08003ddc
 8000944:	08003de4 	.word	0x08003de4
 8000948:	08003df0 	.word	0x08003df0
 800094c:	08003dfc 	.word	0x08003dfc
 8000950:	08003e08 	.word	0x08003e08
 8000954:	08003e14 	.word	0x08003e14
 8000958:	08003e20 	.word	0x08003e20
 800095c:	08003e28 	.word	0x08003e28
 8000960:	08003e38 	.word	0x08003e38

08000964 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b093      	sub	sp, #76	; 0x4c
 8000968:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800096a:	2410      	movs	r4, #16
 800096c:	193b      	adds	r3, r7, r4
 800096e:	0018      	movs	r0, r3
 8000970:	2338      	movs	r3, #56	; 0x38
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f003 fa0d 	bl	8003d94 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800097a:	003b      	movs	r3, r7
 800097c:	0018      	movs	r0, r3
 800097e:	2310      	movs	r3, #16
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f003 fa06 	bl	8003d94 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	0018      	movs	r0, r3
 800098e:	f000 feab 	bl	80016e8 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2202      	movs	r2, #2
 8000996:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	0052      	lsls	r2, r2, #1
 800099e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80009a0:	0021      	movs	r1, r4
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2240      	movs	r2, #64	; 0x40
 80009ac:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2202      	movs	r2, #2
 80009b2:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2202      	movs	r2, #2
 80009b8:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2208      	movs	r2, #8
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2280      	movs	r2, #128	; 0x80
 80009ca:	0292      	lsls	r2, r2, #10
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	0492      	lsls	r2, r2, #18
 80009d4:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009d6:	187b      	adds	r3, r7, r1
 80009d8:	2280      	movs	r2, #128	; 0x80
 80009da:	0592      	lsls	r2, r2, #22
 80009dc:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 fecd 	bl	8001780 <HAL_RCC_OscConfig>
 80009e6:	1e03      	subs	r3, r0, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x8a>
		Error_Handler();
 80009ea:	f000 f995 	bl	8000d18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80009ee:	003b      	movs	r3, r7
 80009f0:	2207      	movs	r2, #7
 80009f2:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f4:	003b      	movs	r3, r7
 80009f6:	2202      	movs	r2, #2
 80009f8:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	003b      	movs	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a00:	003b      	movs	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a06:	003b      	movs	r3, r7
 8000a08:	2102      	movs	r1, #2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 f9d8 	bl	8001dc0 <HAL_RCC_ClockConfig>
 8000a10:	1e03      	subs	r3, r0, #0
 8000a12:	d001      	beq.n	8000a18 <SystemClock_Config+0xb4>
		Error_Handler();
 8000a14:	f000 f980 	bl	8000d18 <Error_Handler>
	}
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b013      	add	sp, #76	; 0x4c
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a26:	4a20      	ldr	r2, [pc, #128]	; (8000aa8 <MX_SPI1_Init+0x88>)
 8000a28:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a2a:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a2c:	2282      	movs	r2, #130	; 0x82
 8000a2e:	0052      	lsls	r2, r2, #1
 8000a30:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a3a:	22e0      	movs	r2, #224	; 0xe0
 8000a3c:	00d2      	lsls	r2, r2, #3
 8000a3e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a56:	2218      	movs	r2, #24
 8000a58:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a6e:	2207      	movs	r2, #7
 8000a70:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_SPI1_Init+0x84>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f001 fb47 	bl	8002114 <HAL_SPI_Init>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_SPI1_Init+0x6e>
		Error_Handler();
 8000a8a:	f000 f945 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, 0);
 8000a8e:	23a0      	movs	r3, #160	; 0xa0
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	2200      	movs	r2, #0
 8000a94:	2120      	movs	r1, #32
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 fe08 	bl	80016ac <HAL_GPIO_WritePin>
	/* USER CODE END SPI1_Init 2 */

}
 8000a9c:	46c0      	nop			; (mov r8, r8)
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000090 	.word	0x20000090
 8000aa8:	40013000 	.word	0x40013000

08000aac <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000ab2:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <MX_SPI2_Init+0x70>)
 8000ab4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 8000ab6:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000abc:	4b16      	ldr	r3, [pc, #88]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000ac4:	22e0      	movs	r2, #224	; 0xe0
 8000ac6:	00d2      	lsls	r2, r2, #3
 8000ac8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ad6:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	0092      	lsls	r2, r2, #2
 8000adc:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000af2:	2207      	movs	r2, #7
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <MX_SPI2_Init+0x6c>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f001 fb05 	bl	8002114 <HAL_SPI_Init>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_SPI2_Init+0x66>
		Error_Handler();
 8000b0e:	f000 f903 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000028 	.word	0x20000028
 8000b1c:	40003800 	.word	0x40003800

08000b20 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_TIM16_Init+0x4c>)
 8000b26:	4a12      	ldr	r2, [pc, #72]	; (8000b70 <MX_TIM16_Init+0x50>)
 8000b28:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 6400 - 1;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_TIM16_Init+0x4c>)
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <MX_TIM16_Init+0x54>)
 8000b2e:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_TIM16_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535 - 1;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_TIM16_Init+0x4c>)
 8000b38:	4a0f      	ldr	r2, [pc, #60]	; (8000b78 <MX_TIM16_Init+0x58>)
 8000b3a:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_TIM16_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000b42:	4b0a      	ldr	r3, [pc, #40]	; (8000b6c <MX_TIM16_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <MX_TIM16_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_TIM16_Init+0x4c>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 ff4d 	bl	80029f0 <HAL_TIM_Base_Init>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM16_Init+0x3e>
		Error_Handler();
 8000b5a:	f000 f8dd 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	HAL_TIM_Base_Start(&(MY_TIM_HANDLE));
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <MX_TIM16_Init+0x4c>)
 8000b60:	0018      	movs	r0, r3
 8000b62:	f001 ff9d 	bl	8002aa0 <HAL_TIM_Base_Start>
	/* USER CODE END TIM16_Init 2 */

}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000184 	.word	0x20000184
 8000b70:	40014400 	.word	0x40014400
 8000b74:	000018ff 	.word	0x000018ff
 8000b78:	0000fffe 	.word	0x0000fffe

08000b7c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000b80:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000b82:	4a17      	ldr	r2, [pc, #92]	; (8000be0 <MX_USART2_UART_Init+0x64>)
 8000b84:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000b88:	22e1      	movs	r2, #225	; 0xe1
 8000b8a:	0252      	lsls	r2, r2, #9
 8000b8c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b11      	ldr	r3, [pc, #68]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bbe:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <MX_USART2_UART_Init+0x60>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f002 f82c 	bl	8002c24 <HAL_UART_Init>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000bd0:	f000 f8a2 	bl	8000d18 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000bd4:	46c0      	nop			; (mov r8, r8)
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	200000f4 	.word	0x200000f4
 8000be0:	40004400 	.word	0x40004400

08000be4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bea:	240c      	movs	r4, #12
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	0018      	movs	r0, r3
 8000bf0:	2314      	movs	r3, #20
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	f003 f8cd 	bl	8003d94 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <MX_GPIO_Init+0xc8>)
 8000bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_GPIO_Init+0xc8>)
 8000c00:	2102      	movs	r1, #2
 8000c02:	430a      	orrs	r2, r1
 8000c04:	635a      	str	r2, [r3, #52]	; 0x34
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_GPIO_Init+0xc8>)
 8000c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c12:	4b26      	ldr	r3, [pc, #152]	; (8000cac <MX_GPIO_Init+0xc8>)
 8000c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_GPIO_Init+0xc8>)
 8000c18:	2101      	movs	r1, #1
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c1e:	4b23      	ldr	r3, [pc, #140]	; (8000cac <MX_GPIO_Init+0xc8>)
 8000c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c22:	2201      	movs	r2, #1
 8000c24:	4013      	ands	r3, r2
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000c2a:	23a0      	movs	r3, #160	; 0xa0
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2110      	movs	r1, #16
 8000c32:	0018      	movs	r0, r3
 8000c34:	f000 fd3a 	bl	80016ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SDB_GPIO_Port, SDB_Pin, GPIO_PIN_RESET);
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	0119      	lsls	r1, r3, #4
 8000c3c:	23a0      	movs	r3, #160	; 0xa0
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	2200      	movs	r2, #0
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fd32 	bl	80016ac <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2110      	movs	r1, #16
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 fd2c 	bl	80016ac <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CS_Pin SDB_Pin */
	GPIO_InitStruct.Pin = CS_Pin | SDB_Pin;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2281      	movs	r2, #129	; 0x81
 8000c58:	0112      	lsls	r2, r2, #4
 8000c5a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2201      	movs	r2, #1
 8000c60:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	193b      	adds	r3, r7, r4
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	193a      	adds	r2, r7, r4
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 fbb4 	bl	80013e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD1_Pin */
	GPIO_InitStruct.Pin = LD1_Pin;
 8000c7c:	0021      	movs	r1, r4
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2210      	movs	r2, #16
 8000c82:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	2201      	movs	r2, #1
 8000c88:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	187b      	adds	r3, r7, r1
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	2201      	movs	r2, #1
 8000c94:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000c96:	187b      	adds	r3, r7, r1
 8000c98:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0xcc>)
 8000c9a:	0019      	movs	r1, r3
 8000c9c:	0010      	movs	r0, r2
 8000c9e:	f000 fba1 	bl	80013e4 <HAL_GPIO_Init>

}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b009      	add	sp, #36	; 0x24
 8000ca8:	bd90      	pop	{r4, r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	50000400 	.word	0x50000400

08000cb4 <LedBlink>:

/* USER CODE BEGIN 4 */
extern void LedBlink(uint8_t HowManyTimes) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	0002      	movs	r2, r0
 8000cbc:	1dfb      	adds	r3, r7, #7
 8000cbe:	701a      	strb	r2, [r3, #0]
	for (uint8_t count = 0; count < HowManyTimes; count++) {
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e017      	b.n	8000cfa <LedBlink+0x46>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <LedBlink+0x60>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2110      	movs	r1, #16
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f000 fceb 	bl	80016ac <HAL_GPIO_WritePin>
		MyDelay_ms(50);
 8000cd6:	2032      	movs	r0, #50	; 0x32
 8000cd8:	f003 f810 	bl	8003cfc <MyDelay_ms>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <LedBlink+0x60>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fce2 	bl	80016ac <HAL_GPIO_WritePin>
		MyDelay_ms(50);
 8000ce8:	2032      	movs	r0, #50	; 0x32
 8000cea:	f003 f807 	bl	8003cfc <MyDelay_ms>
	for (uint8_t count = 0; count < HowManyTimes; count++) {
 8000cee:	210f      	movs	r1, #15
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	781a      	ldrb	r2, [r3, #0]
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	3201      	adds	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
 8000cfa:	230f      	movs	r3, #15
 8000cfc:	18fa      	adds	r2, r7, r3
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	7812      	ldrb	r2, [r2, #0]
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3e0      	bcc.n	8000cca <LedBlink+0x16>
	}
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b004      	add	sp, #16
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	50000400 	.word	0x50000400

08000d18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_MspInit+0x44>)
 8000d2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d2e:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_MspInit+0x44>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	430a      	orrs	r2, r1
 8000d34:	641a      	str	r2, [r3, #64]	; 0x40
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_MspInit+0x44>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x44>)
 8000d44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d46:	4b08      	ldr	r3, [pc, #32]	; (8000d68 <HAL_MspInit+0x44>)
 8000d48:	2180      	movs	r1, #128	; 0x80
 8000d4a:	0549      	lsls	r1, r1, #21
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_MspInit+0x44>)
 8000d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d54:	2380      	movs	r3, #128	; 0x80
 8000d56:	055b      	lsls	r3, r3, #21
 8000d58:	4013      	ands	r3, r2
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b08d      	sub	sp, #52	; 0x34
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	241c      	movs	r4, #28
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	0018      	movs	r0, r3
 8000d7a:	2314      	movs	r3, #20
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f003 f808 	bl	8003d94 <memset>
  if(hspi->Instance==SPI1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a4c      	ldr	r2, [pc, #304]	; (8000ebc <HAL_SPI_MspInit+0x150>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d139      	bne.n	8000e02 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8e:	4b4c      	ldr	r3, [pc, #304]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d92:	4b4b      	ldr	r3, [pc, #300]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000d94:	2180      	movs	r1, #128	; 0x80
 8000d96:	0149      	lsls	r1, r1, #5
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d9c:	4b48      	ldr	r3, [pc, #288]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da0:	2380      	movs	r3, #128	; 0x80
 8000da2:	015b      	lsls	r3, r3, #5
 8000da4:	4013      	ands	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b45      	ldr	r3, [pc, #276]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000dac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dae:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000db0:	2101      	movs	r1, #1
 8000db2:	430a      	orrs	r2, r1
 8000db4:	635a      	str	r2, [r3, #52]	; 0x34
 8000db6:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000dc2:	0021      	movs	r1, r4
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	22e0      	movs	r2, #224	; 0xe0
 8000dc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2202      	movs	r2, #2
 8000dce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	187a      	adds	r2, r7, r1
 8000de4:	23a0      	movs	r3, #160	; 0xa0
 8000de6:	05db      	lsls	r3, r3, #23
 8000de8:	0011      	movs	r1, r2
 8000dea:	0018      	movs	r0, r3
 8000dec:	f000 fafa 	bl	80013e4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2100      	movs	r1, #0
 8000df4:	2019      	movs	r0, #25
 8000df6:	f000 fa59 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000dfa:	2019      	movs	r0, #25
 8000dfc:	f000 fa6b 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e00:	e057      	b.n	8000eb2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a2f      	ldr	r2, [pc, #188]	; (8000ec4 <HAL_SPI_MspInit+0x158>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d152      	bne.n	8000eb2 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000e12:	2180      	movs	r1, #128	; 0x80
 8000e14:	01c9      	lsls	r1, r1, #7
 8000e16:	430a      	orrs	r2, r1
 8000e18:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e1a:	4b29      	ldr	r3, [pc, #164]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e1e:	2380      	movs	r3, #128	; 0x80
 8000e20:	01db      	lsls	r3, r3, #7
 8000e22:	4013      	ands	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	4b25      	ldr	r3, [pc, #148]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000e2e:	2102      	movs	r1, #2
 8000e30:	430a      	orrs	r2, r1
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e38:	2202      	movs	r2, #2
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000e46:	2101      	movs	r1, #1
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_SPI_MspInit+0x154>)
 8000e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e50:	2201      	movs	r2, #1
 8000e52:	4013      	ands	r3, r2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_2;
 8000e58:	241c      	movs	r4, #28
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	2284      	movs	r2, #132	; 0x84
 8000e5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	193b      	adds	r3, r7, r4
 8000e62:	2202      	movs	r2, #2
 8000e64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2201      	movs	r2, #1
 8000e76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <HAL_SPI_MspInit+0x15c>)
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	0010      	movs	r0, r2
 8000e80:	f000 fab0 	bl	80013e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e84:	0021      	movs	r1, r4
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2201      	movs	r2, #1
 8000e8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	2202      	movs	r2, #2
 8000e90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	187a      	adds	r2, r7, r1
 8000ea6:	23a0      	movs	r3, #160	; 0xa0
 8000ea8:	05db      	lsls	r3, r3, #23
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fa99 	bl	80013e4 <HAL_GPIO_Init>
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b00d      	add	sp, #52	; 0x34
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40013000 	.word	0x40013000
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40003800 	.word	0x40003800
 8000ec8:	50000400 	.word	0x50000400

08000ecc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <HAL_TIM_Base_MspInit+0x38>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10d      	bne.n	8000efa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_TIM_Base_MspInit+0x3c>)
 8000ee0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <HAL_TIM_Base_MspInit+0x3c>)
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	0289      	lsls	r1, r1, #10
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_TIM_Base_MspInit+0x3c>)
 8000eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b004      	add	sp, #16
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40014400 	.word	0x40014400
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b08b      	sub	sp, #44	; 0x2c
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	2414      	movs	r4, #20
 8000f16:	193b      	adds	r3, r7, r4
 8000f18:	0018      	movs	r0, r3
 8000f1a:	2314      	movs	r3, #20
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	2100      	movs	r1, #0
 8000f20:	f002 ff38 	bl	8003d94 <memset>
  if(huart->Instance==USART2)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1b      	ldr	r2, [pc, #108]	; (8000f98 <HAL_UART_MspInit+0x8c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d130      	bne.n	8000f90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f32:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f34:	2180      	movs	r1, #128	; 0x80
 8000f36:	0289      	lsls	r1, r1, #10
 8000f38:	430a      	orrs	r2, r1
 8000f3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f40:	2380      	movs	r3, #128	; 0x80
 8000f42:	029b      	lsls	r3, r3, #10
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	430a      	orrs	r2, r1
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <HAL_UART_MspInit+0x90>)
 8000f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f62:	0021      	movs	r1, r4
 8000f64:	187b      	adds	r3, r7, r1
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	187b      	adds	r3, r7, r1
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	187b      	adds	r3, r7, r1
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f7c:	187b      	adds	r3, r7, r1
 8000f7e:	2201      	movs	r2, #1
 8000f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	187a      	adds	r2, r7, r1
 8000f84:	23a0      	movs	r3, #160	; 0xa0
 8000f86:	05db      	lsls	r3, r3, #23
 8000f88:	0011      	movs	r1, r2
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 fa2a 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b00b      	add	sp, #44	; 0x2c
 8000f96:	bd90      	pop	{r4, r7, pc}
 8000f98:	40004400 	.word	0x40004400
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc4:	f000 f8aa 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <SPI1_IRQHandler+0x14>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f001 f9ee 	bl	80023b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	20000090 	.word	0x20000090

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ff6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff8:	f7ff fff6 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LoopForever+0xe>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <LoopForever+0x16>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001022:	f002 fe93 	bl	8003d4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001026:	f7ff faf9 	bl	800061c <main>

0800102a <LoopForever>:

LoopForever:
  b LoopForever
 800102a:	e7fe      	b.n	800102a <LoopForever>
  ldr   r0, =_estack
 800102c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001038:	08003f14 	.word	0x08003f14
  ldr r2, =_sbss
 800103c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001040:	200001d4 	.word	0x200001d4

08001044 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_IRQHandler>
	...

08001048 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <HAL_Init+0x3c>)
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Init+0x3c>)
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	0049      	lsls	r1, r1, #1
 800105e:	430a      	orrs	r2, r1
 8001060:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	2003      	movs	r0, #3
 8001064:	f000 f810 	bl	8001088 <HAL_InitTick>
 8001068:	1e03      	subs	r3, r0, #0
 800106a:	d003      	beq.n	8001074 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	2201      	movs	r2, #1
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e001      	b.n	8001078 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fe56 	bl	8000d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001078:	1dfb      	adds	r3, r7, #7
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40022000 	.word	0x40022000

08001088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001090:	230f      	movs	r3, #15
 8001092:	18fb      	adds	r3, r7, r3
 8001094:	2200      	movs	r2, #0
 8001096:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_InitTick+0x88>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d02b      	beq.n	80010f8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010a0:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <HAL_InitTick+0x8c>)
 80010a2:	681c      	ldr	r4, [r3, #0]
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_InitTick+0x88>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	0019      	movs	r1, r3
 80010aa:	23fa      	movs	r3, #250	; 0xfa
 80010ac:	0098      	lsls	r0, r3, #2
 80010ae:	f7ff f829 	bl	8000104 <__udivsi3>
 80010b2:	0003      	movs	r3, r0
 80010b4:	0019      	movs	r1, r3
 80010b6:	0020      	movs	r0, r4
 80010b8:	f7ff f824 	bl	8000104 <__udivsi3>
 80010bc:	0003      	movs	r3, r0
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 f919 	bl	80012f6 <HAL_SYSTICK_Config>
 80010c4:	1e03      	subs	r3, r0, #0
 80010c6:	d112      	bne.n	80010ee <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d80a      	bhi.n	80010e4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	2301      	movs	r3, #1
 80010d2:	425b      	negs	r3, r3
 80010d4:	2200      	movs	r2, #0
 80010d6:	0018      	movs	r0, r3
 80010d8:	f000 f8e8 	bl	80012ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <HAL_InitTick+0x90>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e00d      	b.n	8001100 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010e4:	230f      	movs	r3, #15
 80010e6:	18fb      	adds	r3, r7, r3
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e008      	b.n	8001100 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ee:	230f      	movs	r3, #15
 80010f0:	18fb      	adds	r3, r7, r3
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e003      	b.n	8001100 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	781b      	ldrb	r3, [r3, #0]
}
 8001106:	0018      	movs	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	b005      	add	sp, #20
 800110c:	bd90      	pop	{r4, r7, pc}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	20000008 	.word	0x20000008
 8001114:	20000000 	.word	0x20000000
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x1c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	001a      	movs	r2, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x20>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	18d2      	adds	r2, r2, r3
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_IncTick+0x20>)
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	20000008 	.word	0x20000008
 800113c:	200001d0 	.word	0x200001d0

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <HAL_GetTick+0x10>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	200001d0 	.word	0x200001d0

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b7f      	cmp	r3, #127	; 0x7f
 8001166:	d809      	bhi.n	800117c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	001a      	movs	r2, r3
 800116e:	231f      	movs	r3, #31
 8001170:	401a      	ands	r2, r3
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_EnableIRQ+0x30>)
 8001174:	2101      	movs	r1, #1
 8001176:	4091      	lsls	r1, r2
 8001178:	000a      	movs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	0002      	movs	r2, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b7f      	cmp	r3, #127	; 0x7f
 800119c:	d828      	bhi.n	80011f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <__NVIC_SetPriority+0xd4>)
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	33c0      	adds	r3, #192	; 0xc0
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	589b      	ldr	r3, [r3, r2]
 80011ae:	1dfa      	adds	r2, r7, #7
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	0011      	movs	r1, r2
 80011b4:	2203      	movs	r2, #3
 80011b6:	400a      	ands	r2, r1
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	21ff      	movs	r1, #255	; 0xff
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	401a      	ands	r2, r3
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	2303      	movs	r3, #3
 80011d6:	4003      	ands	r3, r0
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011dc:	481f      	ldr	r0, [pc, #124]	; (800125c <__NVIC_SetPriority+0xd4>)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	430a      	orrs	r2, r1
 80011e8:	33c0      	adds	r3, #192	; 0xc0
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ee:	e031      	b.n	8001254 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <__NVIC_SetPriority+0xd8>)
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	0019      	movs	r1, r3
 80011f8:	230f      	movs	r3, #15
 80011fa:	400b      	ands	r3, r1
 80011fc:	3b08      	subs	r3, #8
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3306      	adds	r3, #6
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	18d3      	adds	r3, r2, r3
 8001206:	3304      	adds	r3, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1dfa      	adds	r2, r7, #7
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	0011      	movs	r1, r2
 8001210:	2203      	movs	r2, #3
 8001212:	400a      	ands	r2, r1
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	21ff      	movs	r1, #255	; 0xff
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	43d2      	mvns	r2, r2
 800121e:	401a      	ands	r2, r3
 8001220:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	019b      	lsls	r3, r3, #6
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	401a      	ands	r2, r3
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	2303      	movs	r3, #3
 8001232:	4003      	ands	r3, r0
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <__NVIC_SetPriority+0xd8>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	001c      	movs	r4, r3
 8001240:	230f      	movs	r3, #15
 8001242:	4023      	ands	r3, r4
 8001244:	3b08      	subs	r3, #8
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	430a      	orrs	r2, r1
 800124a:	3306      	adds	r3, #6
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	18c3      	adds	r3, r0, r3
 8001250:	3304      	adds	r3, #4
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b003      	add	sp, #12
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1e5a      	subs	r2, r3, #1
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	045b      	lsls	r3, r3, #17
 8001274:	429a      	cmp	r2, r3
 8001276:	d301      	bcc.n	800127c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001278:	2301      	movs	r3, #1
 800127a:	e010      	b.n	800129e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <SysTick_Config+0x44>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	3a01      	subs	r2, #1
 8001282:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001284:	2301      	movs	r3, #1
 8001286:	425b      	negs	r3, r3
 8001288:	2103      	movs	r1, #3
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff ff7c 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x44>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x44>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	210f      	movs	r1, #15
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	1c02      	adds	r2, r0, #0
 80012bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff ff5d 	bl	8001188 <__NVIC_SetPriority>
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	0002      	movs	r2, r0
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff ff33 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ffaf 	bl	8001264 <SysTick_Config>
 8001306:	0003      	movs	r3, r0
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001318:	210f      	movs	r1, #15
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2225      	movs	r2, #37	; 0x25
 8001324:	5c9b      	ldrb	r3, [r3, r2]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d006      	beq.n	800133a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e049      	b.n	80013ce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	210e      	movs	r1, #14
 8001346:	438a      	bics	r2, r1
 8001348:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	438a      	bics	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	491d      	ldr	r1, [pc, #116]	; (80013dc <HAL_DMA_Abort_IT+0xcc>)
 8001366:	400a      	ands	r2, r1
 8001368:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_DMA_Abort_IT+0xd0>)
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	221c      	movs	r2, #28
 8001374:	4013      	ands	r3, r2
 8001376:	2201      	movs	r2, #1
 8001378:	409a      	lsls	r2, r3
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_DMA_Abort_IT+0xd0>)
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001388:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800138e:	2b00      	cmp	r3, #0
 8001390:	d00c      	beq.n	80013ac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139c:	490f      	ldr	r1, [pc, #60]	; (80013dc <HAL_DMA_Abort_IT+0xcc>)
 800139e:	400a      	ands	r2, r1
 80013a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80013aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2225      	movs	r2, #37	; 0x25
 80013b0:	2101      	movs	r1, #1
 80013b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2224      	movs	r2, #36	; 0x24
 80013b8:	2100      	movs	r1, #0
 80013ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d004      	beq.n	80013ce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	0010      	movs	r0, r2
 80013cc:	4798      	blx	r3
    }
  }
  return status;
 80013ce:	230f      	movs	r3, #15
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	781b      	ldrb	r3, [r3, #0]
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b004      	add	sp, #16
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	fffffeff 	.word	0xfffffeff
 80013e0:	40020000 	.word	0x40020000

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	e147      	b.n	8001684 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2101      	movs	r1, #1
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	4091      	lsls	r1, r2
 80013fe:	000a      	movs	r2, r1
 8001400:	4013      	ands	r3, r2
 8001402:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d100      	bne.n	800140c <HAL_GPIO_Init+0x28>
 800140a:	e138      	b.n	800167e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2203      	movs	r2, #3
 8001412:	4013      	ands	r3, r2
 8001414:	2b01      	cmp	r3, #1
 8001416:	d005      	beq.n	8001424 <HAL_GPIO_Init+0x40>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	4013      	ands	r3, r2
 8001420:	2b02      	cmp	r3, #2
 8001422:	d130      	bne.n	8001486 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	409a      	lsls	r2, r3
 8001432:	0013      	movs	r3, r2
 8001434:	43da      	mvns	r2, r3
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	409a      	lsls	r2, r3
 8001446:	0013      	movs	r3, r2
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800145a:	2201      	movs	r2, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	409a      	lsls	r2, r3
 8001460:	0013      	movs	r3, r2
 8001462:	43da      	mvns	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	2201      	movs	r2, #1
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
 8001478:	0013      	movs	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2203      	movs	r2, #3
 800148c:	4013      	ands	r3, r2
 800148e:	2b03      	cmp	r3, #3
 8001490:	d017      	beq.n	80014c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	2203      	movs	r2, #3
 800149e:	409a      	lsls	r2, r3
 80014a0:	0013      	movs	r3, r2
 80014a2:	43da      	mvns	r2, r3
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	409a      	lsls	r2, r3
 80014b4:	0013      	movs	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2203      	movs	r2, #3
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d123      	bne.n	8001516 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	58d3      	ldr	r3, [r2, r3]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	2207      	movs	r2, #7
 80014e0:	4013      	ands	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	220f      	movs	r2, #15
 80014e6:	409a      	lsls	r2, r3
 80014e8:	0013      	movs	r3, r2
 80014ea:	43da      	mvns	r2, r3
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	691a      	ldr	r2, [r3, #16]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	2107      	movs	r1, #7
 80014fa:	400b      	ands	r3, r1
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	409a      	lsls	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	08da      	lsrs	r2, r3, #3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3208      	adds	r2, #8
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	6939      	ldr	r1, [r7, #16]
 8001514:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	2203      	movs	r2, #3
 8001522:	409a      	lsls	r2, r3
 8001524:	0013      	movs	r3, r2
 8001526:	43da      	mvns	r2, r3
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2203      	movs	r2, #3
 8001534:	401a      	ands	r2, r3
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	409a      	lsls	r2, r3
 800153c:	0013      	movs	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685a      	ldr	r2, [r3, #4]
 800154e:	23c0      	movs	r3, #192	; 0xc0
 8001550:	029b      	lsls	r3, r3, #10
 8001552:	4013      	ands	r3, r2
 8001554:	d100      	bne.n	8001558 <HAL_GPIO_Init+0x174>
 8001556:	e092      	b.n	800167e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001558:	4a50      	ldr	r2, [pc, #320]	; (800169c <HAL_GPIO_Init+0x2b8>)
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	089b      	lsrs	r3, r3, #2
 800155e:	3318      	adds	r3, #24
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	589b      	ldr	r3, [r3, r2]
 8001564:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	2203      	movs	r2, #3
 800156a:	4013      	ands	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	220f      	movs	r2, #15
 8001570:	409a      	lsls	r2, r3
 8001572:	0013      	movs	r3, r2
 8001574:	43da      	mvns	r2, r3
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	23a0      	movs	r3, #160	; 0xa0
 8001580:	05db      	lsls	r3, r3, #23
 8001582:	429a      	cmp	r2, r3
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x1ca>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a45      	ldr	r2, [pc, #276]	; (80016a0 <HAL_GPIO_Init+0x2bc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x1c6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a44      	ldr	r2, [pc, #272]	; (80016a4 <HAL_GPIO_Init+0x2c0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x1c2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a43      	ldr	r2, [pc, #268]	; (80016a8 <HAL_GPIO_Init+0x2c4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x1be>
 800159e:	2303      	movs	r3, #3
 80015a0:	e006      	b.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e004      	b.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015a6:	2302      	movs	r3, #2
 80015a8:	e002      	b.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015aa:	2301      	movs	r3, #1
 80015ac:	e000      	b.n	80015b0 <HAL_GPIO_Init+0x1cc>
 80015ae:	2300      	movs	r3, #0
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	2103      	movs	r1, #3
 80015b4:	400a      	ands	r2, r1
 80015b6:	00d2      	lsls	r2, r2, #3
 80015b8:	4093      	lsls	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80015c0:	4936      	ldr	r1, [pc, #216]	; (800169c <HAL_GPIO_Init+0x2b8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3318      	adds	r3, #24
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015ce:	4a33      	ldr	r2, [pc, #204]	; (800169c <HAL_GPIO_Init+0x2b8>)
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	58d3      	ldr	r3, [r2, r3]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43da      	mvns	r2, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4013      	ands	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	4013      	ands	r3, r2
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80015ec:	693a      	ldr	r2, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f4:	4929      	ldr	r1, [pc, #164]	; (800169c <HAL_GPIO_Init+0x2b8>)
 80015f6:	2280      	movs	r2, #128	; 0x80
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80015fc:	4a27      	ldr	r2, [pc, #156]	; (800169c <HAL_GPIO_Init+0x2b8>)
 80015fe:	2384      	movs	r3, #132	; 0x84
 8001600:	58d3      	ldr	r3, [r2, r3]
 8001602:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	43da      	mvns	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	4013      	ands	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	2380      	movs	r3, #128	; 0x80
 8001614:	029b      	lsls	r3, r3, #10
 8001616:	4013      	ands	r3, r2
 8001618:	d003      	beq.n	8001622 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4313      	orrs	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001622:	491e      	ldr	r1, [pc, #120]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001624:	2284      	movs	r2, #132	; 0x84
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <HAL_GPIO_Init+0x2b8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43da      	mvns	r2, r3
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	035b      	lsls	r3, r3, #13
 8001642:	4013      	ands	r3, r2
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	4313      	orrs	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <HAL_GPIO_Init+0x2b8>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43da      	mvns	r2, r3
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4013      	ands	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	039b      	lsls	r3, r3, #14
 800166c:	4013      	ands	r3, r2
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001670:	693a      	ldr	r2, [r7, #16]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_GPIO_Init+0x2b8>)
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	40da      	lsrs	r2, r3
 800168c:	1e13      	subs	r3, r2, #0
 800168e:	d000      	beq.n	8001692 <HAL_GPIO_Init+0x2ae>
 8001690:	e6b0      	b.n	80013f4 <HAL_GPIO_Init+0x10>
  }
}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	46c0      	nop			; (mov r8, r8)
 8001696:	46bd      	mov	sp, r7
 8001698:	b006      	add	sp, #24
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40021800 	.word	0x40021800
 80016a0:	50000400 	.word	0x50000400
 80016a4:	50000800 	.word	0x50000800
 80016a8:	50000c00 	.word	0x50000c00

080016ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	0008      	movs	r0, r1
 80016b6:	0011      	movs	r1, r2
 80016b8:	1cbb      	adds	r3, r7, #2
 80016ba:	1c02      	adds	r2, r0, #0
 80016bc:	801a      	strh	r2, [r3, #0]
 80016be:	1c7b      	adds	r3, r7, #1
 80016c0:	1c0a      	adds	r2, r1, #0
 80016c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016c4:	1c7b      	adds	r3, r7, #1
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d004      	beq.n	80016d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016cc:	1cbb      	adds	r3, r7, #2
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d4:	e003      	b.n	80016de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d6:	1cbb      	adds	r3, r7, #2
 80016d8:	881a      	ldrh	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b002      	add	sp, #8
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a19      	ldr	r2, [pc, #100]	; (800175c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	429a      	cmp	r2, r3
 800170a:	d11f      	bne.n	800174c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	0013      	movs	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	189b      	adds	r3, r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4912      	ldr	r1, [pc, #72]	; (8001764 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800171a:	0018      	movs	r0, r3
 800171c:	f7fe fcf2 	bl	8000104 <__udivsi3>
 8001720:	0003      	movs	r3, r0
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001726:	e008      	b.n	800173a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	3b01      	subs	r3, #1
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e001      	b.n	800173a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e009      	b.n	800174e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800173c:	695a      	ldr	r2, [r3, #20]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	00db      	lsls	r3, r3, #3
 8001742:	401a      	ands	r2, r3
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	429a      	cmp	r2, r3
 800174a:	d0ed      	beq.n	8001728 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800174c:	2300      	movs	r3, #0
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	40007000 	.word	0x40007000
 800175c:	fffff9ff 	.word	0xfffff9ff
 8001760:	20000000 	.word	0x20000000
 8001764:	000f4240 	.word	0x000f4240

08001768 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <LL_RCC_GetAPB1Prescaler+0x14>)
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	23e0      	movs	r3, #224	; 0xe0
 8001772:	01db      	lsls	r3, r3, #7
 8001774:	4013      	ands	r3, r2
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40021000 	.word	0x40021000

08001780 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e304      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	4013      	ands	r3, r2
 800179a:	d100      	bne.n	800179e <HAL_RCC_OscConfig+0x1e>
 800179c:	e07c      	b.n	8001898 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800179e:	4bc3      	ldr	r3, [pc, #780]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2238      	movs	r2, #56	; 0x38
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017a8:	4bc0      	ldr	r3, [pc, #768]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	2203      	movs	r2, #3
 80017ae:	4013      	ands	r3, r2
 80017b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b10      	cmp	r3, #16
 80017b6:	d102      	bne.n	80017be <HAL_RCC_OscConfig+0x3e>
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	2b03      	cmp	r3, #3
 80017bc:	d002      	beq.n	80017c4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4bb9      	ldr	r3, [pc, #740]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	029b      	lsls	r3, r3, #10
 80017cc:	4013      	ands	r3, r2
 80017ce:	d062      	beq.n	8001896 <HAL_RCC_OscConfig+0x116>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d15e      	bne.n	8001896 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e2df      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d107      	bne.n	80017f8 <HAL_RCC_OscConfig+0x78>
 80017e8:	4bb0      	ldr	r3, [pc, #704]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4baf      	ldr	r3, [pc, #700]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	0249      	lsls	r1, r1, #9
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	e020      	b.n	800183a <HAL_RCC_OscConfig+0xba>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	23a0      	movs	r3, #160	; 0xa0
 80017fe:	02db      	lsls	r3, r3, #11
 8001800:	429a      	cmp	r2, r3
 8001802:	d10e      	bne.n	8001822 <HAL_RCC_OscConfig+0xa2>
 8001804:	4ba9      	ldr	r3, [pc, #676]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4ba8      	ldr	r3, [pc, #672]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 800180a:	2180      	movs	r1, #128	; 0x80
 800180c:	02c9      	lsls	r1, r1, #11
 800180e:	430a      	orrs	r2, r1
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	4ba6      	ldr	r3, [pc, #664]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4ba5      	ldr	r3, [pc, #660]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	0249      	lsls	r1, r1, #9
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e00b      	b.n	800183a <HAL_RCC_OscConfig+0xba>
 8001822:	4ba2      	ldr	r3, [pc, #648]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	4ba1      	ldr	r3, [pc, #644]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001828:	49a1      	ldr	r1, [pc, #644]	; (8001ab0 <HAL_RCC_OscConfig+0x330>)
 800182a:	400a      	ands	r2, r1
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	4b9f      	ldr	r3, [pc, #636]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b9e      	ldr	r3, [pc, #632]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001834:	499f      	ldr	r1, [pc, #636]	; (8001ab4 <HAL_RCC_OscConfig+0x334>)
 8001836:	400a      	ands	r2, r1
 8001838:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d014      	beq.n	800186c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff fc7d 	bl	8001140 <HAL_GetTick>
 8001846:	0003      	movs	r3, r0
 8001848:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fc78 	bl	8001140 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b64      	cmp	r3, #100	; 0x64
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e29e      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800185e:	4b93      	ldr	r3, [pc, #588]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	029b      	lsls	r3, r3, #10
 8001866:	4013      	ands	r3, r2
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0xcc>
 800186a:	e015      	b.n	8001898 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186c:	f7ff fc68 	bl	8001140 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001876:	f7ff fc63 	bl	8001140 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b64      	cmp	r3, #100	; 0x64
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e289      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001888:	4b88      	ldr	r3, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	029b      	lsls	r3, r3, #10
 8001890:	4013      	ands	r3, r2
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0xf6>
 8001894:	e000      	b.n	8001898 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001896:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2202      	movs	r2, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	d100      	bne.n	80018a4 <HAL_RCC_OscConfig+0x124>
 80018a2:	e099      	b.n	80019d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a4:	4b81      	ldr	r3, [pc, #516]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2238      	movs	r2, #56	; 0x38
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ae:	4b7f      	ldr	r3, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2203      	movs	r2, #3
 80018b4:	4013      	ands	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	2b10      	cmp	r3, #16
 80018bc:	d102      	bne.n	80018c4 <HAL_RCC_OscConfig+0x144>
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d002      	beq.n	80018ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d135      	bne.n	8001936 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ca:	4b78      	ldr	r3, [pc, #480]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	4013      	ands	r3, r2
 80018d4:	d005      	beq.n	80018e2 <HAL_RCC_OscConfig+0x162>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e25c      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	4b72      	ldr	r3, [pc, #456]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a74      	ldr	r2, [pc, #464]	; (8001ab8 <HAL_RCC_OscConfig+0x338>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	021a      	lsls	r2, r3, #8
 80018f2:	4b6e      	ldr	r3, [pc, #440]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80018f4:	430a      	orrs	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d112      	bne.n	8001924 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018fe:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a6e      	ldr	r2, [pc, #440]	; (8001abc <HAL_RCC_OscConfig+0x33c>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	4b67      	ldr	r3, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001912:	4b66      	ldr	r3, [pc, #408]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0adb      	lsrs	r3, r3, #11
 8001918:	2207      	movs	r2, #7
 800191a:	4013      	ands	r3, r2
 800191c:	4a68      	ldr	r2, [pc, #416]	; (8001ac0 <HAL_RCC_OscConfig+0x340>)
 800191e:	40da      	lsrs	r2, r3
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x344>)
 8001922:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001924:	4b68      	ldr	r3, [pc, #416]	; (8001ac8 <HAL_RCC_OscConfig+0x348>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fbad 	bl	8001088 <HAL_InitTick>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d051      	beq.n	80019d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e232      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d030      	beq.n	80019a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800193e:	4b5b      	ldr	r3, [pc, #364]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a5e      	ldr	r2, [pc, #376]	; (8001abc <HAL_RCC_OscConfig+0x33c>)
 8001944:	4013      	ands	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001952:	4b56      	ldr	r3, [pc, #344]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b55      	ldr	r3, [pc, #340]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	0049      	lsls	r1, r1, #1
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fbee 	bl	8001140 <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196a:	f7ff fbe9 	bl	8001140 <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e20f      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197c:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4013      	ands	r3, r2
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b48      	ldr	r3, [pc, #288]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a4a      	ldr	r2, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x338>)
 800198e:	4013      	ands	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	021a      	lsls	r2, r3, #8
 8001998:	4b44      	ldr	r3, [pc, #272]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	e01b      	b.n	80019d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80019a0:	4b42      	ldr	r3, [pc, #264]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b41      	ldr	r3, [pc, #260]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80019a6:	4949      	ldr	r1, [pc, #292]	; (8001acc <HAL_RCC_OscConfig+0x34c>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fbc8 	bl	8001140 <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fbc3 	bl	8001140 <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1e9      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x236>
 80019d4:	e000      	b.n	80019d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2208      	movs	r2, #8
 80019de:	4013      	ands	r3, r2
 80019e0:	d047      	beq.n	8001a72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019e2:	4b32      	ldr	r3, [pc, #200]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2238      	movs	r2, #56	; 0x38
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b18      	cmp	r3, #24
 80019ec:	d10a      	bne.n	8001a04 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	d03c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x2f2>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d138      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e1cb      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d019      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001a0c:	4b27      	ldr	r3, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001a0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a10:	4b26      	ldr	r3, [pc, #152]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	430a      	orrs	r2, r1
 8001a16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fb92 	bl	8001140 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a22:	f7ff fb8d 	bl	8001140 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1b3      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a34:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d0f1      	beq.n	8001a22 <HAL_RCC_OscConfig+0x2a2>
 8001a3e:	e018      	b.n	8001a72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a40:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001a42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a44:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	438a      	bics	r2, r1
 8001a4a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff fb78 	bl	8001140 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff fb73 	bl	8001140 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e199      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a68:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f1      	bne.n	8001a56 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2204      	movs	r2, #4
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCC_OscConfig+0x2fe>
 8001a7c:	e0c6      	b.n	8001c0c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7e:	231f      	movs	r3, #31
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	2238      	movs	r2, #56	; 0x38
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	d11e      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_OscConfig+0x32c>)
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <HAL_RCC_OscConfig+0x31e>
 8001a9c:	e0b6      	b.n	8001c0c <HAL_RCC_OscConfig+0x48c>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d000      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x328>
 8001aa6:	e0b1      	b.n	8001c0c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e177      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	fffeffff 	.word	0xfffeffff
 8001ab4:	fffbffff 	.word	0xfffbffff
 8001ab8:	ffff80ff 	.word	0xffff80ff
 8001abc:	ffffc7ff 	.word	0xffffc7ff
 8001ac0:	00f42400 	.word	0x00f42400
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	20000004 	.word	0x20000004
 8001acc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ad0:	4bb4      	ldr	r3, [pc, #720]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001ad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	055b      	lsls	r3, r3, #21
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x360>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <HAL_RCC_OscConfig+0x362>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d011      	beq.n	8001b0a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4baf      	ldr	r3, [pc, #700]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aea:	4bae      	ldr	r3, [pc, #696]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001aec:	2180      	movs	r1, #128	; 0x80
 8001aee:	0549      	lsls	r1, r1, #21
 8001af0:	430a      	orrs	r2, r1
 8001af2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001af4:	4bab      	ldr	r3, [pc, #684]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	055b      	lsls	r3, r3, #21
 8001afc:	4013      	ands	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001b02:	231f      	movs	r3, #31
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0a:	4ba7      	ldr	r3, [pc, #668]	; (8001da8 <HAL_RCC_OscConfig+0x628>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	d11a      	bne.n	8001b4c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b16:	4ba4      	ldr	r3, [pc, #656]	; (8001da8 <HAL_RCC_OscConfig+0x628>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	4ba3      	ldr	r3, [pc, #652]	; (8001da8 <HAL_RCC_OscConfig+0x628>)
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	0049      	lsls	r1, r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001b24:	f7ff fb0c 	bl	8001140 <HAL_GetTick>
 8001b28:	0003      	movs	r3, r0
 8001b2a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7ff fb07 	bl	8001140 <HAL_GetTick>
 8001b32:	0002      	movs	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e12d      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b40:	4b99      	ldr	r3, [pc, #612]	; (8001da8 <HAL_RCC_OscConfig+0x628>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x3e2>
 8001b54:	4b93      	ldr	r3, [pc, #588]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b58:	4b92      	ldr	r3, [pc, #584]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x41c>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x404>
 8001b6a:	4b8e      	ldr	r3, [pc, #568]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b6e:	4b8d      	ldr	r3, [pc, #564]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b70:	2104      	movs	r1, #4
 8001b72:	430a      	orrs	r2, r1
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b76:	4b8b      	ldr	r3, [pc, #556]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b7a:	4b8a      	ldr	r3, [pc, #552]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0x41c>
 8001b84:	4b87      	ldr	r3, [pc, #540]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b88:	4b86      	ldr	r3, [pc, #536]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b90:	4b84      	ldr	r3, [pc, #528]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b94:	4b83      	ldr	r3, [pc, #524]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001b96:	2104      	movs	r1, #4
 8001b98:	438a      	bics	r2, r1
 8001b9a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d014      	beq.n	8001bce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff facc 	bl	8001140 <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fac7 	bl	8001140 <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	4a7c      	ldr	r2, [pc, #496]	; (8001dac <HAL_RCC_OscConfig+0x62c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0ec      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc2:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x42e>
 8001bcc:	e013      	b.n	8001bf6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bce:	f7ff fab7 	bl	8001140 <HAL_GetTick>
 8001bd2:	0003      	movs	r3, r0
 8001bd4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd6:	e009      	b.n	8001bec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7ff fab2 	bl	8001140 <HAL_GetTick>
 8001bdc:	0002      	movs	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4a72      	ldr	r2, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x62c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e0d7      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bec:	4b6d      	ldr	r3, [pc, #436]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001bf6:	231f      	movs	r3, #31
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b68      	ldr	r3, [pc, #416]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c04:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c06:	496a      	ldr	r1, [pc, #424]	; (8001db0 <HAL_RCC_OscConfig+0x630>)
 8001c08:	400a      	ands	r2, r1
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d100      	bne.n	8001c16 <HAL_RCC_OscConfig+0x496>
 8001c14:	e0c1      	b.n	8001d9a <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c16:	4b63      	ldr	r3, [pc, #396]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2238      	movs	r2, #56	; 0x38
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b10      	cmp	r3, #16
 8001c20:	d100      	bne.n	8001c24 <HAL_RCC_OscConfig+0x4a4>
 8001c22:	e081      	b.n	8001d28 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69db      	ldr	r3, [r3, #28]
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d156      	bne.n	8001cda <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2c:	4b5d      	ldr	r3, [pc, #372]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	4b5c      	ldr	r3, [pc, #368]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c32:	4960      	ldr	r1, [pc, #384]	; (8001db4 <HAL_RCC_OscConfig+0x634>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff fa82 	bl	8001140 <HAL_GetTick>
 8001c3c:	0003      	movs	r3, r0
 8001c3e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c42:	f7ff fa7d 	bl	8001140 <HAL_GetTick>
 8001c46:	0002      	movs	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e0a3      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c54:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	049b      	lsls	r3, r3, #18
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d1f0      	bne.n	8001c42 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a54      	ldr	r2, [pc, #336]	; (8001db8 <HAL_RCC_OscConfig+0x638>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1a      	ldr	r2, [r3, #32]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	4b45      	ldr	r3, [pc, #276]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c94:	4b43      	ldr	r3, [pc, #268]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b42      	ldr	r3, [pc, #264]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	0449      	lsls	r1, r1, #17
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001ca2:	4b40      	ldr	r3, [pc, #256]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0549      	lsls	r1, r1, #21
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff fa46 	bl	8001140 <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cba:	f7ff fa41 	bl	8001140 <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e067      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ccc:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	049b      	lsls	r3, r3, #18
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x53a>
 8001cd8:	e05f      	b.n	8001d9a <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	4b32      	ldr	r3, [pc, #200]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b31      	ldr	r3, [pc, #196]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001ce0:	4934      	ldr	r1, [pc, #208]	; (8001db4 <HAL_RCC_OscConfig+0x634>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	4b2e      	ldr	r3, [pc, #184]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001cec:	2103      	movs	r1, #3
 8001cee:	438a      	bics	r2, r1
 8001cf0:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001cf8:	4930      	ldr	r1, [pc, #192]	; (8001dbc <HAL_RCC_OscConfig+0x63c>)
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7ff fa1f 	bl	8001140 <HAL_GetTick>
 8001d02:	0003      	movs	r3, r0
 8001d04:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff fa1a 	bl	8001140 <HAL_GetTick>
 8001d0c:	0002      	movs	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e040      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	049b      	lsls	r3, r3, #18
 8001d22:	4013      	ands	r3, r2
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x588>
 8001d26:	e038      	b.n	8001d9a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e033      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <HAL_RCC_OscConfig+0x624>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d126      	bne.n	8001d96 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	2270      	movs	r2, #112	; 0x70
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d11f      	bne.n	8001d96 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	23fe      	movs	r3, #254	; 0xfe
 8001d5a:	01db      	lsls	r3, r3, #7
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d116      	bne.n	8001d96 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	23f8      	movs	r3, #248	; 0xf8
 8001d6c:	039b      	lsls	r3, r3, #14
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d10e      	bne.n	8001d96 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	23e0      	movs	r3, #224	; 0xe0
 8001d7c:	051b      	lsls	r3, r3, #20
 8001d7e:	401a      	ands	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	0f5b      	lsrs	r3, r3, #29
 8001d8c:	075a      	lsls	r2, r3, #29
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d001      	beq.n	8001d9a <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b008      	add	sp, #32
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40007000 	.word	0x40007000
 8001dac:	00001388 	.word	0x00001388
 8001db0:	efffffff 	.word	0xefffffff
 8001db4:	feffffff 	.word	0xfeffffff
 8001db8:	11c1808c 	.word	0x11c1808c
 8001dbc:	eefeffff 	.word	0xeefeffff

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0e9      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b76      	ldr	r3, [pc, #472]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2207      	movs	r2, #7
 8001dda:	4013      	ands	r3, r2
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d91e      	bls.n	8001e20 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b73      	ldr	r3, [pc, #460]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2207      	movs	r2, #7
 8001de8:	4393      	bics	r3, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001df4:	f7ff f9a4 	bl	8001140 <HAL_GetTick>
 8001df8:	0003      	movs	r3, r0
 8001dfa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001dfc:	e009      	b.n	8001e12 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfe:	f7ff f99f 	bl	8001140 <HAL_GetTick>
 8001e02:	0002      	movs	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	4a6a      	ldr	r2, [pc, #424]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0ca      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2207      	movs	r2, #7
 8001e18:	4013      	ands	r3, r2
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1ee      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2202      	movs	r2, #2
 8001e26:	4013      	ands	r3, r2
 8001e28:	d015      	beq.n	8001e56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	4013      	ands	r3, r2
 8001e32:	d006      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e34:	4b60      	ldr	r3, [pc, #384]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3a:	21e0      	movs	r1, #224	; 0xe0
 8001e3c:	01c9      	lsls	r1, r1, #7
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e42:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	4a5d      	ldr	r2, [pc, #372]	; (8001fbc <HAL_RCC_ClockConfig+0x1fc>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d057      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d107      	bne.n	8001e78 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	029b      	lsls	r3, r3, #10
 8001e70:	4013      	ands	r3, r2
 8001e72:	d12b      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e097      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e80:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	049b      	lsls	r3, r3, #18
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d11f      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e08b      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d107      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e98:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d113      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e07f      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d106      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb0:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d108      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e074      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e06d      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	4393      	bics	r3, r2
 8001ed4:	0019      	movs	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001edc:	430a      	orrs	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee0:	f7ff f92e 	bl	8001140 <HAL_GetTick>
 8001ee4:	0003      	movs	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee8:	e009      	b.n	8001efe <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eea:	f7ff f929 	bl	8001140 <HAL_GetTick>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	4a2f      	ldr	r2, [pc, #188]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e054      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2238      	movs	r2, #56	; 0x38
 8001f04:	401a      	ands	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1ec      	bne.n	8001eea <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2207      	movs	r2, #7
 8001f16:	4013      	ands	r3, r2
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d21e      	bcs.n	8001f5c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2207      	movs	r2, #7
 8001f24:	4393      	bics	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f30:	f7ff f906 	bl	8001140 <HAL_GetTick>
 8001f34:	0003      	movs	r3, r0
 8001f36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f38:	e009      	b.n	8001f4e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7ff f901 	bl	8001140 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	4a1b      	ldr	r2, [pc, #108]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e02c      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2207      	movs	r2, #7
 8001f54:	4013      	ands	r3, r2
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d1ee      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2204      	movs	r2, #4
 8001f62:	4013      	ands	r3, r2
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <HAL_RCC_ClockConfig+0x200>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	0019      	movs	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	4b10      	ldr	r3, [pc, #64]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f76:	430a      	orrs	r2, r1
 8001f78:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001f7a:	f000 f829 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f7e:	0001      	movs	r1, r0
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	220f      	movs	r2, #15
 8001f88:	401a      	ands	r2, r3
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_RCC_ClockConfig+0x204>)
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	58d3      	ldr	r3, [r2, r3]
 8001f90:	221f      	movs	r2, #31
 8001f92:	4013      	ands	r3, r2
 8001f94:	000a      	movs	r2, r1
 8001f96:	40da      	lsrs	r2, r3
 8001f98:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <HAL_RCC_ClockConfig+0x208>)
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_ClockConfig+0x20c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff f871 	bl	8001088 <HAL_InitTick>
 8001fa6:	0003      	movs	r3, r0
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b004      	add	sp, #16
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	00001388 	.word	0x00001388
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	fffff0ff 	.word	0xfffff0ff
 8001fc0:	ffff8fff 	.word	0xffff8fff
 8001fc4:	08003e6c 	.word	0x08003e6c
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fd6:	4b3c      	ldr	r3, [pc, #240]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2238      	movs	r2, #56	; 0x38
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d10f      	bne.n	8002000 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0adb      	lsrs	r3, r3, #11
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	4013      	ands	r3, r2
 8001fea:	2201      	movs	r2, #1
 8001fec:	409a      	lsls	r2, r3
 8001fee:	0013      	movs	r3, r2
 8001ff0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001ff2:	6839      	ldr	r1, [r7, #0]
 8001ff4:	4835      	ldr	r0, [pc, #212]	; (80020cc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ff6:	f7fe f885 	bl	8000104 <__udivsi3>
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	e05d      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2238      	movs	r2, #56	; 0x38
 8002006:	4013      	ands	r3, r2
 8002008:	2b08      	cmp	r3, #8
 800200a:	d102      	bne.n	8002012 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800200c:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x100>)
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	e054      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002012:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	2238      	movs	r2, #56	; 0x38
 8002018:	4013      	ands	r3, r2
 800201a:	2b10      	cmp	r3, #16
 800201c:	d138      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2203      	movs	r2, #3
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002028:	4b27      	ldr	r3, [pc, #156]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	2207      	movs	r2, #7
 8002030:	4013      	ands	r3, r2
 8002032:	3301      	adds	r3, #1
 8002034:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2b03      	cmp	r3, #3
 800203a:	d10d      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800203c:	68b9      	ldr	r1, [r7, #8]
 800203e:	4824      	ldr	r0, [pc, #144]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002040:	f7fe f860 	bl	8000104 <__udivsi3>
 8002044:	0003      	movs	r3, r0
 8002046:	0019      	movs	r1, r3
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	227f      	movs	r2, #127	; 0x7f
 8002050:	4013      	ands	r3, r2
 8002052:	434b      	muls	r3, r1
 8002054:	617b      	str	r3, [r7, #20]
        break;
 8002056:	e00d      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	481c      	ldr	r0, [pc, #112]	; (80020cc <HAL_RCC_GetSysClockFreq+0xfc>)
 800205c:	f7fe f852 	bl	8000104 <__udivsi3>
 8002060:	0003      	movs	r3, r0
 8002062:	0019      	movs	r1, r3
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	227f      	movs	r2, #127	; 0x7f
 800206c:	4013      	ands	r3, r2
 800206e:	434b      	muls	r3, r1
 8002070:	617b      	str	r3, [r7, #20]
        break;
 8002072:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002074:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0f5b      	lsrs	r3, r3, #29
 800207a:	2207      	movs	r2, #7
 800207c:	4013      	ands	r3, r2
 800207e:	3301      	adds	r3, #1
 8002080:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	6978      	ldr	r0, [r7, #20]
 8002086:	f7fe f83d 	bl	8000104 <__udivsi3>
 800208a:	0003      	movs	r3, r0
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	e015      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2238      	movs	r2, #56	; 0x38
 8002096:	4013      	ands	r3, r2
 8002098:	2b20      	cmp	r3, #32
 800209a:	d103      	bne.n	80020a4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	e00b      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2238      	movs	r2, #56	; 0x38
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b18      	cmp	r3, #24
 80020ae:	d103      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80020b0:	23fa      	movs	r3, #250	; 0xfa
 80020b2:	01db      	lsls	r3, r3, #7
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	e001      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80020bc:	693b      	ldr	r3, [r7, #16]
}
 80020be:	0018      	movs	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b006      	add	sp, #24
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			; (mov r8, r8)
 80020c8:	40021000 	.word	0x40021000
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200

080020d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	20000000 	.word	0x20000000

080020e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80020ec:	f7ff fff2 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f0:	0004      	movs	r4, r0
 80020f2:	f7ff fb39 	bl	8001768 <LL_RCC_GetAPB1Prescaler>
 80020f6:	0003      	movs	r3, r0
 80020f8:	0b1a      	lsrs	r2, r3, #12
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	58d3      	ldr	r3, [r2, r3]
 8002100:	221f      	movs	r2, #31
 8002102:	4013      	ands	r3, r2
 8002104:	40dc      	lsrs	r4, r3
 8002106:	0023      	movs	r3, r4
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bdb0      	pop	{r4, r5, r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	08003eac 	.word	0x08003eac

08002114 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0a8      	b.n	8002278 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	2382      	movs	r3, #130	; 0x82
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	61da      	str	r2, [r3, #28]
 8002140:	e005      	b.n	800214e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	225d      	movs	r2, #93	; 0x5d
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d107      	bne.n	8002170 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	225c      	movs	r2, #92	; 0x5c
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f7fe fdfe 	bl	8000d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	225d      	movs	r2, #93	; 0x5d
 8002174:	2102      	movs	r1, #2
 8002176:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2140      	movs	r1, #64	; 0x40
 8002184:	438a      	bics	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	23e0      	movs	r3, #224	; 0xe0
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	429a      	cmp	r2, r3
 8002192:	d902      	bls.n	800219a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e002      	b.n	80021a0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	015b      	lsls	r3, r3, #5
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68da      	ldr	r2, [r3, #12]
 80021a4:	23f0      	movs	r3, #240	; 0xf0
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d008      	beq.n	80021be <HAL_SPI_Init+0xaa>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	23e0      	movs	r3, #224	; 0xe0
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d002      	beq.n	80021be <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	2382      	movs	r3, #130	; 0x82
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	401a      	ands	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	2384      	movs	r3, #132	; 0x84
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	400b      	ands	r3, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2102      	movs	r1, #2
 80021da:	400b      	ands	r3, r1
 80021dc:	431a      	orrs	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	2101      	movs	r1, #1
 80021e4:	400b      	ands	r3, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6999      	ldr	r1, [r3, #24]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	400b      	ands	r3, r1
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2138      	movs	r1, #56	; 0x38
 80021fa:	400b      	ands	r3, r1
 80021fc:	431a      	orrs	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	2180      	movs	r1, #128	; 0x80
 8002204:	400b      	ands	r3, r1
 8002206:	431a      	orrs	r2, r3
 8002208:	0011      	movs	r1, r2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	019b      	lsls	r3, r3, #6
 8002212:	401a      	ands	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	0c1b      	lsrs	r3, r3, #16
 8002222:	2204      	movs	r2, #4
 8002224:	401a      	ands	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222a:	2110      	movs	r1, #16
 800222c:	400b      	ands	r3, r1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	2108      	movs	r1, #8
 8002236:	400b      	ands	r3, r1
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68d9      	ldr	r1, [r3, #12]
 800223e:	23f0      	movs	r3, #240	; 0xf0
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	400b      	ands	r3, r1
 8002244:	431a      	orrs	r2, r3
 8002246:	0011      	movs	r1, r2
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	2380      	movs	r3, #128	; 0x80
 800224c:	015b      	lsls	r3, r3, #5
 800224e:	401a      	ands	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69da      	ldr	r2, [r3, #28]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4907      	ldr	r1, [pc, #28]	; (8002280 <HAL_SPI_Init+0x16c>)
 8002264:	400a      	ands	r2, r1
 8002266:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	225d      	movs	r2, #93	; 0x5d
 8002272:	2101      	movs	r1, #1
 8002274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}
 8002280:	fffff7ff 	.word	0xfffff7ff

08002284 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	1dbb      	adds	r3, r7, #6
 8002290:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002292:	2317      	movs	r3, #23
 8002294:	18fb      	adds	r3, r7, r3
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	225c      	movs	r2, #92	; 0x5c
 800229e:	5c9b      	ldrb	r3, [r3, r2]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <HAL_SPI_Transmit_IT+0x24>
 80022a4:	2302      	movs	r3, #2
 80022a6:	e07e      	b.n	80023a6 <HAL_SPI_Transmit_IT+0x122>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	225c      	movs	r2, #92	; 0x5c
 80022ac:	2101      	movs	r1, #1
 80022ae:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_SPI_Transmit_IT+0x3a>
 80022b6:	1dbb      	adds	r3, r7, #6
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d104      	bne.n	80022c8 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 80022be:	2317      	movs	r3, #23
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
    goto error;
 80022c6:	e067      	b.n	8002398 <HAL_SPI_Transmit_IT+0x114>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	225d      	movs	r2, #93	; 0x5d
 80022cc:	5c9b      	ldrb	r3, [r3, r2]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d004      	beq.n	80022de <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80022d4:	2317      	movs	r3, #23
 80022d6:	18fb      	adds	r3, r7, r3
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
    goto error;
 80022dc:	e05c      	b.n	8002398 <HAL_SPI_Transmit_IT+0x114>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	225d      	movs	r2, #93	; 0x5d
 80022e2:	2103      	movs	r1, #3
 80022e4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1dba      	adds	r2, r7, #6
 80022f6:	8812      	ldrh	r2, [r2, #0]
 80022f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1dba      	adds	r2, r7, #6
 80022fe:	8812      	ldrh	r2, [r2, #0]
 8002300:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2244      	movs	r2, #68	; 0x44
 800230c:	2100      	movs	r1, #0
 800230e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2246      	movs	r2, #70	; 0x46
 8002314:	2100      	movs	r1, #0
 8002316:	5299      	strh	r1, [r3, r2]
  hspi->RxISR       = NULL;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	23e0      	movs	r3, #224	; 0xe0
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	429a      	cmp	r2, r3
 8002328:	d903      	bls.n	8002332 <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4a20      	ldr	r2, [pc, #128]	; (80023b0 <HAL_SPI_Transmit_IT+0x12c>)
 800232e:	651a      	str	r2, [r3, #80]	; 0x50
 8002330:	e002      	b.n	8002338 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_SPI_Transmit_IT+0x130>)
 8002336:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	429a      	cmp	r2, r3
 8002342:	d110      	bne.n	8002366 <HAL_SPI_Transmit_IT+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2140      	movs	r1, #64	; 0x40
 8002350:	438a      	bics	r2, r1
 8002352:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2180      	movs	r1, #128	; 0x80
 8002360:	01c9      	lsls	r1, r1, #7
 8002362:	430a      	orrs	r2, r1
 8002364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	21a0      	movs	r1, #160	; 0xa0
 8002372:	430a      	orrs	r2, r1
 8002374:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2240      	movs	r2, #64	; 0x40
 800237e:	4013      	ands	r3, r2
 8002380:	2b40      	cmp	r3, #64	; 0x40
 8002382:	d008      	beq.n	8002396 <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2140      	movs	r1, #64	; 0x40
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e000      	b.n	8002398 <HAL_SPI_Transmit_IT+0x114>
  }

error :
 8002396:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	225c      	movs	r2, #92	; 0x5c
 800239c:	2100      	movs	r1, #0
 800239e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80023a0:	2317      	movs	r3, #23
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	781b      	ldrb	r3, [r3, #0]
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b006      	add	sp, #24
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	08002639 	.word	0x08002639
 80023b4:	080025f1 	.word	0x080025f1

080023b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	001a      	movs	r2, r3
 80023d6:	2301      	movs	r3, #1
 80023d8:	4013      	ands	r3, r2
 80023da:	d10f      	bne.n	80023fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	2201      	movs	r2, #1
 80023e0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80023e2:	d00b      	beq.n	80023fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	099b      	lsrs	r3, r3, #6
 80023e8:	001a      	movs	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	d005      	beq.n	80023fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	0010      	movs	r0, r2
 80023f8:	4798      	blx	r3
    return;
 80023fa:	e0d5      	b.n	80025a8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	001a      	movs	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	4013      	ands	r3, r2
 8002406:	d00b      	beq.n	8002420 <HAL_SPI_IRQHandler+0x68>
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	09db      	lsrs	r3, r3, #7
 800240c:	001a      	movs	r2, r3
 800240e:	2301      	movs	r3, #1
 8002410:	4013      	ands	r3, r2
 8002412:	d005      	beq.n	8002420 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	0010      	movs	r0, r2
 800241c:	4798      	blx	r3
    return;
 800241e:	e0c3      	b.n	80025a8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	001a      	movs	r2, r3
 8002426:	2301      	movs	r3, #1
 8002428:	4013      	ands	r3, r2
 800242a:	d10c      	bne.n	8002446 <HAL_SPI_IRQHandler+0x8e>
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	099b      	lsrs	r3, r3, #6
 8002430:	001a      	movs	r2, r3
 8002432:	2301      	movs	r3, #1
 8002434:	4013      	ands	r3, r2
 8002436:	d106      	bne.n	8002446 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	001a      	movs	r2, r3
 800243e:	2301      	movs	r3, #1
 8002440:	4013      	ands	r3, r2
 8002442:	d100      	bne.n	8002446 <HAL_SPI_IRQHandler+0x8e>
 8002444:	e0b0      	b.n	80025a8 <HAL_SPI_IRQHandler+0x1f0>
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	095b      	lsrs	r3, r3, #5
 800244a:	001a      	movs	r2, r3
 800244c:	2301      	movs	r3, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d100      	bne.n	8002454 <HAL_SPI_IRQHandler+0x9c>
 8002452:	e0a9      	b.n	80025a8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	001a      	movs	r2, r3
 800245a:	2301      	movs	r3, #1
 800245c:	4013      	ands	r3, r2
 800245e:	d023      	beq.n	80024a8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	225d      	movs	r2, #93	; 0x5d
 8002464:	5c9b      	ldrb	r3, [r3, r2]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d011      	beq.n	8002490 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002470:	2204      	movs	r2, #4
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	e00b      	b.n	80024a8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002490:	2300      	movs	r3, #0
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
        return;
 80024a6:	e07f      	b.n	80025a8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	001a      	movs	r2, r3
 80024ae:	2301      	movs	r3, #1
 80024b0:	4013      	ands	r3, r2
 80024b2:	d014      	beq.n	80024de <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024b8:	2201      	movs	r2, #1
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2140      	movs	r1, #64	; 0x40
 80024d8:	438a      	bics	r2, r1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	0a1b      	lsrs	r3, r3, #8
 80024e2:	001a      	movs	r2, r3
 80024e4:	2301      	movs	r3, #1
 80024e6:	4013      	ands	r3, r2
 80024e8:	d00c      	beq.n	8002504 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ee:	2208      	movs	r2, #8
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002508:	2b00      	cmp	r3, #0
 800250a:	d04c      	beq.n	80025a6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	21e0      	movs	r1, #224	; 0xe0
 8002518:	438a      	bics	r2, r1
 800251a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	225d      	movs	r2, #93	; 0x5d
 8002520:	2101      	movs	r1, #1
 8002522:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2202      	movs	r2, #2
 8002528:	4013      	ands	r3, r2
 800252a:	d103      	bne.n	8002534 <HAL_SPI_IRQHandler+0x17c>
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	2201      	movs	r2, #1
 8002530:	4013      	ands	r3, r2
 8002532:	d032      	beq.n	800259a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2103      	movs	r1, #3
 8002540:	438a      	bics	r2, r1
 8002542:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	2b00      	cmp	r3, #0
 800254a:	d010      	beq.n	800256e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002550:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <HAL_SPI_IRQHandler+0x1f8>)
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	0018      	movs	r0, r3
 800255a:	f7fe fed9 	bl	8001310 <HAL_DMA_Abort_IT>
 800255e:	1e03      	subs	r3, r0, #0
 8002560:	d005      	beq.n	800256e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	2b00      	cmp	r3, #0
 8002574:	d016      	beq.n	80025a4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257a:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_SPI_IRQHandler+0x1f8>)
 800257c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	0018      	movs	r0, r3
 8002584:	f7fe fec4 	bl	8001310 <HAL_DMA_Abort_IT>
 8002588:	1e03      	subs	r3, r0, #0
 800258a:	d00b      	beq.n	80025a4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002590:	2240      	movs	r2, #64	; 0x40
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002598:	e004      	b.n	80025a4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	0018      	movs	r0, r3
 800259e:	f000 f809 	bl	80025b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80025a2:	e000      	b.n	80025a6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80025a4:	46c0      	nop			; (mov r8, r8)
    return;
 80025a6:	46c0      	nop			; (mov r8, r8)
  }
}
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b008      	add	sp, #32
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	46c0      	nop			; (mov r8, r8)
 80025b0:	080025c5 	.word	0x080025c5

080025b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80025bc:	46c0      	nop			; (mov r8, r8)
 80025be:	46bd      	mov	sp, r7
 80025c0:	b002      	add	sp, #8
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2246      	movs	r2, #70	; 0x46
 80025d6:	2100      	movs	r1, #0
 80025d8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7ff ffe6 	bl	80025b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80025e8:	46c0      	nop			; (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b004      	add	sp, #16
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	f000 f99e 	bl	800296c <SPI_CloseTx_ISR>
  }
}
 8002630:	46c0      	nop			; (mov r8, r8)
 8002632:	46bd      	mov	sp, r7
 8002634:	b002      	add	sp, #8
 8002636:	bd80      	pop	{r7, pc}

08002638 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002650:	1c9a      	adds	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265a:	b29b      	uxth	r3, r3
 800265c:	3b01      	subs	r3, #1
 800265e:	b29a      	uxth	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002668:	b29b      	uxth	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f97b 	bl	800296c <SPI_CloseTx_ISR>
  }
}
 8002676:	46c0      	nop			; (mov r8, r8)
 8002678:	46bd      	mov	sp, r7
 800267a:	b002      	add	sp, #8
 800267c:	bd80      	pop	{r7, pc}
	...

08002680 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	1dfb      	adds	r3, r7, #7
 800268e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002690:	f7fe fd56 	bl	8001140 <HAL_GetTick>
 8002694:	0002      	movs	r2, r0
 8002696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002698:	1a9b      	subs	r3, r3, r2
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	18d3      	adds	r3, r2, r3
 800269e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80026a0:	f7fe fd4e 	bl	8001140 <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	015b      	lsls	r3, r3, #5
 80026ae:	0d1b      	lsrs	r3, r3, #20
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	4353      	muls	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026b6:	e058      	b.n	800276a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	3301      	adds	r3, #1
 80026bc:	d055      	beq.n	800276a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80026be:	f7fe fd3f 	bl	8001140 <HAL_GetTick>
 80026c2:	0002      	movs	r2, r0
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	69fa      	ldr	r2, [r7, #28]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d902      	bls.n	80026d4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d142      	bne.n	800275a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	21e0      	movs	r1, #224	; 0xe0
 80026e0:	438a      	bics	r2, r1
 80026e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	2382      	movs	r3, #130	; 0x82
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d113      	bne.n	8002718 <SPI_WaitFlagStateUntilTimeout+0x98>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d005      	beq.n	8002708 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	429a      	cmp	r2, r3
 8002706:	d107      	bne.n	8002718 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2140      	movs	r1, #64	; 0x40
 8002714:	438a      	bics	r2, r1
 8002716:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	019b      	lsls	r3, r3, #6
 8002720:	429a      	cmp	r2, r3
 8002722:	d110      	bne.n	8002746 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	491a      	ldr	r1, [pc, #104]	; (8002798 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002730:	400a      	ands	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2180      	movs	r1, #128	; 0x80
 8002740:	0189      	lsls	r1, r1, #6
 8002742:	430a      	orrs	r2, r1
 8002744:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	225d      	movs	r2, #93	; 0x5d
 800274a:	2101      	movs	r1, #1
 800274c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	225c      	movs	r2, #92	; 0x5c
 8002752:	2100      	movs	r1, #0
 8002754:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e017      	b.n	800278a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	3b01      	subs	r3, #1
 8002768:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	4013      	ands	r3, r2
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	425a      	negs	r2, r3
 800277a:	4153      	adcs	r3, r2
 800277c:	b2db      	uxtb	r3, r3
 800277e:	001a      	movs	r2, r3
 8002780:	1dfb      	adds	r3, r7, #7
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d197      	bne.n	80026b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b008      	add	sp, #32
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	20000000 	.word	0x20000000
 8002798:	ffffdfff 	.word	0xffffdfff

0800279c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	; 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80027aa:	2317      	movs	r3, #23
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80027b2:	f7fe fcc5 	bl	8001140 <HAL_GetTick>
 80027b6:	0002      	movs	r2, r0
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	18d3      	adds	r3, r2, r3
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80027c2:	f7fe fcbd 	bl	8001140 <HAL_GetTick>
 80027c6:	0003      	movs	r3, r0
 80027c8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	330c      	adds	r3, #12
 80027d0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80027d2:	4b41      	ldr	r3, [pc, #260]	; (80028d8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	0013      	movs	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	189b      	adds	r3, r3, r2
 80027dc:	00da      	lsls	r2, r3, #3
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	0d1b      	lsrs	r3, r3, #20
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	4353      	muls	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80027e8:	e068      	b.n	80028bc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	23c0      	movs	r3, #192	; 0xc0
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d10a      	bne.n	800280a <SPI_WaitFifoStateUntilTimeout+0x6e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d107      	bne.n	800280a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	2117      	movs	r1, #23
 8002802:	187b      	adds	r3, r7, r1
 8002804:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002806:	187b      	adds	r3, r7, r1
 8002808:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	3301      	adds	r3, #1
 800280e:	d055      	beq.n	80028bc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002810:	f7fe fc96 	bl	8001140 <HAL_GetTick>
 8002814:	0002      	movs	r2, r0
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281c:	429a      	cmp	r2, r3
 800281e:	d902      	bls.n	8002826 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d142      	bne.n	80028ac <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	21e0      	movs	r1, #224	; 0xe0
 8002832:	438a      	bics	r2, r1
 8002834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	2382      	movs	r3, #130	; 0x82
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	429a      	cmp	r2, r3
 8002840:	d113      	bne.n	800286a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	429a      	cmp	r2, r3
 800284c:	d005      	beq.n	800285a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	429a      	cmp	r2, r3
 8002858:	d107      	bne.n	800286a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2140      	movs	r1, #64	; 0x40
 8002866:	438a      	bics	r2, r1
 8002868:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	019b      	lsls	r3, r3, #6
 8002872:	429a      	cmp	r2, r3
 8002874:	d110      	bne.n	8002898 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4916      	ldr	r1, [pc, #88]	; (80028dc <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002882:	400a      	ands	r2, r1
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2180      	movs	r1, #128	; 0x80
 8002892:	0189      	lsls	r1, r1, #6
 8002894:	430a      	orrs	r2, r1
 8002896:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	225d      	movs	r2, #93	; 0x5d
 800289c:	2101      	movs	r1, #1
 800289e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	225c      	movs	r2, #92	; 0x5c
 80028a4:	2100      	movs	r1, #0
 80028a6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e010      	b.n	80028ce <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d18e      	bne.n	80027ea <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b00a      	add	sp, #40	; 0x28
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	20000000 	.word	0x20000000
 80028dc:	ffffdfff 	.word	0xffffdfff

080028e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	23c0      	movs	r3, #192	; 0xc0
 80028f0:	0159      	lsls	r1, r3, #5
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	0013      	movs	r3, r2
 80028fa:	2200      	movs	r2, #0
 80028fc:	f7ff ff4e 	bl	800279c <SPI_WaitFifoStateUntilTimeout>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d007      	beq.n	8002914 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002908:	2220      	movs	r2, #32
 800290a:	431a      	orrs	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e027      	b.n	8002964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	0013      	movs	r3, r2
 800291e:	2200      	movs	r2, #0
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	f7ff fead 	bl	8002680 <SPI_WaitFlagStateUntilTimeout>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d007      	beq.n	800293a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292e:	2220      	movs	r2, #32
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e014      	b.n	8002964 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	23c0      	movs	r3, #192	; 0xc0
 800293e:	00d9      	lsls	r1, r3, #3
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	0013      	movs	r3, r2
 8002948:	2200      	movs	r2, #0
 800294a:	f7ff ff27 	bl	800279c <SPI_WaitFifoStateUntilTimeout>
 800294e:	1e03      	subs	r3, r0, #0
 8002950:	d007      	beq.n	8002962 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002956:	2220      	movs	r2, #32
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e000      	b.n	8002964 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b004      	add	sp, #16
 800296a:	bd80      	pop	{r7, pc}

0800296c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002974:	f7fe fbe4 	bl	8001140 <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685a      	ldr	r2, [r3, #4]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	21a0      	movs	r1, #160	; 0xa0
 8002988:	438a      	bics	r2, r1
 800298a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2164      	movs	r1, #100	; 0x64
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff ffa4 	bl	80028e0 <SPI_EndRxTxTransaction>
 8002998:	1e03      	subs	r3, r0, #0
 800299a:	d005      	beq.n	80029a8 <SPI_CloseTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a0:	2220      	movs	r2, #32
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <SPI_CloseTx_ISR+0x5a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b0:	2300      	movs	r3, #0
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	60bb      	str	r3, [r7, #8]
 80029c4:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	225d      	movs	r2, #93	; 0x5d
 80029ca:	2101      	movs	r1, #1
 80029cc:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d004      	beq.n	80029e0 <SPI_CloseTx_ISR+0x74>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff fdeb 	bl	80025b4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80029de:	e003      	b.n	80029e8 <SPI_CloseTx_ISR+0x7c>
    HAL_SPI_TxCpltCallback(hspi);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f001 f982 	bl	8003cec <HAL_SPI_TxCpltCallback>
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b004      	add	sp, #16
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d101      	bne.n	8002a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e04a      	b.n	8002a98 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	223d      	movs	r2, #61	; 0x3d
 8002a06:	5c9b      	ldrb	r3, [r3, r2]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d107      	bne.n	8002a1e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	223c      	movs	r2, #60	; 0x3c
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f7fe fa57 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	223d      	movs	r2, #61	; 0x3d
 8002a22:	2102      	movs	r1, #2
 8002a24:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	0019      	movs	r1, r3
 8002a30:	0010      	movs	r0, r2
 8002a32:	f000 f881 	bl	8002b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2248      	movs	r2, #72	; 0x48
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	223e      	movs	r2, #62	; 0x3e
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	223f      	movs	r2, #63	; 0x3f
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2240      	movs	r2, #64	; 0x40
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2241      	movs	r2, #65	; 0x41
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2242      	movs	r2, #66	; 0x42
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2243      	movs	r2, #67	; 0x43
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2244      	movs	r2, #68	; 0x44
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2245      	movs	r2, #69	; 0x45
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2246      	movs	r2, #70	; 0x46
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2247      	movs	r2, #71	; 0x47
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	223d      	movs	r2, #61	; 0x3d
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	223d      	movs	r2, #61	; 0x3d
 8002aac:	5c9b      	ldrb	r3, [r3, r2]
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d001      	beq.n	8002ab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e035      	b.n	8002b24 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	223d      	movs	r2, #61	; 0x3d
 8002abc:	2102      	movs	r1, #2
 8002abe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_TIM_Base_Start+0x8c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00a      	beq.n	8002ae0 <HAL_TIM_Base_Start+0x40>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	05db      	lsls	r3, r3, #23
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d004      	beq.n	8002ae0 <HAL_TIM_Base_Start+0x40>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <HAL_TIM_Base_Start+0x90>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d116      	bne.n	8002b0e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <HAL_TIM_Base_Start+0x94>)
 8002ae8:	4013      	ands	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d016      	beq.n	8002b20 <HAL_TIM_Base_Start+0x80>
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	025b      	lsls	r3, r3, #9
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d011      	beq.n	8002b20 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2101      	movs	r1, #1
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b0c:	e008      	b.n	8002b20 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2101      	movs	r1, #1
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e000      	b.n	8002b22 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b20:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	0018      	movs	r0, r3
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b004      	add	sp, #16
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40012c00 	.word	0x40012c00
 8002b30:	40000400 	.word	0x40000400
 8002b34:	00010007 	.word	0x00010007

08002b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a30      	ldr	r2, [pc, #192]	; (8002c0c <TIM_Base_SetConfig+0xd4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d008      	beq.n	8002b62 <TIM_Base_SetConfig+0x2a>
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	05db      	lsls	r3, r3, #23
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d003      	beq.n	8002b62 <TIM_Base_SetConfig+0x2a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a2c      	ldr	r2, [pc, #176]	; (8002c10 <TIM_Base_SetConfig+0xd8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d108      	bne.n	8002b74 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2270      	movs	r2, #112	; 0x70
 8002b66:	4393      	bics	r3, r2
 8002b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a25      	ldr	r2, [pc, #148]	; (8002c0c <TIM_Base_SetConfig+0xd4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d014      	beq.n	8002ba6 <TIM_Base_SetConfig+0x6e>
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	05db      	lsls	r3, r3, #23
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d00f      	beq.n	8002ba6 <TIM_Base_SetConfig+0x6e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <TIM_Base_SetConfig+0xd8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <TIM_Base_SetConfig+0x6e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <TIM_Base_SetConfig+0xdc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d007      	beq.n	8002ba6 <TIM_Base_SetConfig+0x6e>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <TIM_Base_SetConfig+0xe0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d003      	beq.n	8002ba6 <TIM_Base_SetConfig+0x6e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <TIM_Base_SetConfig+0xe4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d108      	bne.n	8002bb8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <TIM_Base_SetConfig+0xe8>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	4393      	bics	r3, r2
 8002bbe:	001a      	movs	r2, r3
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	689a      	ldr	r2, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a0a      	ldr	r2, [pc, #40]	; (8002c0c <TIM_Base_SetConfig+0xd4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <TIM_Base_SetConfig+0xbe>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a0b      	ldr	r2, [pc, #44]	; (8002c18 <TIM_Base_SetConfig+0xe0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d003      	beq.n	8002bf6 <TIM_Base_SetConfig+0xbe>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <TIM_Base_SetConfig+0xe4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d103      	bne.n	8002bfe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	615a      	str	r2, [r3, #20]
}
 8002c04:	46c0      	nop			; (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b004      	add	sp, #16
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40002000 	.word	0x40002000
 8002c18:	40014400 	.word	0x40014400
 8002c1c:	40014800 	.word	0x40014800
 8002c20:	fffffcff 	.word	0xfffffcff

08002c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e046      	b.n	8002cc4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2284      	movs	r2, #132	; 0x84
 8002c3a:	589b      	ldr	r3, [r3, r2]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2280      	movs	r2, #128	; 0x80
 8002c44:	2100      	movs	r1, #0
 8002c46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f7fe f95e 	bl	8000f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2284      	movs	r2, #132	; 0x84
 8002c54:	2124      	movs	r1, #36	; 0x24
 8002c56:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2101      	movs	r1, #1
 8002c64:	438a      	bics	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f000 f830 	bl	8002cd0 <UART_SetConfig>
 8002c70:	0003      	movs	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d101      	bne.n	8002c7a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e024      	b.n	8002cc4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	0018      	movs	r0, r3
 8002c86:	f000 fab3 	bl	80031f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	490d      	ldr	r1, [pc, #52]	; (8002ccc <HAL_UART_Init+0xa8>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	212a      	movs	r1, #42	; 0x2a
 8002ca6:	438a      	bics	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 fb4b 	bl	8003358 <UART_CheckIdleState>
 8002cc2:	0003      	movs	r3, r0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	ffffb7ff 	.word	0xffffb7ff

08002cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b090      	sub	sp, #64	; 0x40
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cd8:	231a      	movs	r3, #26
 8002cda:	2220      	movs	r2, #32
 8002cdc:	4694      	mov	ip, r2
 8002cde:	44bc      	add	ip, r7
 8002ce0:	4463      	add	r3, ip
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4ac7      	ldr	r2, [pc, #796]	; (8003024 <UART_SetConfig+0x354>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	0019      	movs	r1, r3
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	4ac3      	ldr	r2, [pc, #780]	; (8003028 <UART_SetConfig+0x358>)
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	0018      	movs	r0, r3
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	68d9      	ldr	r1, [r3, #12]
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	0003      	movs	r3, r0
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4abc      	ldr	r2, [pc, #752]	; (800302c <UART_SetConfig+0x35c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d004      	beq.n	8002d48 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d44:	4313      	orrs	r3, r2
 8002d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	4ab8      	ldr	r2, [pc, #736]	; (8003030 <UART_SetConfig+0x360>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	0019      	movs	r1, r3
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	220f      	movs	r2, #15
 8002d66:	4393      	bics	r3, r2
 8002d68:	0018      	movs	r0, r3
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	0003      	movs	r3, r0
 8002d74:	430b      	orrs	r3, r1
 8002d76:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4aad      	ldr	r2, [pc, #692]	; (8003034 <UART_SetConfig+0x364>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d136      	bne.n	8002df0 <UART_SetConfig+0x120>
 8002d82:	4bad      	ldr	r3, [pc, #692]	; (8003038 <UART_SetConfig+0x368>)
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	2203      	movs	r2, #3
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b03      	cmp	r3, #3
 8002d8c:	d020      	beq.n	8002dd0 <UART_SetConfig+0x100>
 8002d8e:	d827      	bhi.n	8002de0 <UART_SetConfig+0x110>
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d00d      	beq.n	8002db0 <UART_SetConfig+0xe0>
 8002d94:	d824      	bhi.n	8002de0 <UART_SetConfig+0x110>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d002      	beq.n	8002da0 <UART_SetConfig+0xd0>
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d010      	beq.n	8002dc0 <UART_SetConfig+0xf0>
 8002d9e:	e01f      	b.n	8002de0 <UART_SetConfig+0x110>
 8002da0:	231b      	movs	r3, #27
 8002da2:	2220      	movs	r2, #32
 8002da4:	4694      	mov	ip, r2
 8002da6:	44bc      	add	ip, r7
 8002da8:	4463      	add	r3, ip
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
 8002dae:	e07c      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002db0:	231b      	movs	r3, #27
 8002db2:	2220      	movs	r2, #32
 8002db4:	4694      	mov	ip, r2
 8002db6:	44bc      	add	ip, r7
 8002db8:	4463      	add	r3, ip
 8002dba:	2202      	movs	r2, #2
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	e074      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002dc0:	231b      	movs	r3, #27
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	4694      	mov	ip, r2
 8002dc6:	44bc      	add	ip, r7
 8002dc8:	4463      	add	r3, ip
 8002dca:	2204      	movs	r2, #4
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e06c      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002dd0:	231b      	movs	r3, #27
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	4694      	mov	ip, r2
 8002dd6:	44bc      	add	ip, r7
 8002dd8:	4463      	add	r3, ip
 8002dda:	2208      	movs	r2, #8
 8002ddc:	701a      	strb	r2, [r3, #0]
 8002dde:	e064      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002de0:	231b      	movs	r3, #27
 8002de2:	2220      	movs	r2, #32
 8002de4:	4694      	mov	ip, r2
 8002de6:	44bc      	add	ip, r7
 8002de8:	4463      	add	r3, ip
 8002dea:	2210      	movs	r2, #16
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e05c      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a91      	ldr	r2, [pc, #580]	; (800303c <UART_SetConfig+0x36c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d107      	bne.n	8002e0a <UART_SetConfig+0x13a>
 8002dfa:	231b      	movs	r3, #27
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	4694      	mov	ip, r2
 8002e00:	44bc      	add	ip, r7
 8002e02:	4463      	add	r3, ip
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e04f      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a87      	ldr	r2, [pc, #540]	; (800302c <UART_SetConfig+0x35c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d143      	bne.n	8002e9c <UART_SetConfig+0x1cc>
 8002e14:	4b88      	ldr	r3, [pc, #544]	; (8003038 <UART_SetConfig+0x368>)
 8002e16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e18:	23c0      	movs	r3, #192	; 0xc0
 8002e1a:	011b      	lsls	r3, r3, #4
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	22c0      	movs	r2, #192	; 0xc0
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d02a      	beq.n	8002e7c <UART_SetConfig+0x1ac>
 8002e26:	22c0      	movs	r2, #192	; 0xc0
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d82e      	bhi.n	8002e8c <UART_SetConfig+0x1bc>
 8002e2e:	2280      	movs	r2, #128	; 0x80
 8002e30:	0112      	lsls	r2, r2, #4
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d012      	beq.n	8002e5c <UART_SetConfig+0x18c>
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	0112      	lsls	r2, r2, #4
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d826      	bhi.n	8002e8c <UART_SetConfig+0x1bc>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d004      	beq.n	8002e4c <UART_SetConfig+0x17c>
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	00d2      	lsls	r2, r2, #3
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d010      	beq.n	8002e6c <UART_SetConfig+0x19c>
 8002e4a:	e01f      	b.n	8002e8c <UART_SetConfig+0x1bc>
 8002e4c:	231b      	movs	r3, #27
 8002e4e:	2220      	movs	r2, #32
 8002e50:	4694      	mov	ip, r2
 8002e52:	44bc      	add	ip, r7
 8002e54:	4463      	add	r3, ip
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
 8002e5a:	e026      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002e5c:	231b      	movs	r3, #27
 8002e5e:	2220      	movs	r2, #32
 8002e60:	4694      	mov	ip, r2
 8002e62:	44bc      	add	ip, r7
 8002e64:	4463      	add	r3, ip
 8002e66:	2202      	movs	r2, #2
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	e01e      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002e6c:	231b      	movs	r3, #27
 8002e6e:	2220      	movs	r2, #32
 8002e70:	4694      	mov	ip, r2
 8002e72:	44bc      	add	ip, r7
 8002e74:	4463      	add	r3, ip
 8002e76:	2204      	movs	r2, #4
 8002e78:	701a      	strb	r2, [r3, #0]
 8002e7a:	e016      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002e7c:	231b      	movs	r3, #27
 8002e7e:	2220      	movs	r2, #32
 8002e80:	4694      	mov	ip, r2
 8002e82:	44bc      	add	ip, r7
 8002e84:	4463      	add	r3, ip
 8002e86:	2208      	movs	r2, #8
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e00e      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002e8c:	231b      	movs	r3, #27
 8002e8e:	2220      	movs	r2, #32
 8002e90:	4694      	mov	ip, r2
 8002e92:	44bc      	add	ip, r7
 8002e94:	4463      	add	r3, ip
 8002e96:	2210      	movs	r2, #16
 8002e98:	701a      	strb	r2, [r3, #0]
 8002e9a:	e006      	b.n	8002eaa <UART_SetConfig+0x1da>
 8002e9c:	231b      	movs	r3, #27
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	4694      	mov	ip, r2
 8002ea2:	44bc      	add	ip, r7
 8002ea4:	4463      	add	r3, ip
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a5f      	ldr	r2, [pc, #380]	; (800302c <UART_SetConfig+0x35c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d000      	beq.n	8002eb6 <UART_SetConfig+0x1e6>
 8002eb4:	e096      	b.n	8002fe4 <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002eb6:	231b      	movs	r3, #27
 8002eb8:	2220      	movs	r2, #32
 8002eba:	4694      	mov	ip, r2
 8002ebc:	44bc      	add	ip, r7
 8002ebe:	4463      	add	r3, ip
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d015      	beq.n	8002ef2 <UART_SetConfig+0x222>
 8002ec6:	dc18      	bgt.n	8002efa <UART_SetConfig+0x22a>
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d00d      	beq.n	8002ee8 <UART_SetConfig+0x218>
 8002ecc:	dc15      	bgt.n	8002efa <UART_SetConfig+0x22a>
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <UART_SetConfig+0x208>
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d005      	beq.n	8002ee2 <UART_SetConfig+0x212>
 8002ed6:	e010      	b.n	8002efa <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed8:	f7ff f906 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8002edc:	0003      	movs	r3, r0
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ee0:	e015      	b.n	8002f0e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ee2:	4b57      	ldr	r3, [pc, #348]	; (8003040 <UART_SetConfig+0x370>)
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ee6:	e012      	b.n	8002f0e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee8:	f7ff f872 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8002eec:	0003      	movs	r3, r0
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ef0:	e00d      	b.n	8002f0e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ef8:	e009      	b.n	8002f0e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002efe:	231a      	movs	r3, #26
 8002f00:	2220      	movs	r2, #32
 8002f02:	4694      	mov	ip, r2
 8002f04:	44bc      	add	ip, r7
 8002f06:	4463      	add	r3, ip
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
        break;
 8002f0c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d100      	bne.n	8002f16 <UART_SetConfig+0x246>
 8002f14:	e14f      	b.n	80031b6 <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f1a:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <UART_SetConfig+0x374>)
 8002f1c:	0052      	lsls	r2, r2, #1
 8002f1e:	5ad3      	ldrh	r3, [r2, r3]
 8002f20:	0019      	movs	r1, r3
 8002f22:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f24:	f7fd f8ee 	bl	8000104 <__udivsi3>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	0013      	movs	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	189b      	adds	r3, r3, r2
 8002f36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d305      	bcc.n	8002f48 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d907      	bls.n	8002f58 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 8002f48:	231a      	movs	r3, #26
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	4694      	mov	ip, r2
 8002f4e:	44bc      	add	ip, r7
 8002f50:	4463      	add	r3, ip
 8002f52:	2201      	movs	r2, #1
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	e12e      	b.n	80031b6 <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f64:	4b37      	ldr	r3, [pc, #220]	; (8003044 <UART_SetConfig+0x374>)
 8002f66:	0052      	lsls	r2, r2, #1
 8002f68:	5ad3      	ldrh	r3, [r2, r3]
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	69b8      	ldr	r0, [r7, #24]
 8002f76:	69f9      	ldr	r1, [r7, #28]
 8002f78:	f7fd fa3a 	bl	80003f0 <__aeabi_uldivmod>
 8002f7c:	0002      	movs	r2, r0
 8002f7e:	000b      	movs	r3, r1
 8002f80:	0e11      	lsrs	r1, r2, #24
 8002f82:	021d      	lsls	r5, r3, #8
 8002f84:	430d      	orrs	r5, r1
 8002f86:	0214      	lsls	r4, r2, #8
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	085b      	lsrs	r3, r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
 8002f90:	2300      	movs	r3, #0
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68b8      	ldr	r0, [r7, #8]
 8002f96:	68f9      	ldr	r1, [r7, #12]
 8002f98:	1900      	adds	r0, r0, r4
 8002f9a:	4169      	adcs	r1, r5
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f7fd fa21 	bl	80003f0 <__aeabi_uldivmod>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	000b      	movs	r3, r1
 8002fb2:	0013      	movs	r3, r2
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb8:	23c0      	movs	r3, #192	; 0xc0
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d309      	bcc.n	8002fd4 <UART_SetConfig+0x304>
 8002fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	035b      	lsls	r3, r3, #13
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d204      	bcs.n	8002fd4 <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	e0f0      	b.n	80031b6 <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 8002fd4:	231a      	movs	r3, #26
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	4694      	mov	ip, r2
 8002fda:	44bc      	add	ip, r7
 8002fdc:	4463      	add	r3, ip
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
 8002fe2:	e0e8      	b.n	80031b6 <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	69da      	ldr	r2, [r3, #28]
 8002fe8:	2380      	movs	r3, #128	; 0x80
 8002fea:	021b      	lsls	r3, r3, #8
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d000      	beq.n	8002ff2 <UART_SetConfig+0x322>
 8002ff0:	e086      	b.n	8003100 <UART_SetConfig+0x430>
  {
    switch (clocksource)
 8002ff2:	231b      	movs	r3, #27
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	4694      	mov	ip, r2
 8002ff8:	44bc      	add	ip, r7
 8002ffa:	4463      	add	r3, ip
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b08      	cmp	r3, #8
 8003000:	d027      	beq.n	8003052 <UART_SetConfig+0x382>
 8003002:	dc2a      	bgt.n	800305a <UART_SetConfig+0x38a>
 8003004:	2b04      	cmp	r3, #4
 8003006:	d01f      	beq.n	8003048 <UART_SetConfig+0x378>
 8003008:	dc27      	bgt.n	800305a <UART_SetConfig+0x38a>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <UART_SetConfig+0x344>
 800300e:	2b02      	cmp	r3, #2
 8003010:	d005      	beq.n	800301e <UART_SetConfig+0x34e>
 8003012:	e022      	b.n	800305a <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003014:	f7ff f868 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8003018:	0003      	movs	r3, r0
 800301a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800301c:	e027      	b.n	800306e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <UART_SetConfig+0x370>)
 8003020:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003022:	e024      	b.n	800306e <UART_SetConfig+0x39e>
 8003024:	cfff69f3 	.word	0xcfff69f3
 8003028:	ffffcfff 	.word	0xffffcfff
 800302c:	40008000 	.word	0x40008000
 8003030:	11fff4ff 	.word	0x11fff4ff
 8003034:	40013800 	.word	0x40013800
 8003038:	40021000 	.word	0x40021000
 800303c:	40004400 	.word	0x40004400
 8003040:	00f42400 	.word	0x00f42400
 8003044:	08003ecc 	.word	0x08003ecc
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003048:	f7fe ffc2 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 800304c:	0003      	movs	r3, r0
 800304e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003050:	e00d      	b.n	800306e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003058:	e009      	b.n	800306e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800305e:	231a      	movs	r3, #26
 8003060:	2220      	movs	r2, #32
 8003062:	4694      	mov	ip, r2
 8003064:	44bc      	add	ip, r7
 8003066:	4463      	add	r3, ip
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
        break;
 800306c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800306e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003070:	2b00      	cmp	r3, #0
 8003072:	d100      	bne.n	8003076 <UART_SetConfig+0x3a6>
 8003074:	e09f      	b.n	80031b6 <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800307a:	4b5b      	ldr	r3, [pc, #364]	; (80031e8 <UART_SetConfig+0x518>)
 800307c:	0052      	lsls	r2, r2, #1
 800307e:	5ad3      	ldrh	r3, [r2, r3]
 8003080:	0019      	movs	r1, r3
 8003082:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003084:	f7fd f83e 	bl	8000104 <__udivsi3>
 8003088:	0003      	movs	r3, r0
 800308a:	005a      	lsls	r2, r3, #1
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	18d2      	adds	r2, r2, r3
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	0019      	movs	r1, r3
 800309a:	0010      	movs	r0, r2
 800309c:	f7fd f832 	bl	8000104 <__udivsi3>
 80030a0:	0003      	movs	r3, r0
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	2b0f      	cmp	r3, #15
 80030aa:	d921      	bls.n	80030f0 <UART_SetConfig+0x420>
 80030ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	025b      	lsls	r3, r3, #9
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d21c      	bcs.n	80030f0 <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	200e      	movs	r0, #14
 80030bc:	2420      	movs	r4, #32
 80030be:	193b      	adds	r3, r7, r4
 80030c0:	181b      	adds	r3, r3, r0
 80030c2:	210f      	movs	r1, #15
 80030c4:	438a      	bics	r2, r1
 80030c6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	085b      	lsrs	r3, r3, #1
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2207      	movs	r2, #7
 80030d0:	4013      	ands	r3, r2
 80030d2:	b299      	uxth	r1, r3
 80030d4:	193b      	adds	r3, r7, r4
 80030d6:	181b      	adds	r3, r3, r0
 80030d8:	193a      	adds	r2, r7, r4
 80030da:	1812      	adds	r2, r2, r0
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	193a      	adds	r2, r7, r4
 80030e8:	1812      	adds	r2, r2, r0
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	e062      	b.n	80031b6 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 80030f0:	231a      	movs	r3, #26
 80030f2:	2220      	movs	r2, #32
 80030f4:	4694      	mov	ip, r2
 80030f6:	44bc      	add	ip, r7
 80030f8:	4463      	add	r3, ip
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e05a      	b.n	80031b6 <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003100:	231b      	movs	r3, #27
 8003102:	2220      	movs	r2, #32
 8003104:	4694      	mov	ip, r2
 8003106:	44bc      	add	ip, r7
 8003108:	4463      	add	r3, ip
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d015      	beq.n	800313c <UART_SetConfig+0x46c>
 8003110:	dc18      	bgt.n	8003144 <UART_SetConfig+0x474>
 8003112:	2b04      	cmp	r3, #4
 8003114:	d00d      	beq.n	8003132 <UART_SetConfig+0x462>
 8003116:	dc15      	bgt.n	8003144 <UART_SetConfig+0x474>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <UART_SetConfig+0x452>
 800311c:	2b02      	cmp	r3, #2
 800311e:	d005      	beq.n	800312c <UART_SetConfig+0x45c>
 8003120:	e010      	b.n	8003144 <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003122:	f7fe ffe1 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8003126:	0003      	movs	r3, r0
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800312a:	e015      	b.n	8003158 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800312c:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <UART_SetConfig+0x51c>)
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003130:	e012      	b.n	8003158 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003132:	f7fe ff4d 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003136:	0003      	movs	r3, r0
 8003138:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800313a:	e00d      	b.n	8003158 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003142:	e009      	b.n	8003158 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003148:	231a      	movs	r3, #26
 800314a:	2220      	movs	r2, #32
 800314c:	4694      	mov	ip, r2
 800314e:	44bc      	add	ip, r7
 8003150:	4463      	add	r3, ip
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
        break;
 8003156:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800315a:	2b00      	cmp	r3, #0
 800315c:	d02b      	beq.n	80031b6 <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <UART_SetConfig+0x518>)
 8003164:	0052      	lsls	r2, r2, #1
 8003166:	5ad3      	ldrh	r3, [r2, r3]
 8003168:	0019      	movs	r1, r3
 800316a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800316c:	f7fc ffca 	bl	8000104 <__udivsi3>
 8003170:	0003      	movs	r3, r0
 8003172:	001a      	movs	r2, r3
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	18d2      	adds	r2, r2, r3
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	0019      	movs	r1, r3
 8003182:	0010      	movs	r0, r2
 8003184:	f7fc ffbe 	bl	8000104 <__udivsi3>
 8003188:	0003      	movs	r3, r0
 800318a:	b29b      	uxth	r3, r3
 800318c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d909      	bls.n	80031a8 <UART_SetConfig+0x4d8>
 8003194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	025b      	lsls	r3, r3, #9
 800319a:	429a      	cmp	r2, r3
 800319c:	d204      	bcs.n	80031a8 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031a4:	60da      	str	r2, [r3, #12]
 80031a6:	e006      	b.n	80031b6 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 80031a8:	231a      	movs	r3, #26
 80031aa:	2220      	movs	r2, #32
 80031ac:	4694      	mov	ip, r2
 80031ae:	44bc      	add	ip, r7
 80031b0:	4463      	add	r3, ip
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	226a      	movs	r2, #106	; 0x6a
 80031ba:	2101      	movs	r1, #1
 80031bc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	2268      	movs	r2, #104	; 0x68
 80031c2:	2101      	movs	r1, #1
 80031c4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	2200      	movs	r2, #0
 80031ca:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	2200      	movs	r2, #0
 80031d0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80031d2:	231a      	movs	r3, #26
 80031d4:	2220      	movs	r2, #32
 80031d6:	4694      	mov	ip, r2
 80031d8:	44bc      	add	ip, r7
 80031da:	4463      	add	r3, ip
 80031dc:	781b      	ldrb	r3, [r3, #0]
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b010      	add	sp, #64	; 0x40
 80031e4:	bdb0      	pop	{r4, r5, r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	08003ecc 	.word	0x08003ecc
 80031ec:	00f42400 	.word	0x00f42400

080031f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	2201      	movs	r2, #1
 80031fe:	4013      	ands	r3, r2
 8003200:	d00b      	beq.n	800321a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	4a4a      	ldr	r2, [pc, #296]	; (8003334 <UART_AdvFeatureConfig+0x144>)
 800320a:	4013      	ands	r3, r2
 800320c:	0019      	movs	r1, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	430a      	orrs	r2, r1
 8003218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	2202      	movs	r2, #2
 8003220:	4013      	ands	r3, r2
 8003222:	d00b      	beq.n	800323c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	4a43      	ldr	r2, [pc, #268]	; (8003338 <UART_AdvFeatureConfig+0x148>)
 800322c:	4013      	ands	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	2204      	movs	r2, #4
 8003242:	4013      	ands	r3, r2
 8003244:	d00b      	beq.n	800325e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	4a3b      	ldr	r2, [pc, #236]	; (800333c <UART_AdvFeatureConfig+0x14c>)
 800324e:	4013      	ands	r3, r2
 8003250:	0019      	movs	r1, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	2208      	movs	r2, #8
 8003264:	4013      	ands	r3, r2
 8003266:	d00b      	beq.n	8003280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a34      	ldr	r2, [pc, #208]	; (8003340 <UART_AdvFeatureConfig+0x150>)
 8003270:	4013      	ands	r3, r2
 8003272:	0019      	movs	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	2210      	movs	r2, #16
 8003286:	4013      	ands	r3, r2
 8003288:	d00b      	beq.n	80032a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	4a2c      	ldr	r2, [pc, #176]	; (8003344 <UART_AdvFeatureConfig+0x154>)
 8003292:	4013      	ands	r3, r2
 8003294:	0019      	movs	r1, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	2220      	movs	r2, #32
 80032a8:	4013      	ands	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	4a25      	ldr	r2, [pc, #148]	; (8003348 <UART_AdvFeatureConfig+0x158>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	2240      	movs	r2, #64	; 0x40
 80032ca:	4013      	ands	r3, r2
 80032cc:	d01d      	beq.n	800330a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a1d      	ldr	r2, [pc, #116]	; (800334c <UART_AdvFeatureConfig+0x15c>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	0019      	movs	r1, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	035b      	lsls	r3, r3, #13
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d10b      	bne.n	800330a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a15      	ldr	r2, [pc, #84]	; (8003350 <UART_AdvFeatureConfig+0x160>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	4013      	ands	r3, r2
 8003312:	d00b      	beq.n	800332c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <UART_AdvFeatureConfig+0x164>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	605a      	str	r2, [r3, #4]
  }
}
 800332c:	46c0      	nop			; (mov r8, r8)
 800332e:	46bd      	mov	sp, r7
 8003330:	b002      	add	sp, #8
 8003332:	bd80      	pop	{r7, pc}
 8003334:	fffdffff 	.word	0xfffdffff
 8003338:	fffeffff 	.word	0xfffeffff
 800333c:	fffbffff 	.word	0xfffbffff
 8003340:	ffff7fff 	.word	0xffff7fff
 8003344:	ffffefff 	.word	0xffffefff
 8003348:	ffffdfff 	.word	0xffffdfff
 800334c:	ffefffff 	.word	0xffefffff
 8003350:	ff9fffff 	.word	0xff9fffff
 8003354:	fff7ffff 	.word	0xfff7ffff

08003358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	228c      	movs	r2, #140	; 0x8c
 8003364:	2100      	movs	r1, #0
 8003366:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003368:	f7fd feea 	bl	8001140 <HAL_GetTick>
 800336c:	0003      	movs	r3, r0
 800336e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2208      	movs	r2, #8
 8003378:	4013      	ands	r3, r2
 800337a:	2b08      	cmp	r3, #8
 800337c:	d10c      	bne.n	8003398 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	0391      	lsls	r1, r2, #14
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4a18      	ldr	r2, [pc, #96]	; (80033e8 <UART_CheckIdleState+0x90>)
 8003388:	9200      	str	r2, [sp, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	f000 f82e 	bl	80033ec <UART_WaitOnFlagUntilTimeout>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d001      	beq.n	8003398 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e023      	b.n	80033e0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2204      	movs	r2, #4
 80033a0:	4013      	ands	r3, r2
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d10c      	bne.n	80033c0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2280      	movs	r2, #128	; 0x80
 80033aa:	03d1      	lsls	r1, r2, #15
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4a0e      	ldr	r2, [pc, #56]	; (80033e8 <UART_CheckIdleState+0x90>)
 80033b0:	9200      	str	r2, [sp, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f000 f81a 	bl	80033ec <UART_WaitOnFlagUntilTimeout>
 80033b8:	1e03      	subs	r3, r0, #0
 80033ba:	d001      	beq.n	80033c0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e00f      	b.n	80033e0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2284      	movs	r2, #132	; 0x84
 80033c4:	2120      	movs	r1, #32
 80033c6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2288      	movs	r2, #136	; 0x88
 80033cc:	2120      	movs	r1, #32
 80033ce:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2280      	movs	r2, #128	; 0x80
 80033da:	2100      	movs	r1, #0
 80033dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	0018      	movs	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	01ffffff 	.word	0x01ffffff

080033ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b094      	sub	sp, #80	; 0x50
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	1dfb      	adds	r3, r7, #7
 80033fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fc:	e0a7      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003400:	3301      	adds	r3, #1
 8003402:	d100      	bne.n	8003406 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003404:	e0a3      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003406:	f7fd fe9b 	bl	8001140 <HAL_GetTick>
 800340a:	0002      	movs	r2, r0
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003412:	429a      	cmp	r2, r3
 8003414:	d302      	bcc.n	800341c <UART_WaitOnFlagUntilTimeout+0x30>
 8003416:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003418:	2b00      	cmp	r3, #0
 800341a:	d13f      	bne.n	800349c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341c:	f3ef 8310 	mrs	r3, PRIMASK
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003422:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003424:	647b      	str	r3, [r7, #68]	; 0x44
 8003426:	2301      	movs	r3, #1
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	f383 8810 	msr	PRIMASK, r3
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	494e      	ldr	r1, [pc, #312]	; (8003578 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800343e:	400a      	ands	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003444:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	f383 8810 	msr	PRIMASK, r3
}
 800344c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344e:	f3ef 8310 	mrs	r3, PRIMASK
 8003452:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003456:	643b      	str	r3, [r7, #64]	; 0x40
 8003458:	2301      	movs	r3, #1
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	f383 8810 	msr	PRIMASK, r3
}
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2101      	movs	r1, #1
 8003470:	438a      	bics	r2, r1
 8003472:	609a      	str	r2, [r3, #8]
 8003474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800347a:	f383 8810 	msr	PRIMASK, r3
}
 800347e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2284      	movs	r2, #132	; 0x84
 8003484:	2120      	movs	r1, #32
 8003486:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2288      	movs	r2, #136	; 0x88
 800348c:	2120      	movs	r1, #32
 800348e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2280      	movs	r2, #128	; 0x80
 8003494:	2100      	movs	r1, #0
 8003496:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e069      	b.n	8003570 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2204      	movs	r2, #4
 80034a4:	4013      	ands	r3, r2
 80034a6:	d052      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	401a      	ands	r2, r3
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d148      	bne.n	800354e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ca:	613b      	str	r3, [r7, #16]
  return(result);
 80034cc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80034ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034d0:	2301      	movs	r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f383 8810 	msr	PRIMASK, r3
}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4924      	ldr	r1, [pc, #144]	; (8003578 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80034e8:	400a      	ands	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f8:	f3ef 8310 	mrs	r3, PRIMASK
 80034fc:	61fb      	str	r3, [r7, #28]
  return(result);
 80034fe:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003500:	64bb      	str	r3, [r7, #72]	; 0x48
 8003502:	2301      	movs	r3, #1
 8003504:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2101      	movs	r1, #1
 800351a:	438a      	bics	r2, r1
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2284      	movs	r2, #132	; 0x84
 800352e:	2120      	movs	r1, #32
 8003530:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2288      	movs	r2, #136	; 0x88
 8003536:	2120      	movs	r1, #32
 8003538:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	228c      	movs	r2, #140	; 0x8c
 800353e:	2120      	movs	r1, #32
 8003540:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2280      	movs	r2, #128	; 0x80
 8003546:	2100      	movs	r1, #0
 8003548:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e010      	b.n	8003570 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	425a      	negs	r2, r3
 800355e:	4153      	adcs	r3, r2
 8003560:	b2db      	uxtb	r3, r3
 8003562:	001a      	movs	r2, r3
 8003564:	1dfb      	adds	r3, r7, #7
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d100      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x182>
 800356c:	e747      	b.n	80033fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b014      	add	sp, #80	; 0x50
 8003576:	bd80      	pop	{r7, pc}
 8003578:	fffffe5f 	.word	0xfffffe5f

0800357c <IS31FL3743B_init>:
//
//	IS31FL3743B_SetDotColor(41, White, full);
//	IS31FL3743B_SetDotColor(44, White, full);
//	IS31FL3743B_SetDotColor(45, White, full);

void IS31FL3743B_init(void) {
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b0a9      	sub	sp, #164	; 0xa4
 8003580:	af00      	add	r7, sp, #0
	IS31FL3743B_Dumby();
 8003582:	f000 fb8b 	bl	8003c9c <IS31FL3743B_Dumby>
	IS31FL3743B_Reset();
 8003586:	f000 fb4b 	bl	8003c20 <IS31FL3743B_Reset>
	 *or 0x39 - Config def
	 *
	 *
	 * */

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); //Pull chip select low
 800358a:	23a0      	movs	r3, #160	; 0xa0
 800358c:	05db      	lsls	r3, r3, #23
 800358e:	2200      	movs	r2, #0
 8003590:	2110      	movs	r1, #16
 8003592:	0018      	movs	r0, r3
 8003594:	f7fe f88a 	bl	80016ac <HAL_GPIO_WritePin>
	uint8_t spiDataTx[3] = { Page2_ADDR, Config_ADDR, ConfigDef };
 8003598:	209c      	movs	r0, #156	; 0x9c
 800359a:	183b      	adds	r3, r7, r0
 800359c:	4a3b      	ldr	r2, [pc, #236]	; (800368c <IS31FL3743B_init+0x110>)
 800359e:	8811      	ldrh	r1, [r2, #0]
 80035a0:	8019      	strh	r1, [r3, #0]
 80035a2:	7892      	ldrb	r2, [r2, #2]
 80035a4:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx, sizeof(spiDataTx));
 80035a6:	1839      	adds	r1, r7, r0
 80035a8:	4b39      	ldr	r3, [pc, #228]	; (8003690 <IS31FL3743B_init+0x114>)
 80035aa:	2203      	movs	r2, #3
 80035ac:	0018      	movs	r0, r3
 80035ae:	f7fe fe69 	bl	8002284 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select low
 80035b2:	23a0      	movs	r3, #160	; 0xa0
 80035b4:	05db      	lsls	r3, r3, #23
 80035b6:	2201      	movs	r2, #1
 80035b8:	2110      	movs	r1, #16
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fe f876 	bl	80016ac <HAL_GPIO_WritePin>
	/*
	 * Set GCC to full power
	 *
	 * */

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); //Pull chip select low
 80035c0:	23a0      	movs	r3, #160	; 0xa0
 80035c2:	05db      	lsls	r3, r3, #23
 80035c4:	2200      	movs	r2, #0
 80035c6:	2110      	movs	r1, #16
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7fe f86f 	bl	80016ac <HAL_GPIO_WritePin>
	uint8_t spiDataTx2[3] = { Page2_ADDR, GCC_ADDR, 0x40 };
 80035ce:	2098      	movs	r0, #152	; 0x98
 80035d0:	183b      	adds	r3, r7, r0
 80035d2:	4a30      	ldr	r2, [pc, #192]	; (8003694 <IS31FL3743B_init+0x118>)
 80035d4:	8811      	ldrh	r1, [r2, #0]
 80035d6:	8019      	strh	r1, [r3, #0]
 80035d8:	7892      	ldrb	r2, [r2, #2]
 80035da:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx2, sizeof(spiDataTx2));
 80035dc:	1839      	adds	r1, r7, r0
 80035de:	4b2c      	ldr	r3, [pc, #176]	; (8003690 <IS31FL3743B_init+0x114>)
 80035e0:	2203      	movs	r2, #3
 80035e2:	0018      	movs	r0, r3
 80035e4:	f7fe fe4e 	bl	8002284 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select low
 80035e8:	23a0      	movs	r3, #160	; 0xa0
 80035ea:	05db      	lsls	r3, r3, #23
 80035ec:	2201      	movs	r2, #1
 80035ee:	2110      	movs	r1, #16
 80035f0:	0018      	movs	r0, r3
 80035f2:	f7fe f85b 	bl	80016ac <HAL_GPIO_WritePin>

	/*
	 * Set deghost
	 *
	 * */
	uint8_t spiDataTx3[3] =
 80035f6:	2494      	movs	r4, #148	; 0x94
 80035f8:	193b      	adds	r3, r7, r4
 80035fa:	4a27      	ldr	r2, [pc, #156]	; (8003698 <IS31FL3743B_init+0x11c>)
 80035fc:	8811      	ldrh	r1, [r2, #0]
 80035fe:	8019      	strh	r1, [r3, #0]
 8003600:	7892      	ldrb	r2, [r2, #2]
 8003602:	709a      	strb	r2, [r3, #2]
			{ Page2_ADDR, SW_PullUp_CS_PullDown_ADDR, SWxCSxDef };
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 8003604:	23a0      	movs	r3, #160	; 0xa0
 8003606:	05db      	lsls	r3, r3, #23
 8003608:	2200      	movs	r2, #0
 800360a:	2110      	movs	r1, #16
 800360c:	0018      	movs	r0, r3
 800360e:	f7fe f84d 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx3, sizeof(spiDataTx3));
 8003612:	1939      	adds	r1, r7, r4
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <IS31FL3743B_init+0x114>)
 8003616:	2203      	movs	r2, #3
 8003618:	0018      	movs	r0, r3
 800361a:	f7fe fe33 	bl	8002284 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 800361e:	23a0      	movs	r3, #160	; 0xa0
 8003620:	05db      	lsls	r3, r3, #23
 8003622:	2201      	movs	r2, #1
 8003624:	2110      	movs	r1, #16
 8003626:	0018      	movs	r0, r3
 8003628:	f7fe f840 	bl	80016ac <HAL_GPIO_WritePin>

	 * Set scaling to range
	 *
	 * */

	uint8_t spiDataTx4[146] = { 0x00 }; // create buffer for all leds
 800362c:	003b      	movs	r3, r7
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	3304      	adds	r3, #4
 8003634:	228e      	movs	r2, #142	; 0x8e
 8003636:	2100      	movs	r1, #0
 8003638:	0018      	movs	r0, r3
 800363a:	f000 fbab 	bl	8003d94 <memset>
	memset(spiDataTx4, 0x80, sizeof(spiDataTx4));
 800363e:	003b      	movs	r3, r7
 8003640:	2292      	movs	r2, #146	; 0x92
 8003642:	2180      	movs	r1, #128	; 0x80
 8003644:	0018      	movs	r0, r3
 8003646:	f000 fba5 	bl	8003d94 <memset>
	spiDataTx4[0] = Page1_ADDR;
 800364a:	003b      	movs	r3, r7
 800364c:	2251      	movs	r2, #81	; 0x51
 800364e:	701a      	strb	r2, [r3, #0]
	spiDataTx4[1] = StartADDR;
 8003650:	003b      	movs	r3, r7
 8003652:	2201      	movs	r2, #1
 8003654:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 8003656:	23a0      	movs	r3, #160	; 0xa0
 8003658:	05db      	lsls	r3, r3, #23
 800365a:	2200      	movs	r2, #0
 800365c:	2110      	movs	r1, #16
 800365e:	0018      	movs	r0, r3
 8003660:	f7fe f824 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx4, sizeof(spiDataTx4));
 8003664:	0039      	movs	r1, r7
 8003666:	4b0a      	ldr	r3, [pc, #40]	; (8003690 <IS31FL3743B_init+0x114>)
 8003668:	2292      	movs	r2, #146	; 0x92
 800366a:	0018      	movs	r0, r3
 800366c:	f7fe fe0a 	bl	8002284 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 8003670:	23a0      	movs	r3, #160	; 0xa0
 8003672:	05db      	lsls	r3, r3, #23
 8003674:	2201      	movs	r2, #1
 8003676:	2110      	movs	r1, #16
 8003678:	0018      	movs	r0, r3
 800367a:	f7fe f817 	bl	80016ac <HAL_GPIO_WritePin>

	// Confirmation
	LedBlink(1);
 800367e:	2001      	movs	r0, #1
 8003680:	f7fd fb18 	bl	8000cb4 <LedBlink>
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b029      	add	sp, #164	; 0xa4
 800368a:	bd90      	pop	{r4, r7, pc}
 800368c:	08003dbc 	.word	0x08003dbc
 8003690:	20000090 	.word	0x20000090
 8003694:	08003dc0 	.word	0x08003dc0
 8003698:	08003dc4 	.word	0x08003dc4

0800369c <IS31FL3743B_SetDotColor>:
;

uint8_t IS31FL3743B_SetDotColor(uint8_t led, uint8_t color, uint8_t intensity) {
 800369c:	b5b0      	push	{r4, r5, r7, lr}
 800369e:	b096      	sub	sp, #88	; 0x58
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	0004      	movs	r4, r0
 80036a4:	0008      	movs	r0, r1
 80036a6:	0011      	movs	r1, r2
 80036a8:	1dfb      	adds	r3, r7, #7
 80036aa:	1c22      	adds	r2, r4, #0
 80036ac:	701a      	strb	r2, [r3, #0]
 80036ae:	1dbb      	adds	r3, r7, #6
 80036b0:	1c02      	adds	r2, r0, #0
 80036b2:	701a      	strb	r2, [r3, #0]
 80036b4:	1d7b      	adds	r3, r7, #5
 80036b6:	1c0a      	adds	r2, r1, #0
 80036b8:	701a      	strb	r2, [r3, #0]
	uint8_t baseADDR = 0x00;
 80036ba:	2357      	movs	r3, #87	; 0x57
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	2200      	movs	r2, #0
 80036c0:	701a      	strb	r2, [r3, #0]
	//filter out bad dot selections
	if (led < 1 || led > 48) {
 80036c2:	1dfb      	adds	r3, r7, #7
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <IS31FL3743B_SetDotColor+0x36>
 80036ca:	1dfb      	adds	r3, r7, #7
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b30      	cmp	r3, #48	; 0x30
 80036d0:	d904      	bls.n	80036dc <IS31FL3743B_SetDotColor+0x40>
		LedBlink(3);
 80036d2:	2003      	movs	r0, #3
 80036d4:	f7fd faee 	bl	8000cb4 <LedBlink>
		return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e27e      	b.n	8003bda <IS31FL3743B_SetDotColor+0x53e>
	}
	//set correct base address current sink
	else
		baseADDR = (3 * led) - 2;	// convert led to starting reg (blue)
 80036dc:	1dfb      	adds	r3, r7, #7
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	1c1a      	adds	r2, r3, #0
 80036e2:	1892      	adds	r2, r2, r2
 80036e4:	18d3      	adds	r3, r2, r3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	2357      	movs	r3, #87	; 0x57
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	3a02      	subs	r2, #2
 80036ee:	701a      	strb	r2, [r3, #0]
	uint8_t intensityB, intensityG, intensityR = 0x01;
 80036f0:	2356      	movs	r3, #86	; 0x56
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
	/////////////////////////Set up intensity buffer///////////////////////
	switch (color) {
 80036f8:	1dbb      	adds	r3, r7, #6
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b07      	cmp	r3, #7
 80036fe:	d900      	bls.n	8003702 <IS31FL3743B_SetDotColor+0x66>
 8003700:	e227      	b.n	8003b52 <IS31FL3743B_SetDotColor+0x4b6>
 8003702:	009a      	lsls	r2, r3, #2
 8003704:	4bef      	ldr	r3, [pc, #956]	; (8003ac4 <IS31FL3743B_SetDotColor+0x428>)
 8003706:	18d3      	adds	r3, r2, r3
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	469f      	mov	pc, r3
	case Blue:
		intensityB = 0x01;
 800370c:	2055      	movs	r0, #85	; 0x55
 800370e:	183b      	adds	r3, r7, r0
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
		intensityG = 0x00;
 8003714:	2454      	movs	r4, #84	; 0x54
 8003716:	193b      	adds	r3, r7, r4
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
		intensityR = 0x00;
 800371c:	2556      	movs	r5, #86	; 0x56
 800371e:	197b      	adds	r3, r7, r5
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
		uint8_t spiDataTx[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003724:	214c      	movs	r1, #76	; 0x4c
 8003726:	187b      	adds	r3, r7, r1
 8003728:	2250      	movs	r2, #80	; 0x50
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	187b      	adds	r3, r7, r1
 800372e:	2257      	movs	r2, #87	; 0x57
 8003730:	18ba      	adds	r2, r7, r2
 8003732:	7812      	ldrb	r2, [r2, #0]
 8003734:	705a      	strb	r2, [r3, #1]
 8003736:	183b      	adds	r3, r7, r0
 8003738:	1d7a      	adds	r2, r7, #5
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	7812      	ldrb	r2, [r2, #0]
 800373e:	4353      	muls	r3, r2
 8003740:	b2da      	uxtb	r2, r3
 8003742:	187b      	adds	r3, r7, r1
 8003744:	709a      	strb	r2, [r3, #2]
				intensityG * intensity, intensityR * intensity };
 8003746:	193b      	adds	r3, r7, r4
 8003748:	1d7a      	adds	r2, r7, #5
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	7812      	ldrb	r2, [r2, #0]
 800374e:	4353      	muls	r3, r2
 8003750:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003752:	187b      	adds	r3, r7, r1
 8003754:	70da      	strb	r2, [r3, #3]
				intensityG * intensity, intensityR * intensity };
 8003756:	197b      	adds	r3, r7, r5
 8003758:	1d7a      	adds	r2, r7, #5
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	7812      	ldrb	r2, [r2, #0]
 800375e:	4353      	muls	r3, r2
 8003760:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003762:	000c      	movs	r4, r1
 8003764:	187b      	adds	r3, r7, r1
 8003766:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 8003768:	23a0      	movs	r3, #160	; 0xa0
 800376a:	05db      	lsls	r3, r3, #23
 800376c:	2200      	movs	r2, #0
 800376e:	2110      	movs	r1, #16
 8003770:	0018      	movs	r0, r3
 8003772:	f7fd ff9b 	bl	80016ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx, sizeof(spiDataTx));
 8003776:	1939      	adds	r1, r7, r4
 8003778:	4bd3      	ldr	r3, [pc, #844]	; (8003ac8 <IS31FL3743B_SetDotColor+0x42c>)
 800377a:	2205      	movs	r2, #5
 800377c:	0018      	movs	r0, r3
 800377e:	f7fe fd81 	bl	8002284 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 8003782:	23a0      	movs	r3, #160	; 0xa0
 8003784:	05db      	lsls	r3, r3, #23
 8003786:	2201      	movs	r2, #1
 8003788:	2110      	movs	r1, #16
 800378a:	0018      	movs	r0, r3
 800378c:	f7fd ff8e 	bl	80016ac <HAL_GPIO_WritePin>
		break;
 8003790:	e222      	b.n	8003bd8 <IS31FL3743B_SetDotColor+0x53c>

	case Green:
		intensityB = 0x00;
 8003792:	2055      	movs	r0, #85	; 0x55
 8003794:	183b      	adds	r3, r7, r0
 8003796:	2200      	movs	r2, #0
 8003798:	701a      	strb	r2, [r3, #0]
		intensityG = 0x01;
 800379a:	2454      	movs	r4, #84	; 0x54
 800379c:	193b      	adds	r3, r7, r4
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
		intensityR = 0x00;
 80037a2:	2556      	movs	r5, #86	; 0x56
 80037a4:	197b      	adds	r3, r7, r5
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
		uint8_t spiDataTx2[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 80037aa:	2144      	movs	r1, #68	; 0x44
 80037ac:	187b      	adds	r3, r7, r1
 80037ae:	2250      	movs	r2, #80	; 0x50
 80037b0:	701a      	strb	r2, [r3, #0]
 80037b2:	187b      	adds	r3, r7, r1
 80037b4:	2257      	movs	r2, #87	; 0x57
 80037b6:	18ba      	adds	r2, r7, r2
 80037b8:	7812      	ldrb	r2, [r2, #0]
 80037ba:	705a      	strb	r2, [r3, #1]
 80037bc:	183b      	adds	r3, r7, r0
 80037be:	1d7a      	adds	r2, r7, #5
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	7812      	ldrb	r2, [r2, #0]
 80037c4:	4353      	muls	r3, r2
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	187b      	adds	r3, r7, r1
 80037ca:	709a      	strb	r2, [r3, #2]
				intensityG * intensity, intensityR * intensity };
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	1d7a      	adds	r2, r7, #5
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	7812      	ldrb	r2, [r2, #0]
 80037d4:	4353      	muls	r3, r2
 80037d6:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx2[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	70da      	strb	r2, [r3, #3]
				intensityG * intensity, intensityR * intensity };
 80037dc:	197b      	adds	r3, r7, r5
 80037de:	1d7a      	adds	r2, r7, #5
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	7812      	ldrb	r2, [r2, #0]
 80037e4:	4353      	muls	r3, r2
 80037e6:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx2[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 80037e8:	000c      	movs	r4, r1
 80037ea:	187b      	adds	r3, r7, r1
 80037ec:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 80037ee:	23a0      	movs	r3, #160	; 0xa0
 80037f0:	05db      	lsls	r3, r3, #23
 80037f2:	2200      	movs	r2, #0
 80037f4:	2110      	movs	r1, #16
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7fd ff58 	bl	80016ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx2, sizeof(spiDataTx2));
 80037fc:	1939      	adds	r1, r7, r4
 80037fe:	4bb2      	ldr	r3, [pc, #712]	; (8003ac8 <IS31FL3743B_SetDotColor+0x42c>)
 8003800:	2205      	movs	r2, #5
 8003802:	0018      	movs	r0, r3
 8003804:	f7fe fd3e 	bl	8002284 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 8003808:	23a0      	movs	r3, #160	; 0xa0
 800380a:	05db      	lsls	r3, r3, #23
 800380c:	2201      	movs	r2, #1
 800380e:	2110      	movs	r1, #16
 8003810:	0018      	movs	r0, r3
 8003812:	f7fd ff4b 	bl	80016ac <HAL_GPIO_WritePin>
		break;
 8003816:	e1df      	b.n	8003bd8 <IS31FL3743B_SetDotColor+0x53c>

	case Red:
		intensityB = 0x00;
 8003818:	2055      	movs	r0, #85	; 0x55
 800381a:	183b      	adds	r3, r7, r0
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
		intensityG = 0x00;
 8003820:	2454      	movs	r4, #84	; 0x54
 8003822:	193b      	adds	r3, r7, r4
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
		intensityR = 0x01;
 8003828:	2556      	movs	r5, #86	; 0x56
 800382a:	197b      	adds	r3, r7, r5
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
		uint8_t spiDataTx3[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003830:	213c      	movs	r1, #60	; 0x3c
 8003832:	187b      	adds	r3, r7, r1
 8003834:	2250      	movs	r2, #80	; 0x50
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	187b      	adds	r3, r7, r1
 800383a:	2257      	movs	r2, #87	; 0x57
 800383c:	18ba      	adds	r2, r7, r2
 800383e:	7812      	ldrb	r2, [r2, #0]
 8003840:	705a      	strb	r2, [r3, #1]
 8003842:	183b      	adds	r3, r7, r0
 8003844:	1d7a      	adds	r2, r7, #5
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	4353      	muls	r3, r2
 800384c:	b2da      	uxtb	r2, r3
 800384e:	187b      	adds	r3, r7, r1
 8003850:	709a      	strb	r2, [r3, #2]
				intensityG * intensity, intensityR * intensity };
 8003852:	193b      	adds	r3, r7, r4
 8003854:	1d7a      	adds	r2, r7, #5
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	7812      	ldrb	r2, [r2, #0]
 800385a:	4353      	muls	r3, r2
 800385c:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx3[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 800385e:	187b      	adds	r3, r7, r1
 8003860:	70da      	strb	r2, [r3, #3]
				intensityG * intensity, intensityR * intensity };
 8003862:	197b      	adds	r3, r7, r5
 8003864:	1d7a      	adds	r2, r7, #5
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	7812      	ldrb	r2, [r2, #0]
 800386a:	4353      	muls	r3, r2
 800386c:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx3[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 800386e:	000c      	movs	r4, r1
 8003870:	187b      	adds	r3, r7, r1
 8003872:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 8003874:	23a0      	movs	r3, #160	; 0xa0
 8003876:	05db      	lsls	r3, r3, #23
 8003878:	2200      	movs	r2, #0
 800387a:	2110      	movs	r1, #16
 800387c:	0018      	movs	r0, r3
 800387e:	f7fd ff15 	bl	80016ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx3, sizeof(spiDataTx3));
 8003882:	1939      	adds	r1, r7, r4
 8003884:	4b90      	ldr	r3, [pc, #576]	; (8003ac8 <IS31FL3743B_SetDotColor+0x42c>)
 8003886:	2205      	movs	r2, #5
 8003888:	0018      	movs	r0, r3
 800388a:	f7fe fcfb 	bl	8002284 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 800388e:	23a0      	movs	r3, #160	; 0xa0
 8003890:	05db      	lsls	r3, r3, #23
 8003892:	2201      	movs	r2, #1
 8003894:	2110      	movs	r1, #16
 8003896:	0018      	movs	r0, r3
 8003898:	f7fd ff08 	bl	80016ac <HAL_GPIO_WritePin>
		break;
 800389c:	e19c      	b.n	8003bd8 <IS31FL3743B_SetDotColor+0x53c>

	case Cyan:
		intensityB = 0x00;
 800389e:	2055      	movs	r0, #85	; 0x55
 80038a0:	183b      	adds	r3, r7, r0
 80038a2:	2200      	movs	r2, #0
 80038a4:	701a      	strb	r2, [r3, #0]
		intensityG = 0x00;
 80038a6:	2454      	movs	r4, #84	; 0x54
 80038a8:	193b      	adds	r3, r7, r4
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
		intensityR = 0x01;
 80038ae:	2556      	movs	r5, #86	; 0x56
 80038b0:	197b      	adds	r3, r7, r5
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
		uint8_t spiDataTx4[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 80038b6:	2134      	movs	r1, #52	; 0x34
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	2250      	movs	r2, #80	; 0x50
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	2257      	movs	r2, #87	; 0x57
 80038c2:	18ba      	adds	r2, r7, r2
 80038c4:	7812      	ldrb	r2, [r2, #0]
 80038c6:	705a      	strb	r2, [r3, #1]
 80038c8:	183b      	adds	r3, r7, r0
 80038ca:	1d7a      	adds	r2, r7, #5
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	4353      	muls	r3, r2
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	709a      	strb	r2, [r3, #2]
				intensityG * intensity, intensityR * intensity };
 80038d8:	193b      	adds	r3, r7, r4
 80038da:	1d7a      	adds	r2, r7, #5
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	4353      	muls	r3, r2
 80038e2:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx4[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 80038e4:	187b      	adds	r3, r7, r1
 80038e6:	70da      	strb	r2, [r3, #3]
				intensityG * intensity, intensityR * intensity };
 80038e8:	197b      	adds	r3, r7, r5
 80038ea:	1d7a      	adds	r2, r7, #5
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	7812      	ldrb	r2, [r2, #0]
 80038f0:	4353      	muls	r3, r2
 80038f2:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx4[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 80038f4:	000c      	movs	r4, r1
 80038f6:	187b      	adds	r3, r7, r1
 80038f8:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 80038fa:	23a0      	movs	r3, #160	; 0xa0
 80038fc:	05db      	lsls	r3, r3, #23
 80038fe:	2200      	movs	r2, #0
 8003900:	2110      	movs	r1, #16
 8003902:	0018      	movs	r0, r3
 8003904:	f7fd fed2 	bl	80016ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx4, sizeof(spiDataTx4));
 8003908:	1939      	adds	r1, r7, r4
 800390a:	4b6f      	ldr	r3, [pc, #444]	; (8003ac8 <IS31FL3743B_SetDotColor+0x42c>)
 800390c:	2205      	movs	r2, #5
 800390e:	0018      	movs	r0, r3
 8003910:	f7fe fcb8 	bl	8002284 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 8003914:	23a0      	movs	r3, #160	; 0xa0
 8003916:	05db      	lsls	r3, r3, #23
 8003918:	2201      	movs	r2, #1
 800391a:	2110      	movs	r1, #16
 800391c:	0018      	movs	r0, r3
 800391e:	f7fd fec5 	bl	80016ac <HAL_GPIO_WritePin>

		break;
 8003922:	e159      	b.n	8003bd8 <IS31FL3743B_SetDotColor+0x53c>

	case Yellow:
		intensityB = 0x01;
 8003924:	2055      	movs	r0, #85	; 0x55
 8003926:	183b      	adds	r3, r7, r0
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
		intensityG = 0x00;
 800392c:	2454      	movs	r4, #84	; 0x54
 800392e:	193b      	adds	r3, r7, r4
 8003930:	2200      	movs	r2, #0
 8003932:	701a      	strb	r2, [r3, #0]
		intensityR = 0x00;
 8003934:	2556      	movs	r5, #86	; 0x56
 8003936:	197b      	adds	r3, r7, r5
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
		uint8_t spiDataTx5[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	187b      	adds	r3, r7, r1
 8003940:	2250      	movs	r2, #80	; 0x50
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	187b      	adds	r3, r7, r1
 8003946:	2257      	movs	r2, #87	; 0x57
 8003948:	18ba      	adds	r2, r7, r2
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	705a      	strb	r2, [r3, #1]
 800394e:	183b      	adds	r3, r7, r0
 8003950:	1d7a      	adds	r2, r7, #5
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	7812      	ldrb	r2, [r2, #0]
 8003956:	4353      	muls	r3, r2
 8003958:	b2da      	uxtb	r2, r3
 800395a:	187b      	adds	r3, r7, r1
 800395c:	709a      	strb	r2, [r3, #2]
				intensityG * intensity, intensityR * intensity };
 800395e:	193b      	adds	r3, r7, r4
 8003960:	1d7a      	adds	r2, r7, #5
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	7812      	ldrb	r2, [r2, #0]
 8003966:	4353      	muls	r3, r2
 8003968:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx5[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 800396a:	187b      	adds	r3, r7, r1
 800396c:	70da      	strb	r2, [r3, #3]
				intensityG * intensity, intensityR * intensity };
 800396e:	197b      	adds	r3, r7, r5
 8003970:	1d7a      	adds	r2, r7, #5
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	7812      	ldrb	r2, [r2, #0]
 8003976:	4353      	muls	r3, r2
 8003978:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx5[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 800397a:	000c      	movs	r4, r1
 800397c:	187b      	adds	r3, r7, r1
 800397e:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 8003980:	23a0      	movs	r3, #160	; 0xa0
 8003982:	05db      	lsls	r3, r3, #23
 8003984:	2200      	movs	r2, #0
 8003986:	2110      	movs	r1, #16
 8003988:	0018      	movs	r0, r3
 800398a:	f7fd fe8f 	bl	80016ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx5, sizeof(spiDataTx5));
 800398e:	1939      	adds	r1, r7, r4
 8003990:	4b4d      	ldr	r3, [pc, #308]	; (8003ac8 <IS31FL3743B_SetDotColor+0x42c>)
 8003992:	2205      	movs	r2, #5
 8003994:	0018      	movs	r0, r3
 8003996:	f7fe fc75 	bl	8002284 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 800399a:	23a0      	movs	r3, #160	; 0xa0
 800399c:	05db      	lsls	r3, r3, #23
 800399e:	2201      	movs	r2, #1
 80039a0:	2110      	movs	r1, #16
 80039a2:	0018      	movs	r0, r3
 80039a4:	f7fd fe82 	bl	80016ac <HAL_GPIO_WritePin>
		break;
 80039a8:	e116      	b.n	8003bd8 <IS31FL3743B_SetDotColor+0x53c>

	case Purple:
		intensityB = 0x00;
 80039aa:	2055      	movs	r0, #85	; 0x55
 80039ac:	183b      	adds	r3, r7, r0
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]
		intensityG = 0x01;
 80039b2:	2454      	movs	r4, #84	; 0x54
 80039b4:	193b      	adds	r3, r7, r4
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
		intensityR = 0x00;
 80039ba:	2556      	movs	r5, #86	; 0x56
 80039bc:	197b      	adds	r3, r7, r5
 80039be:	2200      	movs	r2, #0
 80039c0:	701a      	strb	r2, [r3, #0]
		uint8_t spiDataTx6[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 80039c2:	2124      	movs	r1, #36	; 0x24
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	2250      	movs	r2, #80	; 0x50
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	2257      	movs	r2, #87	; 0x57
 80039ce:	18ba      	adds	r2, r7, r2
 80039d0:	7812      	ldrb	r2, [r2, #0]
 80039d2:	705a      	strb	r2, [r3, #1]
 80039d4:	183b      	adds	r3, r7, r0
 80039d6:	1d7a      	adds	r2, r7, #5
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	4353      	muls	r3, r2
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	709a      	strb	r2, [r3, #2]
				intensityG * intensity, intensityR * intensity };
 80039e4:	193b      	adds	r3, r7, r4
 80039e6:	1d7a      	adds	r2, r7, #5
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	7812      	ldrb	r2, [r2, #0]
 80039ec:	4353      	muls	r3, r2
 80039ee:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx6[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 80039f0:	187b      	adds	r3, r7, r1
 80039f2:	70da      	strb	r2, [r3, #3]
				intensityG * intensity, intensityR * intensity };
 80039f4:	197b      	adds	r3, r7, r5
 80039f6:	1d7a      	adds	r2, r7, #5
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	4353      	muls	r3, r2
 80039fe:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx6[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003a00:	000c      	movs	r4, r1
 8003a02:	187b      	adds	r3, r7, r1
 8003a04:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 8003a06:	23a0      	movs	r3, #160	; 0xa0
 8003a08:	05db      	lsls	r3, r3, #23
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	2110      	movs	r1, #16
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f7fd fe4c 	bl	80016ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx6, sizeof(spiDataTx6));
 8003a14:	1939      	adds	r1, r7, r4
 8003a16:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <IS31FL3743B_SetDotColor+0x42c>)
 8003a18:	2205      	movs	r2, #5
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fe fc32 	bl	8002284 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 8003a20:	23a0      	movs	r3, #160	; 0xa0
 8003a22:	05db      	lsls	r3, r3, #23
 8003a24:	2201      	movs	r2, #1
 8003a26:	2110      	movs	r1, #16
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fd fe3f 	bl	80016ac <HAL_GPIO_WritePin>
		break;
 8003a2e:	e0d3      	b.n	8003bd8 <IS31FL3743B_SetDotColor+0x53c>

	case Orange:
		intensityB = 0x00;
 8003a30:	2055      	movs	r0, #85	; 0x55
 8003a32:	183b      	adds	r3, r7, r0
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
		intensityG = 0x01;
 8003a38:	2354      	movs	r3, #84	; 0x54
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
		intensityR = 0x01;
 8003a40:	2156      	movs	r1, #86	; 0x56
 8003a42:	187b      	adds	r3, r7, r1
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
		uint8_t spiDataTx7[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003a48:	241c      	movs	r4, #28
 8003a4a:	193b      	adds	r3, r7, r4
 8003a4c:	2250      	movs	r2, #80	; 0x50
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	2257      	movs	r2, #87	; 0x57
 8003a54:	18ba      	adds	r2, r7, r2
 8003a56:	7812      	ldrb	r2, [r2, #0]
 8003a58:	705a      	strb	r2, [r3, #1]
 8003a5a:	183b      	adds	r3, r7, r0
 8003a5c:	1d7a      	adds	r2, r7, #5
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	4353      	muls	r3, r2
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	193b      	adds	r3, r7, r4
 8003a68:	709a      	strb	r2, [r3, #2]
				((2 * intensityR) / 5) * intensity, intensityR * intensity };
 8003a6a:	000d      	movs	r5, r1
 8003a6c:	187b      	adds	r3, r7, r1
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	2105      	movs	r1, #5
 8003a74:	0018      	movs	r0, r3
 8003a76:	f7fc fbcf 	bl	8000218 <__divsi3>
 8003a7a:	0003      	movs	r3, r0
		uint8_t spiDataTx7[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	1d7a      	adds	r2, r7, #5
 8003a80:	7812      	ldrb	r2, [r2, #0]
 8003a82:	4353      	muls	r3, r2
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	193b      	adds	r3, r7, r4
 8003a88:	70da      	strb	r2, [r3, #3]
				((2 * intensityR) / 5) * intensity, intensityR * intensity };
 8003a8a:	197b      	adds	r3, r7, r5
 8003a8c:	1d7a      	adds	r2, r7, #5
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	7812      	ldrb	r2, [r2, #0]
 8003a92:	4353      	muls	r3, r2
 8003a94:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx7[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003a96:	193b      	adds	r3, r7, r4
 8003a98:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 8003a9a:	23a0      	movs	r3, #160	; 0xa0
 8003a9c:	05db      	lsls	r3, r3, #23
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2110      	movs	r1, #16
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f7fd fe02 	bl	80016ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx7, sizeof(spiDataTx7));
 8003aa8:	1939      	adds	r1, r7, r4
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <IS31FL3743B_SetDotColor+0x42c>)
 8003aac:	2205      	movs	r2, #5
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f7fe fbe8 	bl	8002284 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 8003ab4:	23a0      	movs	r3, #160	; 0xa0
 8003ab6:	05db      	lsls	r3, r3, #23
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2110      	movs	r1, #16
 8003abc:	0018      	movs	r0, r3
 8003abe:	f7fd fdf5 	bl	80016ac <HAL_GPIO_WritePin>
		break;
 8003ac2:	e089      	b.n	8003bd8 <IS31FL3743B_SetDotColor+0x53c>
 8003ac4:	08003ee4 	.word	0x08003ee4
 8003ac8:	20000090 	.word	0x20000090

	case White:
		intensityB = 0x01;
 8003acc:	2055      	movs	r0, #85	; 0x55
 8003ace:	183b      	adds	r3, r7, r0
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	701a      	strb	r2, [r3, #0]
		intensityG = 0x01;
 8003ad4:	2454      	movs	r4, #84	; 0x54
 8003ad6:	193b      	adds	r3, r7, r4
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
		intensityR = 0x01;
 8003adc:	2556      	movs	r5, #86	; 0x56
 8003ade:	197b      	adds	r3, r7, r5
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
		uint8_t spiDataTx8[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003ae4:	2114      	movs	r1, #20
 8003ae6:	187b      	adds	r3, r7, r1
 8003ae8:	2250      	movs	r2, #80	; 0x50
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2257      	movs	r2, #87	; 0x57
 8003af0:	18ba      	adds	r2, r7, r2
 8003af2:	7812      	ldrb	r2, [r2, #0]
 8003af4:	705a      	strb	r2, [r3, #1]
 8003af6:	183b      	adds	r3, r7, r0
 8003af8:	1d7a      	adds	r2, r7, #5
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	7812      	ldrb	r2, [r2, #0]
 8003afe:	4353      	muls	r3, r2
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	709a      	strb	r2, [r3, #2]
				intensityG * intensity, intensityR * intensity };
 8003b06:	193b      	adds	r3, r7, r4
 8003b08:	1d7a      	adds	r2, r7, #5
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	7812      	ldrb	r2, [r2, #0]
 8003b0e:	4353      	muls	r3, r2
 8003b10:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx8[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003b12:	187b      	adds	r3, r7, r1
 8003b14:	70da      	strb	r2, [r3, #3]
				intensityG * intensity, intensityR * intensity };
 8003b16:	197b      	adds	r3, r7, r5
 8003b18:	1d7a      	adds	r2, r7, #5
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	4353      	muls	r3, r2
 8003b20:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx8[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003b22:	000c      	movs	r4, r1
 8003b24:	187b      	adds	r3, r7, r1
 8003b26:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 8003b28:	23a0      	movs	r3, #160	; 0xa0
 8003b2a:	05db      	lsls	r3, r3, #23
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2110      	movs	r1, #16
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7fd fdbb 	bl	80016ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx8, sizeof(spiDataTx8));
 8003b36:	1939      	adds	r1, r7, r4
 8003b38:	4b2a      	ldr	r3, [pc, #168]	; (8003be4 <IS31FL3743B_SetDotColor+0x548>)
 8003b3a:	2205      	movs	r2, #5
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7fe fba1 	bl	8002284 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 8003b42:	23a0      	movs	r3, #160	; 0xa0
 8003b44:	05db      	lsls	r3, r3, #23
 8003b46:	2201      	movs	r2, #1
 8003b48:	2110      	movs	r1, #16
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f7fd fdae 	bl	80016ac <HAL_GPIO_WritePin>
		break;
 8003b50:	e042      	b.n	8003bd8 <IS31FL3743B_SetDotColor+0x53c>

	default:
		intensityB = 0x00;
 8003b52:	2055      	movs	r0, #85	; 0x55
 8003b54:	183b      	adds	r3, r7, r0
 8003b56:	2200      	movs	r2, #0
 8003b58:	701a      	strb	r2, [r3, #0]
		intensityG = 0x00;
 8003b5a:	2454      	movs	r4, #84	; 0x54
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
		intensityR = 0x00;
 8003b62:	2556      	movs	r5, #86	; 0x56
 8003b64:	197b      	adds	r3, r7, r5
 8003b66:	2200      	movs	r2, #0
 8003b68:	701a      	strb	r2, [r3, #0]
		uint8_t spiDataTx9[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003b6a:	210c      	movs	r1, #12
 8003b6c:	187b      	adds	r3, r7, r1
 8003b6e:	2250      	movs	r2, #80	; 0x50
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	2257      	movs	r2, #87	; 0x57
 8003b76:	18ba      	adds	r2, r7, r2
 8003b78:	7812      	ldrb	r2, [r2, #0]
 8003b7a:	705a      	strb	r2, [r3, #1]
 8003b7c:	183b      	adds	r3, r7, r0
 8003b7e:	1d7a      	adds	r2, r7, #5
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	7812      	ldrb	r2, [r2, #0]
 8003b84:	4353      	muls	r3, r2
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	709a      	strb	r2, [r3, #2]
				intensityG * intensity, intensityR * intensity };
 8003b8c:	193b      	adds	r3, r7, r4
 8003b8e:	1d7a      	adds	r2, r7, #5
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	7812      	ldrb	r2, [r2, #0]
 8003b94:	4353      	muls	r3, r2
 8003b96:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx9[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	70da      	strb	r2, [r3, #3]
				intensityG * intensity, intensityR * intensity };
 8003b9c:	197b      	adds	r3, r7, r5
 8003b9e:	1d7a      	adds	r2, r7, #5
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	4353      	muls	r3, r2
 8003ba6:	b2da      	uxtb	r2, r3
		uint8_t spiDataTx9[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003ba8:	000c      	movs	r4, r1
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	711a      	strb	r2, [r3, #4]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 8003bae:	23a0      	movs	r3, #160	; 0xa0
 8003bb0:	05db      	lsls	r3, r3, #23
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2110      	movs	r1, #16
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f7fd fd78 	bl	80016ac <HAL_GPIO_WritePin>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx9, sizeof(spiDataTx9));
 8003bbc:	1939      	adds	r1, r7, r4
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <IS31FL3743B_SetDotColor+0x548>)
 8003bc0:	2205      	movs	r2, #5
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f7fe fb5e 	bl	8002284 <HAL_SPI_Transmit_IT>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 8003bc8:	23a0      	movs	r3, #160	; 0xa0
 8003bca:	05db      	lsls	r3, r3, #23
 8003bcc:	2201      	movs	r2, #1
 8003bce:	2110      	movs	r1, #16
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7fd fd6b 	bl	80016ac <HAL_GPIO_WritePin>
		break;
 8003bd6:	46c0      	nop			; (mov r8, r8)
	}
	return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b016      	add	sp, #88	; 0x58
 8003be0:	bdb0      	pop	{r4, r5, r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	20000090 	.word	0x20000090

08003be8 <IS31FL3743B_ClearAll>:

void IS31FL3743B_ClearAll(void) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
	for (uint8_t dot = 1; dot <= 48; dot++) {
 8003bee:	1dfb      	adds	r3, r7, #7
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	e00b      	b.n	8003c0e <IS31FL3743B_ClearAll+0x26>
		IS31FL3743B_SetDotColor(dot, -1, full);
 8003bf6:	1dfb      	adds	r3, r7, #7
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	22fe      	movs	r2, #254	; 0xfe
 8003bfc:	21ff      	movs	r1, #255	; 0xff
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f7ff fd4c 	bl	800369c <IS31FL3743B_SetDotColor>
	for (uint8_t dot = 1; dot <= 48; dot++) {
 8003c04:	1dfb      	adds	r3, r7, #7
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	1dfb      	adds	r3, r7, #7
 8003c0a:	3201      	adds	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	1dfb      	adds	r3, r7, #7
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b30      	cmp	r3, #48	; 0x30
 8003c14:	d9ef      	bls.n	8003bf6 <IS31FL3743B_ClearAll+0xe>
	}
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	46c0      	nop			; (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <IS31FL3743B_Reset>:
void IS31FL3743B_Breathe(uint8_t color, int speed) {

}
;

void IS31FL3743B_Reset(void) {
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0

	// Pull sdb low for reset
	HAL_GPIO_WritePin(SDB_GPIO_Port, SDB_Pin, 0);
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	0119      	lsls	r1, r3, #4
 8003c2a:	23a0      	movs	r3, #160	; 0xa0
 8003c2c:	05db      	lsls	r3, r3, #23
 8003c2e:	2200      	movs	r2, #0
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7fd fd3b 	bl	80016ac <HAL_GPIO_WritePin>

	// reset all registers to prevent old data recycling

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8003c36:	23a0      	movs	r3, #160	; 0xa0
 8003c38:	05db      	lsls	r3, r3, #23
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2110      	movs	r1, #16
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7fd fd34 	bl	80016ac <HAL_GPIO_WritePin>
	uint8_t spiDataTx[3] = { Page2_ADDR, Reset_ADDR, ResetDef };
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <IS31FL3743B_Reset+0x74>)
 8003c48:	8811      	ldrh	r1, [r2, #0]
 8003c4a:	8019      	strh	r1, [r3, #0]
 8003c4c:	7892      	ldrb	r2, [r2, #2]
 8003c4e:	709a      	strb	r2, [r3, #2]
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx, sizeof(spiDataTx));
 8003c50:	1d39      	adds	r1, r7, #4
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <IS31FL3743B_Reset+0x78>)
 8003c54:	2203      	movs	r2, #3
 8003c56:	0018      	movs	r0, r3
 8003c58:	f7fe fb14 	bl	8002284 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8003c5c:	23a0      	movs	r3, #160	; 0xa0
 8003c5e:	05db      	lsls	r3, r3, #23
 8003c60:	2201      	movs	r2, #1
 8003c62:	2110      	movs	r1, #16
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7fd fd21 	bl	80016ac <HAL_GPIO_WritePin>

	//Pull sdb high for to operate
	HAL_GPIO_WritePin(SDB_GPIO_Port, SDB_Pin, 1);
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	0119      	lsls	r1, r3, #4
 8003c6e:	23a0      	movs	r3, #160	; 0xa0
 8003c70:	05db      	lsls	r3, r3, #23
 8003c72:	2201      	movs	r2, #1
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7fd fd19 	bl	80016ac <HAL_GPIO_WritePin>

// Pull sdb high for to operate
	HAL_GPIO_WritePin(SDB_GPIO_Port, SDB_Pin, 1);
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	0119      	lsls	r1, r3, #4
 8003c7e:	23a0      	movs	r3, #160	; 0xa0
 8003c80:	05db      	lsls	r3, r3, #23
 8003c82:	2201      	movs	r2, #1
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7fd fd11 	bl	80016ac <HAL_GPIO_WritePin>

}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	08003dc8 	.word	0x08003dc8
 8003c98:	20000090 	.word	0x20000090

08003c9c <IS31FL3743B_Dumby>:
;

void IS31FL3743B_Dumby(void) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0

//To prevent a data mismatch, send a dumby request before sending other commands
	MyDelay_ms(1);
 8003ca2:	2001      	movs	r0, #1
 8003ca4:	f000 f82a 	bl	8003cfc <MyDelay_ms>
	uint8_t spiDataTx[3] = { 0x00, 0x00, 0x00 };
 8003ca8:	1d3b      	adds	r3, r7, #4
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <IS31FL3743B_Dumby+0x48>)
 8003cac:	8811      	ldrh	r1, [r2, #0]
 8003cae:	8019      	strh	r1, [r3, #0]
 8003cb0:	7892      	ldrb	r2, [r2, #2]
 8003cb2:	709a      	strb	r2, [r3, #2]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8003cb4:	23a0      	movs	r3, #160	; 0xa0
 8003cb6:	05db      	lsls	r3, r3, #23
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2110      	movs	r1, #16
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7fd fcf5 	bl	80016ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx, sizeof(spiDataTx));
 8003cc2:	1d39      	adds	r1, r7, #4
 8003cc4:	4b08      	ldr	r3, [pc, #32]	; (8003ce8 <IS31FL3743B_Dumby+0x4c>)
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f7fe fadb 	bl	8002284 <HAL_SPI_Transmit_IT>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8003cce:	23a0      	movs	r3, #160	; 0xa0
 8003cd0:	05db      	lsls	r3, r3, #23
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	2110      	movs	r1, #16
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	f7fd fce8 	bl	80016ac <HAL_GPIO_WritePin>
}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	08003dcc 	.word	0x08003dcc
 8003ce8:	20000090 	.word	0x20000090

08003cec <HAL_SPI_TxCpltCallback>:
;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SPI_TxRxCpltCallback should be implemented in the user file
	 */
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <MyDelay_ms>:
 *  Created on: Mar 9, 2022
 *      Author: Rara_
 */
#include "MyDelay.h"

void MyDelay_ms(uint16_t HowLong) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	0002      	movs	r2, r0
 8003d04:	1dbb      	adds	r3, r7, #6
 8003d06:	801a      	strh	r2, [r3, #0]
	// Get current time (microseconds)
	timer_val = __HAL_TIM_GET_COUNTER(&(MY_TIM_HANDLE));
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <MyDelay_ms+0x48>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <MyDelay_ms+0x4c>)
 8003d12:	801a      	strh	r2, [r3, #0]

	while (__HAL_TIM_GET_COUNTER(&(MY_TIM_HANDLE)) - timer_val <= HowLong * 10) {
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	4b0b      	ldr	r3, [pc, #44]	; (8003d44 <MyDelay_ms+0x48>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <MyDelay_ms+0x4c>)
 8003d1e:	8812      	ldrh	r2, [r2, #0]
 8003d20:	1a99      	subs	r1, r3, r2
 8003d22:	1dbb      	adds	r3, r7, #6
 8003d24:	881a      	ldrh	r2, [r3, #0]
 8003d26:	0013      	movs	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	189b      	adds	r3, r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4299      	cmp	r1, r3
 8003d30:	d9f1      	bls.n	8003d16 <MyDelay_ms+0x1a>
		//do nothing
	}
	//reset timer to prevent roll over timing mismatch
	__HAL_TIM_SET_COUNTER(&(MY_TIM_HANDLE), 0);
 8003d32:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <MyDelay_ms+0x48>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	20000184 	.word	0x20000184
 8003d48:	2000008c 	.word	0x2000008c

08003d4c <__libc_init_array>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	2600      	movs	r6, #0
 8003d50:	4d0c      	ldr	r5, [pc, #48]	; (8003d84 <__libc_init_array+0x38>)
 8003d52:	4c0d      	ldr	r4, [pc, #52]	; (8003d88 <__libc_init_array+0x3c>)
 8003d54:	1b64      	subs	r4, r4, r5
 8003d56:	10a4      	asrs	r4, r4, #2
 8003d58:	42a6      	cmp	r6, r4
 8003d5a:	d109      	bne.n	8003d70 <__libc_init_array+0x24>
 8003d5c:	2600      	movs	r6, #0
 8003d5e:	f000 f821 	bl	8003da4 <_init>
 8003d62:	4d0a      	ldr	r5, [pc, #40]	; (8003d8c <__libc_init_array+0x40>)
 8003d64:	4c0a      	ldr	r4, [pc, #40]	; (8003d90 <__libc_init_array+0x44>)
 8003d66:	1b64      	subs	r4, r4, r5
 8003d68:	10a4      	asrs	r4, r4, #2
 8003d6a:	42a6      	cmp	r6, r4
 8003d6c:	d105      	bne.n	8003d7a <__libc_init_array+0x2e>
 8003d6e:	bd70      	pop	{r4, r5, r6, pc}
 8003d70:	00b3      	lsls	r3, r6, #2
 8003d72:	58eb      	ldr	r3, [r5, r3]
 8003d74:	4798      	blx	r3
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7ee      	b.n	8003d58 <__libc_init_array+0xc>
 8003d7a:	00b3      	lsls	r3, r6, #2
 8003d7c:	58eb      	ldr	r3, [r5, r3]
 8003d7e:	4798      	blx	r3
 8003d80:	3601      	adds	r6, #1
 8003d82:	e7f2      	b.n	8003d6a <__libc_init_array+0x1e>
 8003d84:	08003f0c 	.word	0x08003f0c
 8003d88:	08003f0c 	.word	0x08003f0c
 8003d8c:	08003f0c 	.word	0x08003f0c
 8003d90:	08003f10 	.word	0x08003f10

08003d94 <memset>:
 8003d94:	0003      	movs	r3, r0
 8003d96:	1882      	adds	r2, r0, r2
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d100      	bne.n	8003d9e <memset+0xa>
 8003d9c:	4770      	bx	lr
 8003d9e:	7019      	strb	r1, [r3, #0]
 8003da0:	3301      	adds	r3, #1
 8003da2:	e7f9      	b.n	8003d98 <memset+0x4>

08003da4 <_init>:
 8003da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003daa:	bc08      	pop	{r3}
 8003dac:	469e      	mov	lr, r3
 8003dae:	4770      	bx	lr

08003db0 <_fini>:
 8003db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003db6:	bc08      	pop	{r3}
 8003db8:	469e      	mov	lr, r3
 8003dba:	4770      	bx	lr
