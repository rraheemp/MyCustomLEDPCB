
LMP-01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004410  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080044cc  080044cc  000144cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f4  080045f4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080045f4  080045f4  000145f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045fc  080045fc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004600  08004600  00014600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  20000070  08004674  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08004674  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016133  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002758  00000000  00000000  000361cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00038928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00039840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d991  00000000  00000000  0003a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004858  00000000  00000000  00048001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0004c859  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003df0  00000000  00000000  0004c8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080044b4 	.word	0x080044b4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	080044b4 	.word	0x080044b4

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	1c08      	adds	r0, r1, #0
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__udivmoddi4>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	4657      	mov	r7, sl
 8000274:	464e      	mov	r6, r9
 8000276:	4645      	mov	r5, r8
 8000278:	46de      	mov	lr, fp
 800027a:	b5e0      	push	{r5, r6, r7, lr}
 800027c:	0004      	movs	r4, r0
 800027e:	000d      	movs	r5, r1
 8000280:	4692      	mov	sl, r2
 8000282:	4699      	mov	r9, r3
 8000284:	b083      	sub	sp, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d830      	bhi.n	80002ec <__udivmoddi4+0x7c>
 800028a:	d02d      	beq.n	80002e8 <__udivmoddi4+0x78>
 800028c:	4649      	mov	r1, r9
 800028e:	4650      	mov	r0, sl
 8000290:	f000 f8ba 	bl	8000408 <__clzdi2>
 8000294:	0029      	movs	r1, r5
 8000296:	0006      	movs	r6, r0
 8000298:	0020      	movs	r0, r4
 800029a:	f000 f8b5 	bl	8000408 <__clzdi2>
 800029e:	1a33      	subs	r3, r6, r0
 80002a0:	4698      	mov	r8, r3
 80002a2:	3b20      	subs	r3, #32
 80002a4:	469b      	mov	fp, r3
 80002a6:	d433      	bmi.n	8000310 <__udivmoddi4+0xa0>
 80002a8:	465a      	mov	r2, fp
 80002aa:	4653      	mov	r3, sl
 80002ac:	4093      	lsls	r3, r2
 80002ae:	4642      	mov	r2, r8
 80002b0:	001f      	movs	r7, r3
 80002b2:	4653      	mov	r3, sl
 80002b4:	4093      	lsls	r3, r2
 80002b6:	001e      	movs	r6, r3
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d83a      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80002bc:	42af      	cmp	r7, r5
 80002be:	d100      	bne.n	80002c2 <__udivmoddi4+0x52>
 80002c0:	e078      	b.n	80003b4 <__udivmoddi4+0x144>
 80002c2:	465b      	mov	r3, fp
 80002c4:	1ba4      	subs	r4, r4, r6
 80002c6:	41bd      	sbcs	r5, r7
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	da00      	bge.n	80002ce <__udivmoddi4+0x5e>
 80002cc:	e075      	b.n	80003ba <__udivmoddi4+0x14a>
 80002ce:	2200      	movs	r2, #0
 80002d0:	2300      	movs	r3, #0
 80002d2:	9200      	str	r2, [sp, #0]
 80002d4:	9301      	str	r3, [sp, #4]
 80002d6:	2301      	movs	r3, #1
 80002d8:	465a      	mov	r2, fp
 80002da:	4093      	lsls	r3, r2
 80002dc:	9301      	str	r3, [sp, #4]
 80002de:	2301      	movs	r3, #1
 80002e0:	4642      	mov	r2, r8
 80002e2:	4093      	lsls	r3, r2
 80002e4:	9300      	str	r3, [sp, #0]
 80002e6:	e028      	b.n	800033a <__udivmoddi4+0xca>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	d9cf      	bls.n	800028c <__udivmoddi4+0x1c>
 80002ec:	2200      	movs	r2, #0
 80002ee:	2300      	movs	r3, #0
 80002f0:	9200      	str	r2, [sp, #0]
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <__udivmoddi4+0x8e>
 80002fa:	601c      	str	r4, [r3, #0]
 80002fc:	605d      	str	r5, [r3, #4]
 80002fe:	9800      	ldr	r0, [sp, #0]
 8000300:	9901      	ldr	r1, [sp, #4]
 8000302:	b003      	add	sp, #12
 8000304:	bcf0      	pop	{r4, r5, r6, r7}
 8000306:	46bb      	mov	fp, r7
 8000308:	46b2      	mov	sl, r6
 800030a:	46a9      	mov	r9, r5
 800030c:	46a0      	mov	r8, r4
 800030e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000310:	4642      	mov	r2, r8
 8000312:	2320      	movs	r3, #32
 8000314:	1a9b      	subs	r3, r3, r2
 8000316:	4652      	mov	r2, sl
 8000318:	40da      	lsrs	r2, r3
 800031a:	4641      	mov	r1, r8
 800031c:	0013      	movs	r3, r2
 800031e:	464a      	mov	r2, r9
 8000320:	408a      	lsls	r2, r1
 8000322:	0017      	movs	r7, r2
 8000324:	4642      	mov	r2, r8
 8000326:	431f      	orrs	r7, r3
 8000328:	4653      	mov	r3, sl
 800032a:	4093      	lsls	r3, r2
 800032c:	001e      	movs	r6, r3
 800032e:	42af      	cmp	r7, r5
 8000330:	d9c4      	bls.n	80002bc <__udivmoddi4+0x4c>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	4643      	mov	r3, r8
 800033c:	2b00      	cmp	r3, #0
 800033e:	d0d9      	beq.n	80002f4 <__udivmoddi4+0x84>
 8000340:	07fb      	lsls	r3, r7, #31
 8000342:	0872      	lsrs	r2, r6, #1
 8000344:	431a      	orrs	r2, r3
 8000346:	4646      	mov	r6, r8
 8000348:	087b      	lsrs	r3, r7, #1
 800034a:	e00e      	b.n	800036a <__udivmoddi4+0xfa>
 800034c:	42ab      	cmp	r3, r5
 800034e:	d101      	bne.n	8000354 <__udivmoddi4+0xe4>
 8000350:	42a2      	cmp	r2, r4
 8000352:	d80c      	bhi.n	800036e <__udivmoddi4+0xfe>
 8000354:	1aa4      	subs	r4, r4, r2
 8000356:	419d      	sbcs	r5, r3
 8000358:	2001      	movs	r0, #1
 800035a:	1924      	adds	r4, r4, r4
 800035c:	416d      	adcs	r5, r5
 800035e:	2100      	movs	r1, #0
 8000360:	3e01      	subs	r6, #1
 8000362:	1824      	adds	r4, r4, r0
 8000364:	414d      	adcs	r5, r1
 8000366:	2e00      	cmp	r6, #0
 8000368:	d006      	beq.n	8000378 <__udivmoddi4+0x108>
 800036a:	42ab      	cmp	r3, r5
 800036c:	d9ee      	bls.n	800034c <__udivmoddi4+0xdc>
 800036e:	3e01      	subs	r6, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2e00      	cmp	r6, #0
 8000376:	d1f8      	bne.n	800036a <__udivmoddi4+0xfa>
 8000378:	9800      	ldr	r0, [sp, #0]
 800037a:	9901      	ldr	r1, [sp, #4]
 800037c:	465b      	mov	r3, fp
 800037e:	1900      	adds	r0, r0, r4
 8000380:	4169      	adcs	r1, r5
 8000382:	2b00      	cmp	r3, #0
 8000384:	db24      	blt.n	80003d0 <__udivmoddi4+0x160>
 8000386:	002b      	movs	r3, r5
 8000388:	465a      	mov	r2, fp
 800038a:	4644      	mov	r4, r8
 800038c:	40d3      	lsrs	r3, r2
 800038e:	002a      	movs	r2, r5
 8000390:	40e2      	lsrs	r2, r4
 8000392:	001c      	movs	r4, r3
 8000394:	465b      	mov	r3, fp
 8000396:	0015      	movs	r5, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	db2a      	blt.n	80003f2 <__udivmoddi4+0x182>
 800039c:	0026      	movs	r6, r4
 800039e:	409e      	lsls	r6, r3
 80003a0:	0033      	movs	r3, r6
 80003a2:	0026      	movs	r6, r4
 80003a4:	4647      	mov	r7, r8
 80003a6:	40be      	lsls	r6, r7
 80003a8:	0032      	movs	r2, r6
 80003aa:	1a80      	subs	r0, r0, r2
 80003ac:	4199      	sbcs	r1, r3
 80003ae:	9000      	str	r0, [sp, #0]
 80003b0:	9101      	str	r1, [sp, #4]
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x84>
 80003b4:	42a3      	cmp	r3, r4
 80003b6:	d8bc      	bhi.n	8000332 <__udivmoddi4+0xc2>
 80003b8:	e783      	b.n	80002c2 <__udivmoddi4+0x52>
 80003ba:	4642      	mov	r2, r8
 80003bc:	2320      	movs	r3, #32
 80003be:	2100      	movs	r1, #0
 80003c0:	1a9b      	subs	r3, r3, r2
 80003c2:	2200      	movs	r2, #0
 80003c4:	9100      	str	r1, [sp, #0]
 80003c6:	9201      	str	r2, [sp, #4]
 80003c8:	2201      	movs	r2, #1
 80003ca:	40da      	lsrs	r2, r3
 80003cc:	9201      	str	r2, [sp, #4]
 80003ce:	e786      	b.n	80002de <__udivmoddi4+0x6e>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	1a9b      	subs	r3, r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	4646      	mov	r6, r8
 80003da:	409a      	lsls	r2, r3
 80003dc:	0023      	movs	r3, r4
 80003de:	40f3      	lsrs	r3, r6
 80003e0:	4644      	mov	r4, r8
 80003e2:	4313      	orrs	r3, r2
 80003e4:	002a      	movs	r2, r5
 80003e6:	40e2      	lsrs	r2, r4
 80003e8:	001c      	movs	r4, r3
 80003ea:	465b      	mov	r3, fp
 80003ec:	0015      	movs	r5, r2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dad4      	bge.n	800039c <__udivmoddi4+0x12c>
 80003f2:	4642      	mov	r2, r8
 80003f4:	002f      	movs	r7, r5
 80003f6:	2320      	movs	r3, #32
 80003f8:	0026      	movs	r6, r4
 80003fa:	4097      	lsls	r7, r2
 80003fc:	1a9b      	subs	r3, r3, r2
 80003fe:	40de      	lsrs	r6, r3
 8000400:	003b      	movs	r3, r7
 8000402:	4333      	orrs	r3, r6
 8000404:	e7cd      	b.n	80003a2 <__udivmoddi4+0x132>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzdi2>:
 8000408:	b510      	push	{r4, lr}
 800040a:	2900      	cmp	r1, #0
 800040c:	d103      	bne.n	8000416 <__clzdi2+0xe>
 800040e:	f000 f807 	bl	8000420 <__clzsi2>
 8000412:	3020      	adds	r0, #32
 8000414:	e002      	b.n	800041c <__clzdi2+0x14>
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	f000 f802 	bl	8000420 <__clzsi2>
 800041c:	bd10      	pop	{r4, pc}
 800041e:	46c0      	nop			; (mov r8, r8)

08000420 <__clzsi2>:
 8000420:	211c      	movs	r1, #28
 8000422:	2301      	movs	r3, #1
 8000424:	041b      	lsls	r3, r3, #16
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0xe>
 800042a:	0c00      	lsrs	r0, r0, #16
 800042c:	3910      	subs	r1, #16
 800042e:	0a1b      	lsrs	r3, r3, #8
 8000430:	4298      	cmp	r0, r3
 8000432:	d301      	bcc.n	8000438 <__clzsi2+0x18>
 8000434:	0a00      	lsrs	r0, r0, #8
 8000436:	3908      	subs	r1, #8
 8000438:	091b      	lsrs	r3, r3, #4
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0x22>
 800043e:	0900      	lsrs	r0, r0, #4
 8000440:	3904      	subs	r1, #4
 8000442:	a202      	add	r2, pc, #8	; (adr r2, 800044c <__clzsi2+0x2c>)
 8000444:	5c10      	ldrb	r0, [r2, r0]
 8000446:	1840      	adds	r0, r0, r1
 8000448:	4770      	bx	lr
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	02020304 	.word	0x02020304
 8000450:	01010101 	.word	0x01010101
	...

0800045c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000460:	f000 fc26 	bl	8000cb0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000464:	f000 f82b 	bl	80004be <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000468:	f000 f954 	bl	8000714 <MX_GPIO_Init>
	MX_SPI1_Init();
 800046c:	f000 f870 	bl	8000550 <MX_SPI1_Init>
	MX_USART2_UART_Init();
 8000470:	f000 f91c 	bl	80006ac <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8000474:	f000 f8ec 	bl	8000650 <MX_TIM16_Init>
	MX_SPI2_Init();
 8000478:	f000 f8b0 	bl	80005dc <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	extern void LedBlink(uint8_t count);
// uint8_t x = 0;
	IS31FL3743B_init();
 800047c:	f002 feb2 	bl	80031e4 <IS31FL3743B_init>

	IS31FL3743B_SetDotColor(11, White, full);
 8000480:	22fe      	movs	r2, #254	; 0xfe
 8000482:	2107      	movs	r1, #7
 8000484:	200b      	movs	r0, #11
 8000486:	f002 ff3b 	bl	8003300 <IS31FL3743B_SetDotColor>
	IS31FL3743B_SetDotColor(16, White, full);
 800048a:	22fe      	movs	r2, #254	; 0xfe
 800048c:	2107      	movs	r1, #7
 800048e:	2010      	movs	r0, #16
 8000490:	f002 ff36 	bl	8003300 <IS31FL3743B_SetDotColor>
	IS31FL3743B_SetDotColor(38, White, full);
 8000494:	22fe      	movs	r2, #254	; 0xfe
 8000496:	2107      	movs	r1, #7
 8000498:	2026      	movs	r0, #38	; 0x26
 800049a:	f002 ff31 	bl	8003300 <IS31FL3743B_SetDotColor>

	IS31FL3743B_SetDotColor(41, White, full);
 800049e:	22fe      	movs	r2, #254	; 0xfe
 80004a0:	2107      	movs	r1, #7
 80004a2:	2029      	movs	r0, #41	; 0x29
 80004a4:	f002 ff2c 	bl	8003300 <IS31FL3743B_SetDotColor>
	IS31FL3743B_SetDotColor(44, White, full);
 80004a8:	22fe      	movs	r2, #254	; 0xfe
 80004aa:	2107      	movs	r1, #7
 80004ac:	202c      	movs	r0, #44	; 0x2c
 80004ae:	f002 ff27 	bl	8003300 <IS31FL3743B_SetDotColor>
	IS31FL3743B_SetDotColor(45, White, full);
 80004b2:	22fe      	movs	r2, #254	; 0xfe
 80004b4:	2107      	movs	r1, #7
 80004b6:	202d      	movs	r0, #45	; 0x2d
 80004b8:	f002 ff22 	bl	8003300 <IS31FL3743B_SetDotColor>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80004bc:	e7fe      	b.n	80004bc <main+0x60>

080004be <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004be:	b590      	push	{r4, r7, lr}
 80004c0:	b093      	sub	sp, #76	; 0x4c
 80004c2:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004c4:	2410      	movs	r4, #16
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	0018      	movs	r0, r3
 80004ca:	2338      	movs	r3, #56	; 0x38
 80004cc:	001a      	movs	r2, r3
 80004ce:	2100      	movs	r1, #0
 80004d0:	f003 f84a 	bl	8003568 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004d4:	003b      	movs	r3, r7
 80004d6:	0018      	movs	r0, r3
 80004d8:	2310      	movs	r3, #16
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f003 f843 	bl	8003568 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e2:	2380      	movs	r3, #128	; 0x80
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 ff32 	bl	8001350 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2202      	movs	r2, #2
 80004f0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2280      	movs	r2, #128	; 0x80
 80004f6:	0052      	lsls	r2, r2, #1
 80004f8:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2240      	movs	r2, #64	; 0x40
 8000504:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800050c:	193b      	adds	r3, r7, r4
 800050e:	0018      	movs	r0, r3
 8000510:	f000 ff6a 	bl	80013e8 <HAL_RCC_OscConfig>
 8000514:	1e03      	subs	r3, r0, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x5e>
		Error_Handler();
 8000518:	f000 f996 	bl	8000848 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800051c:	003b      	movs	r3, r7
 800051e:	2207      	movs	r2, #7
 8000520:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000522:	003b      	movs	r3, r7
 8000524:	2200      	movs	r2, #0
 8000526:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000528:	003b      	movs	r3, r7
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800052e:	003b      	movs	r3, r7
 8000530:	2200      	movs	r2, #0
 8000532:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000534:	003b      	movs	r3, r7
 8000536:	2100      	movs	r1, #0
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fa75 	bl	8001a28 <HAL_RCC_ClockConfig>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <SystemClock_Config+0x88>
		Error_Handler();
 8000542:	f000 f981 	bl	8000848 <Error_Handler>
	}
}
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	46bd      	mov	sp, r7
 800054a:	b013      	add	sp, #76	; 0x4c
 800054c:	bd90      	pop	{r4, r7, pc}
	...

08000550 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000554:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_SPI1_Init+0x84>)
 8000556:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <MX_SPI1_Init+0x88>)
 8000558:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <MX_SPI1_Init+0x84>)
 800055c:	2282      	movs	r2, #130	; 0x82
 800055e:	0052      	lsls	r2, r2, #1
 8000560:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_SPI1_Init+0x84>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_SPI1_Init+0x84>)
 800056a:	22e0      	movs	r2, #224	; 0xe0
 800056c:	00d2      	lsls	r2, r2, #3
 800056e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_SPI1_Init+0x84>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_SPI1_Init+0x84>)
 8000578:	2200      	movs	r2, #0
 800057a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_SPI1_Init+0x84>)
 800057e:	2280      	movs	r2, #128	; 0x80
 8000580:	0092      	lsls	r2, r2, #2
 8000582:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <MX_SPI1_Init+0x84>)
 8000586:	2218      	movs	r2, #24
 8000588:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_SPI1_Init+0x84>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_SPI1_Init+0x84>)
 8000592:	2200      	movs	r2, #0
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_SPI1_Init+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <MX_SPI1_Init+0x84>)
 800059e:	2207      	movs	r2, #7
 80005a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80005a2:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <MX_SPI1_Init+0x84>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <MX_SPI1_Init+0x84>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80005ae:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <MX_SPI1_Init+0x84>)
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fbe3 	bl	8001d7c <HAL_SPI_Init>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_SPI1_Init+0x6e>
		Error_Handler();
 80005ba:	f000 f945 	bl	8000848 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */
	HAL_GPIO_WritePin(SCK_GPIO_Port, SCK_Pin, 0);
 80005be:	23a0      	movs	r3, #160	; 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	2200      	movs	r2, #0
 80005c4:	2120      	movs	r1, #32
 80005c6:	0018      	movs	r0, r3
 80005c8:	f000 fea4 	bl	8001314 <HAL_GPIO_WritePin>
	/* USER CODE END SPI1_Init 2 */

}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	20000104 	.word	0x20000104
 80005d8:	40013000 	.word	0x40013000

080005dc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <MX_SPI2_Init+0x6c>)
 80005e2:	4a1a      	ldr	r2, [pc, #104]	; (800064c <MX_SPI2_Init+0x70>)
 80005e4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_SLAVE;
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_SPI2_Init+0x6c>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_SPI2_Init+0x6c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_SPI2_Init+0x6c>)
 80005f4:	22e0      	movs	r2, #224	; 0xe0
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_SPI2_Init+0x6c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_SPI2_Init+0x6c>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_SPI2_Init+0x6c>)
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	619a      	str	r2, [r3, #24]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_SPI2_Init+0x6c>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_SPI2_Init+0x6c>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_SPI2_Init+0x6c>)
 800061c:	2200      	movs	r2, #0
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_SPI2_Init+0x6c>)
 8000622:	2207      	movs	r2, #7
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_SPI2_Init+0x6c>)
 8000628:	2200      	movs	r2, #0
 800062a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_SPI2_Init+0x6c>)
 800062e:	2200      	movs	r2, #0
 8000630:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <MX_SPI2_Init+0x6c>)
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fba1 	bl	8001d7c <HAL_SPI_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_SPI2_Init+0x66>
		Error_Handler();
 800063e:	f000 f903 	bl	8000848 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	2000009c 	.word	0x2000009c
 800064c:	40003800 	.word	0x40003800

08000650 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_TIM16_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_TIM16_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 1600 - 1;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_TIM16_Init+0x4c>)
 800065c:	4a11      	ldr	r2, [pc, #68]	; (80006a4 <MX_TIM16_Init+0x54>)
 800065e:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_TIM16_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 8000666:	4b0d      	ldr	r3, [pc, #52]	; (800069c <MX_TIM16_Init+0x4c>)
 8000668:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_TIM16_Init+0x58>)
 800066a:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_TIM16_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000672:	4b0a      	ldr	r3, [pc, #40]	; (800069c <MX_TIM16_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_TIM16_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 800067e:	4b07      	ldr	r3, [pc, #28]	; (800069c <MX_TIM16_Init+0x4c>)
 8000680:	0018      	movs	r0, r3
 8000682:	f001 ffe9 	bl	8002658 <HAL_TIM_Base_Init>
 8000686:	1e03      	subs	r3, r0, #0
 8000688:	d001      	beq.n	800068e <MX_TIM16_Init+0x3e>
		Error_Handler();
 800068a:	f000 f8dd 	bl	8000848 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */
	HAL_TIM_Base_Start(&(MY_TIM_HANDLE));
 800068e:	4b03      	ldr	r3, [pc, #12]	; (800069c <MX_TIM16_Init+0x4c>)
 8000690:	0018      	movs	r0, r3
 8000692:	f002 f839 	bl	8002708 <HAL_TIM_Base_Start>
	/* USER CODE END TIM16_Init 2 */

}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200001f8 	.word	0x200001f8
 80006a0:	40014400 	.word	0x40014400
 80006a4:	0000063f 	.word	0x0000063f
 80006a8:	0000ffff 	.word	0x0000ffff

080006ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006b0:	4b16      	ldr	r3, [pc, #88]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006b2:	4a17      	ldr	r2, [pc, #92]	; (8000710 <MX_USART2_UART_Init+0x64>)
 80006b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006b8:	22e1      	movs	r2, #225	; 0xe1
 80006ba:	0252      	lsls	r2, r2, #9
 80006bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b0d      	ldr	r3, [pc, #52]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b0a      	ldr	r3, [pc, #40]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006f4:	4b05      	ldr	r3, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x60>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 f8c8 	bl	800288c <HAL_UART_Init>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000700:	f000 f8a2 	bl	8000848 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000168 	.word	0x20000168
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b089      	sub	sp, #36	; 0x24
 8000718:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800071a:	240c      	movs	r4, #12
 800071c:	193b      	adds	r3, r7, r4
 800071e:	0018      	movs	r0, r3
 8000720:	2314      	movs	r3, #20
 8000722:	001a      	movs	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	f002 ff1f 	bl	8003568 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <MX_GPIO_Init+0xc8>)
 800072c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072e:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_GPIO_Init+0xc8>)
 8000730:	2102      	movs	r1, #2
 8000732:	430a      	orrs	r2, r1
 8000734:	635a      	str	r2, [r3, #52]	; 0x34
 8000736:	4b29      	ldr	r3, [pc, #164]	; (80007dc <MX_GPIO_Init+0xc8>)
 8000738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073a:	2202      	movs	r2, #2
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000742:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_GPIO_Init+0xc8>)
 8000744:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000746:	4b25      	ldr	r3, [pc, #148]	; (80007dc <MX_GPIO_Init+0xc8>)
 8000748:	2101      	movs	r1, #1
 800074a:	430a      	orrs	r2, r1
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_GPIO_Init+0xc8>)
 8000750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000752:	2201      	movs	r2, #1
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 800075a:	23a0      	movs	r3, #160	; 0xa0
 800075c:	05db      	lsls	r3, r3, #23
 800075e:	2201      	movs	r2, #1
 8000760:	2110      	movs	r1, #16
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fdd6 	bl	8001314 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SDB_GPIO_Port, SDB_Pin, GPIO_PIN_RESET);
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	0119      	lsls	r1, r3, #4
 800076c:	23a0      	movs	r3, #160	; 0xa0
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	2200      	movs	r2, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f000 fdce 	bl	8001314 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0xcc>)
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fdc8 	bl	8001314 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : CS_Pin SDB_Pin */
	GPIO_InitStruct.Pin = CS_Pin | SDB_Pin;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2281      	movs	r2, #129	; 0x81
 8000788:	0112      	lsls	r2, r2, #4
 800078a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2201      	movs	r2, #1
 8000790:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	193a      	adds	r2, r7, r4
 80007a0:	23a0      	movs	r3, #160	; 0xa0
 80007a2:	05db      	lsls	r3, r3, #23
 80007a4:	0011      	movs	r1, r2
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fc50 	bl	800104c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD1_Pin */
	GPIO_InitStruct.Pin = LD1_Pin;
 80007ac:	0021      	movs	r1, r4
 80007ae:	187b      	adds	r3, r7, r1
 80007b0:	2210      	movs	r2, #16
 80007b2:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	2201      	movs	r2, #1
 80007b8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2201      	movs	r2, #1
 80007c4:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	4a05      	ldr	r2, [pc, #20]	; (80007e0 <MX_GPIO_Init+0xcc>)
 80007ca:	0019      	movs	r1, r3
 80007cc:	0010      	movs	r0, r2
 80007ce:	f000 fc3d 	bl	800104c <HAL_GPIO_Init>

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b009      	add	sp, #36	; 0x24
 80007d8:	bd90      	pop	{r4, r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	40021000 	.word	0x40021000
 80007e0:	50000400 	.word	0x50000400

080007e4 <LedBlink>:

/* USER CODE BEGIN 4 */
extern void LedBlink(uint8_t HowManyTimes) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
	for (uint8_t count = 0; count < HowManyTimes; count++) {
 80007f0:	230f      	movs	r3, #15
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
 80007f8:	e017      	b.n	800082a <LedBlink+0x46>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 80007fa:	4b12      	ldr	r3, [pc, #72]	; (8000844 <LedBlink+0x60>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	2110      	movs	r1, #16
 8000800:	0018      	movs	r0, r3
 8000802:	f000 fd87 	bl	8001314 <HAL_GPIO_WritePin>
		MyDelay_ms(50);
 8000806:	2032      	movs	r0, #50	; 0x32
 8000808:	f002 fe5c 	bl	80034c4 <MyDelay_ms>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 800080c:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <LedBlink+0x60>)
 800080e:	2200      	movs	r2, #0
 8000810:	2110      	movs	r1, #16
 8000812:	0018      	movs	r0, r3
 8000814:	f000 fd7e 	bl	8001314 <HAL_GPIO_WritePin>
		MyDelay_ms(50);
 8000818:	2032      	movs	r0, #50	; 0x32
 800081a:	f002 fe53 	bl	80034c4 <MyDelay_ms>
	for (uint8_t count = 0; count < HowManyTimes; count++) {
 800081e:	210f      	movs	r1, #15
 8000820:	187b      	adds	r3, r7, r1
 8000822:	781a      	ldrb	r2, [r3, #0]
 8000824:	187b      	adds	r3, r7, r1
 8000826:	3201      	adds	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
 800082a:	230f      	movs	r3, #15
 800082c:	18fa      	adds	r2, r7, r3
 800082e:	1dfb      	adds	r3, r7, #7
 8000830:	7812      	ldrb	r2, [r2, #0]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	429a      	cmp	r2, r3
 8000836:	d3e0      	bcc.n	80007fa <LedBlink+0x16>
	}
}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b004      	add	sp, #16
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	50000400 	.word	0x50000400

08000848 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
}
 800084e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000850:	e7fe      	b.n	8000850 <Error_Handler+0x8>
	...

08000854 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x44>)
 800085c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <HAL_MspInit+0x44>)
 8000860:	2101      	movs	r1, #1
 8000862:	430a      	orrs	r2, r1
 8000864:	641a      	str	r2, [r3, #64]	; 0x40
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x44>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	2201      	movs	r2, #1
 800086c:	4013      	ands	r3, r2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_MspInit+0x44>)
 8000874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_MspInit+0x44>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	0549      	lsls	r1, r1, #21
 800087c:	430a      	orrs	r2, r1
 800087e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_MspInit+0x44>)
 8000882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	055b      	lsls	r3, r3, #21
 8000888:	4013      	ands	r3, r2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b002      	add	sp, #8
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40021000 	.word	0x40021000

0800089c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b08d      	sub	sp, #52	; 0x34
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	241c      	movs	r4, #28
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f002 fe5a 	bl	8003568 <memset>
  if(hspi->Instance==SPI1)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a4c      	ldr	r2, [pc, #304]	; (80009ec <HAL_SPI_MspInit+0x150>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d139      	bne.n	8000932 <HAL_SPI_MspInit+0x96>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008be:	4b4c      	ldr	r3, [pc, #304]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 80008c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c2:	4b4b      	ldr	r3, [pc, #300]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 80008c4:	2180      	movs	r1, #128	; 0x80
 80008c6:	0149      	lsls	r1, r1, #5
 80008c8:	430a      	orrs	r2, r1
 80008ca:	641a      	str	r2, [r3, #64]	; 0x40
 80008cc:	4b48      	ldr	r3, [pc, #288]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 80008ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	015b      	lsls	r3, r3, #5
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
 80008d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b45      	ldr	r3, [pc, #276]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 80008dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008de:	4b44      	ldr	r3, [pc, #272]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	635a      	str	r2, [r3, #52]	; 0x34
 80008e6:	4b42      	ldr	r3, [pc, #264]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 80008e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ea:	2201      	movs	r2, #1
 80008ec:	4013      	ands	r3, r2
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SCK_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80008f2:	0021      	movs	r1, r4
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	22e0      	movs	r2, #224	; 0xe0
 80008f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	187b      	adds	r3, r7, r1
 80008fc:	2202      	movs	r2, #2
 80008fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	187a      	adds	r2, r7, r1
 8000914:	23a0      	movs	r3, #160	; 0xa0
 8000916:	05db      	lsls	r3, r3, #23
 8000918:	0011      	movs	r1, r2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fb96 	bl	800104c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2019      	movs	r0, #25
 8000926:	f000 faf5 	bl	8000f14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800092a:	2019      	movs	r0, #25
 800092c:	f000 fb07 	bl	8000f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000930:	e057      	b.n	80009e2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a2f      	ldr	r2, [pc, #188]	; (80009f4 <HAL_SPI_MspInit+0x158>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d152      	bne.n	80009e2 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800093c:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 800093e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000940:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	01c9      	lsls	r1, r1, #7
 8000946:	430a      	orrs	r2, r1
 8000948:	63da      	str	r2, [r3, #60]	; 0x3c
 800094a:	4b29      	ldr	r3, [pc, #164]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 800094c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	01db      	lsls	r3, r3, #7
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 800095a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 800095e:	2102      	movs	r1, #2
 8000960:	430a      	orrs	r2, r1
 8000962:	635a      	str	r2, [r3, #52]	; 0x34
 8000964:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 8000966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000968:	2202      	movs	r2, #2
 800096a:	4013      	ands	r3, r2
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 8000972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 8000976:	2101      	movs	r1, #1
 8000978:	430a      	orrs	r2, r1
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <HAL_SPI_MspInit+0x154>)
 800097e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000980:	2201      	movs	r2, #1
 8000982:	4013      	ands	r3, r2
 8000984:	60bb      	str	r3, [r7, #8]
 8000986:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_2;
 8000988:	241c      	movs	r4, #28
 800098a:	193b      	adds	r3, r7, r4
 800098c:	2284      	movs	r2, #132	; 0x84
 800098e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	193b      	adds	r3, r7, r4
 8000992:	2202      	movs	r2, #2
 8000994:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	193b      	adds	r3, r7, r4
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_SPI2;
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	2201      	movs	r2, #1
 80009a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	4a13      	ldr	r2, [pc, #76]	; (80009f8 <HAL_SPI_MspInit+0x15c>)
 80009ac:	0019      	movs	r1, r3
 80009ae:	0010      	movs	r0, r2
 80009b0:	f000 fb4c 	bl	800104c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009b4:	0021      	movs	r1, r4
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2201      	movs	r2, #1
 80009ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2202      	movs	r2, #2
 80009c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	187a      	adds	r2, r7, r1
 80009d6:	23a0      	movs	r3, #160	; 0xa0
 80009d8:	05db      	lsls	r3, r3, #23
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fb35 	bl	800104c <HAL_GPIO_Init>
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	b00d      	add	sp, #52	; 0x34
 80009e8:	bd90      	pop	{r4, r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	40013000 	.word	0x40013000
 80009f0:	40021000 	.word	0x40021000
 80009f4:	40003800 	.word	0x40003800
 80009f8:	50000400 	.word	0x50000400

080009fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <HAL_TIM_Base_MspInit+0x38>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d10d      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a14:	2180      	movs	r1, #128	; 0x80
 8000a16:	0289      	lsls	r1, r1, #10
 8000a18:	430a      	orrs	r2, r1
 8000a1a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a20:	2380      	movs	r3, #128	; 0x80
 8000a22:	029b      	lsls	r3, r3, #10
 8000a24:	4013      	ands	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b004      	add	sp, #16
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	40014400 	.word	0x40014400
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b08b      	sub	sp, #44	; 0x2c
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	2414      	movs	r4, #20
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	0018      	movs	r0, r3
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2100      	movs	r1, #0
 8000a50:	f002 fd8a 	bl	8003568 <memset>
  if(huart->Instance==USART2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <HAL_UART_MspInit+0x8c>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d130      	bne.n	8000ac0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a62:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0289      	lsls	r1, r1, #10
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	029b      	lsls	r3, r3, #10
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b14      	ldr	r3, [pc, #80]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	430a      	orrs	r2, r1
 8000a84:	635a      	str	r2, [r3, #52]	; 0x34
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a92:	0021      	movs	r1, r4
 8000a94:	187b      	adds	r3, r7, r1
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	2202      	movs	r2, #2
 8000a9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	187b      	adds	r3, r7, r1
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2201      	movs	r2, #1
 8000ab0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	187a      	adds	r2, r7, r1
 8000ab4:	23a0      	movs	r3, #160	; 0xa0
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	0011      	movs	r1, r2
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 fac6 	bl	800104c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b00b      	add	sp, #44	; 0x2c
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	40004400 	.word	0x40004400
 8000acc:	40021000 	.word	0x40021000

08000ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <NMI_Handler+0x4>

08000ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ada:	e7fe      	b.n	8000ada <HardFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae0:	46c0      	nop			; (mov r8, r8)
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f946 	bl	8000d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <SPI1_IRQHandler+0x14>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 fa8a 	bl	8002020 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	20000104 	.word	0x20000104

08000b18 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	e00a      	b.n	8000b40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b2a:	e000      	b.n	8000b2e <_read+0x16>
 8000b2c:	bf00      	nop
 8000b2e:	0001      	movs	r1, r0
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	b2ca      	uxtb	r2, r1
 8000b38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	dbf0      	blt.n	8000b2a <_read+0x12>
	}

return len;
 8000b48:	687b      	ldr	r3, [r7, #4]
}
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b006      	add	sp, #24
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	60f8      	str	r0, [r7, #12]
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	e009      	b.n	8000b78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	60ba      	str	r2, [r7, #8]
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	e000      	b.n	8000b72 <_write+0x20>
 8000b70:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf1      	blt.n	8000b64 <_write+0x12>
	}
	return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	0018      	movs	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b006      	add	sp, #24
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_close>:

int _close(int file)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
	return -1;
 8000b92:	2301      	movs	r3, #1
 8000b94:	425b      	negs	r3, r3
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2280      	movs	r2, #128	; 0x80
 8000bac:	0192      	lsls	r2, r2, #6
 8000bae:	605a      	str	r2, [r3, #4]
	return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <_isatty>:

int _isatty(int file)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bc2:	2301      	movs	r3, #1
}
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b002      	add	sp, #8
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
	return 0;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	0018      	movs	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b004      	add	sp, #16
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	; (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	18d3      	adds	r3, r2, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f002 fc7e 	bl	8003514 <__errno>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	425b      	negs	r3, r3
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	; (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	18d2      	adds	r2, r2, r3
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <_sbrk+0x64>)
 8000c34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b006      	add	sp, #24
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20002000 	.word	0x20002000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	2000008c 	.word	0x2000008c
 8000c4c:	20000258 	.word	0x20000258

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c60:	f7ff fff6 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8a:	f002 fc49 	bl	8003520 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c8e:	f7ff fbe5 	bl	800045c <main>

08000c92 <LoopForever>:

LoopForever:
  b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   r0, =_estack
 8000c94:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ca0:	08004604 	.word	0x08004604
  ldr r2, =_sbss
 8000ca4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ca8:	20000258 	.word	0x20000258

08000cac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC1_IRQHandler>
	...

08000cb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb6:	1dfb      	adds	r3, r7, #7
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <HAL_Init+0x3c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_Init+0x3c>)
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	0049      	lsls	r1, r1, #1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cca:	2003      	movs	r0, #3
 8000ccc:	f000 f810 	bl	8000cf0 <HAL_InitTick>
 8000cd0:	1e03      	subs	r3, r0, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	701a      	strb	r2, [r3, #0]
 8000cda:	e001      	b.n	8000ce0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fdba 	bl	8000854 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	781b      	ldrb	r3, [r3, #0]
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b002      	add	sp, #8
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_InitTick+0x88>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d02b      	beq.n	8000d60 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d08:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <HAL_InitTick+0x8c>)
 8000d0a:	681c      	ldr	r4, [r3, #0]
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	; (8000d78 <HAL_InitTick+0x88>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	0019      	movs	r1, r3
 8000d12:	23fa      	movs	r3, #250	; 0xfa
 8000d14:	0098      	lsls	r0, r3, #2
 8000d16:	f7ff f9ff 	bl	8000118 <__udivsi3>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	0020      	movs	r0, r4
 8000d20:	f7ff f9fa 	bl	8000118 <__udivsi3>
 8000d24:	0003      	movs	r3, r0
 8000d26:	0018      	movs	r0, r3
 8000d28:	f000 f919 	bl	8000f5e <HAL_SYSTICK_Config>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d112      	bne.n	8000d56 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d80a      	bhi.n	8000d4c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f8e8 	bl	8000f14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_InitTick+0x90>)
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e00d      	b.n	8000d68 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	e008      	b.n	8000d68 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d56:	230f      	movs	r3, #15
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
 8000d5e:	e003      	b.n	8000d68 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d60:	230f      	movs	r3, #15
 8000d62:	18fb      	adds	r3, r7, r3
 8000d64:	2201      	movs	r2, #1
 8000d66:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d68:	230f      	movs	r3, #15
 8000d6a:	18fb      	adds	r3, r7, r3
 8000d6c:	781b      	ldrb	r3, [r3, #0]
}
 8000d6e:	0018      	movs	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b005      	add	sp, #20
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_IncTick+0x1c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <HAL_IncTick+0x20>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	18d2      	adds	r2, r2, r3
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_IncTick+0x20>)
 8000d96:	601a      	str	r2, [r3, #0]
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	46c0      	nop			; (mov r8, r8)
 8000da0:	20000008 	.word	0x20000008
 8000da4:	20000244 	.word	0x20000244

08000da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dac:	4b02      	ldr	r3, [pc, #8]	; (8000db8 <HAL_GetTick+0x10>)
 8000dae:	681b      	ldr	r3, [r3, #0]
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	20000244 	.word	0x20000244

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	1dfb      	adds	r3, r7, #7
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8000dce:	d809      	bhi.n	8000de4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	231f      	movs	r3, #31
 8000dd8:	401a      	ands	r2, r3
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <__NVIC_EnableIRQ+0x30>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4091      	lsls	r1, r2
 8000de0:	000a      	movs	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	0002      	movs	r2, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	2b7f      	cmp	r3, #127	; 0x7f
 8000e04:	d828      	bhi.n	8000e58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e06:	4a2f      	ldr	r2, [pc, #188]	; (8000ec4 <__NVIC_SetPriority+0xd4>)
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	089b      	lsrs	r3, r3, #2
 8000e10:	33c0      	adds	r3, #192	; 0xc0
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	589b      	ldr	r3, [r3, r2]
 8000e16:	1dfa      	adds	r2, r7, #7
 8000e18:	7812      	ldrb	r2, [r2, #0]
 8000e1a:	0011      	movs	r1, r2
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	400a      	ands	r2, r1
 8000e20:	00d2      	lsls	r2, r2, #3
 8000e22:	21ff      	movs	r1, #255	; 0xff
 8000e24:	4091      	lsls	r1, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	43d2      	mvns	r2, r2
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	22ff      	movs	r2, #255	; 0xff
 8000e34:	401a      	ands	r2, r3
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	4003      	ands	r3, r0
 8000e40:	00db      	lsls	r3, r3, #3
 8000e42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <__NVIC_SetPriority+0xd4>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	b25b      	sxtb	r3, r3
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	33c0      	adds	r3, #192	; 0xc0
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e56:	e031      	b.n	8000ebc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e58:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <__NVIC_SetPriority+0xd8>)
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	0019      	movs	r1, r3
 8000e60:	230f      	movs	r3, #15
 8000e62:	400b      	ands	r3, r1
 8000e64:	3b08      	subs	r3, #8
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	3306      	adds	r3, #6
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	18d3      	adds	r3, r2, r3
 8000e6e:	3304      	adds	r3, #4
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	1dfa      	adds	r2, r7, #7
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	0011      	movs	r1, r2
 8000e78:	2203      	movs	r2, #3
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	00d2      	lsls	r2, r2, #3
 8000e7e:	21ff      	movs	r1, #255	; 0xff
 8000e80:	4091      	lsls	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	43d2      	mvns	r2, r2
 8000e86:	401a      	ands	r2, r3
 8000e88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	22ff      	movs	r2, #255	; 0xff
 8000e90:	401a      	ands	r2, r3
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	0018      	movs	r0, r3
 8000e98:	2303      	movs	r3, #3
 8000e9a:	4003      	ands	r3, r0
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <__NVIC_SetPriority+0xd8>)
 8000ea2:	1dfb      	adds	r3, r7, #7
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	001c      	movs	r4, r3
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	4023      	ands	r3, r4
 8000eac:	3b08      	subs	r3, #8
 8000eae:	089b      	lsrs	r3, r3, #2
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	3306      	adds	r3, #6
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	18c3      	adds	r3, r0, r3
 8000eb8:	3304      	adds	r3, #4
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b003      	add	sp, #12
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	1e5a      	subs	r2, r3, #1
 8000ed8:	2380      	movs	r3, #128	; 0x80
 8000eda:	045b      	lsls	r3, r3, #17
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d301      	bcc.n	8000ee4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e010      	b.n	8000f06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <SysTick_Config+0x44>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	3a01      	subs	r2, #1
 8000eea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eec:	2301      	movs	r3, #1
 8000eee:	425b      	negs	r3, r3
 8000ef0:	2103      	movs	r1, #3
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff ff7c 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <SysTick_Config+0x44>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <SysTick_Config+0x44>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	0018      	movs	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60b9      	str	r1, [r7, #8]
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	210f      	movs	r1, #15
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	1c02      	adds	r2, r0, #0
 8000f24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	0011      	movs	r1, r2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b004      	add	sp, #16
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	0002      	movs	r2, r0
 8000f46:	1dfb      	adds	r3, r7, #7
 8000f48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	0018      	movs	r0, r3
 8000f52:	f7ff ff33 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff ffaf 	bl	8000ecc <SysTick_Config>
 8000f6e:	0003      	movs	r3, r0
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b002      	add	sp, #8
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f80:	210f      	movs	r1, #15
 8000f82:	187b      	adds	r3, r7, r1
 8000f84:	2200      	movs	r2, #0
 8000f86:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2225      	movs	r2, #37	; 0x25
 8000f8c:	5c9b      	ldrb	r3, [r3, r2]
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d006      	beq.n	8000fa2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2204      	movs	r2, #4
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
 8000fa0:	e049      	b.n	8001036 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	210e      	movs	r1, #14
 8000fae:	438a      	bics	r2, r1
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	438a      	bics	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fcc:	491d      	ldr	r1, [pc, #116]	; (8001044 <HAL_DMA_Abort_IT+0xcc>)
 8000fce:	400a      	ands	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <HAL_DMA_Abort_IT+0xd0>)
 8000fd4:	6859      	ldr	r1, [r3, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	221c      	movs	r2, #28
 8000fdc:	4013      	ands	r3, r2
 8000fde:	2201      	movs	r2, #1
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	4b19      	ldr	r3, [pc, #100]	; (8001048 <HAL_DMA_Abort_IT+0xd0>)
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000ff0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00c      	beq.n	8001014 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001004:	490f      	ldr	r1, [pc, #60]	; (8001044 <HAL_DMA_Abort_IT+0xcc>)
 8001006:	400a      	ands	r2, r1
 8001008:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001012:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2225      	movs	r2, #37	; 0x25
 8001018:	2101      	movs	r1, #1
 800101a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2224      	movs	r2, #36	; 0x24
 8001020:	2100      	movs	r1, #0
 8001022:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	0010      	movs	r0, r2
 8001034:	4798      	blx	r3
    }
  }
  return status;
 8001036:	230f      	movs	r3, #15
 8001038:	18fb      	adds	r3, r7, r3
 800103a:	781b      	ldrb	r3, [r3, #0]
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b004      	add	sp, #16
 8001042:	bd80      	pop	{r7, pc}
 8001044:	fffffeff 	.word	0xfffffeff
 8001048:	40020000 	.word	0x40020000

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	e147      	b.n	80012ec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	2101      	movs	r1, #1
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4091      	lsls	r1, r2
 8001066:	000a      	movs	r2, r1
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d100      	bne.n	8001074 <HAL_GPIO_Init+0x28>
 8001072:	e138      	b.n	80012e6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	2203      	movs	r2, #3
 800107a:	4013      	ands	r3, r2
 800107c:	2b01      	cmp	r3, #1
 800107e:	d005      	beq.n	800108c <HAL_GPIO_Init+0x40>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2203      	movs	r2, #3
 8001086:	4013      	ands	r3, r2
 8001088:	2b02      	cmp	r3, #2
 800108a:	d130      	bne.n	80010ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	409a      	lsls	r2, r3
 800109a:	0013      	movs	r3, r2
 800109c:	43da      	mvns	r2, r3
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	409a      	lsls	r2, r3
 80010ae:	0013      	movs	r3, r2
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010c2:	2201      	movs	r2, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
 80010c8:	0013      	movs	r3, r2
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	091b      	lsrs	r3, r3, #4
 80010d8:	2201      	movs	r2, #1
 80010da:	401a      	ands	r2, r3
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	409a      	lsls	r2, r3
 80010e0:	0013      	movs	r3, r2
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2203      	movs	r2, #3
 80010f4:	4013      	ands	r3, r2
 80010f6:	2b03      	cmp	r3, #3
 80010f8:	d017      	beq.n	800112a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	409a      	lsls	r2, r3
 8001108:	0013      	movs	r3, r2
 800110a:	43da      	mvns	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	4013      	ands	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2203      	movs	r2, #3
 8001130:	4013      	ands	r3, r2
 8001132:	2b02      	cmp	r3, #2
 8001134:	d123      	bne.n	800117e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	0092      	lsls	r2, r2, #2
 8001140:	58d3      	ldr	r3, [r2, r3]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2207      	movs	r2, #7
 8001148:	4013      	ands	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	220f      	movs	r2, #15
 800114e:	409a      	lsls	r2, r3
 8001150:	0013      	movs	r3, r2
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	691a      	ldr	r2, [r3, #16]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2107      	movs	r1, #7
 8001162:	400b      	ands	r3, r1
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	08da      	lsrs	r2, r3, #3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3208      	adds	r2, #8
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2203      	movs	r2, #3
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	401a      	ands	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	23c0      	movs	r3, #192	; 0xc0
 80011b8:	029b      	lsls	r3, r3, #10
 80011ba:	4013      	ands	r3, r2
 80011bc:	d100      	bne.n	80011c0 <HAL_GPIO_Init+0x174>
 80011be:	e092      	b.n	80012e6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80011c0:	4a50      	ldr	r2, [pc, #320]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3318      	adds	r3, #24
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	589b      	ldr	r3, [r3, r2]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2203      	movs	r2, #3
 80011d2:	4013      	ands	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	220f      	movs	r2, #15
 80011d8:	409a      	lsls	r2, r3
 80011da:	0013      	movs	r3, r2
 80011dc:	43da      	mvns	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	23a0      	movs	r3, #160	; 0xa0
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d013      	beq.n	8001216 <HAL_GPIO_Init+0x1ca>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a45      	ldr	r2, [pc, #276]	; (8001308 <HAL_GPIO_Init+0x2bc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d00d      	beq.n	8001212 <HAL_GPIO_Init+0x1c6>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a44      	ldr	r2, [pc, #272]	; (800130c <HAL_GPIO_Init+0x2c0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d007      	beq.n	800120e <HAL_GPIO_Init+0x1c2>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a43      	ldr	r2, [pc, #268]	; (8001310 <HAL_GPIO_Init+0x2c4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d101      	bne.n	800120a <HAL_GPIO_Init+0x1be>
 8001206:	2303      	movs	r3, #3
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x1cc>
 800120a:	2305      	movs	r3, #5
 800120c:	e004      	b.n	8001218 <HAL_GPIO_Init+0x1cc>
 800120e:	2302      	movs	r3, #2
 8001210:	e002      	b.n	8001218 <HAL_GPIO_Init+0x1cc>
 8001212:	2301      	movs	r3, #1
 8001214:	e000      	b.n	8001218 <HAL_GPIO_Init+0x1cc>
 8001216:	2300      	movs	r3, #0
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	2103      	movs	r1, #3
 800121c:	400a      	ands	r2, r1
 800121e:	00d2      	lsls	r2, r2, #3
 8001220:	4093      	lsls	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001228:	4936      	ldr	r1, [pc, #216]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	3318      	adds	r3, #24
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001236:	4a33      	ldr	r2, [pc, #204]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	58d3      	ldr	r3, [r2, r3]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43da      	mvns	r2, r3
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	025b      	lsls	r3, r3, #9
 8001250:	4013      	ands	r3, r2
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800125c:	4929      	ldr	r1, [pc, #164]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 800125e:	2280      	movs	r2, #128	; 0x80
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001264:	4a27      	ldr	r2, [pc, #156]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 8001266:	2384      	movs	r3, #132	; 0x84
 8001268:	58d3      	ldr	r3, [r2, r3]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43da      	mvns	r2, r3
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	029b      	lsls	r3, r3, #10
 800127e:	4013      	ands	r3, r2
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800128a:	491e      	ldr	r1, [pc, #120]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 800128c:	2284      	movs	r2, #132	; 0x84
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	035b      	lsls	r3, r3, #13
 80012aa:	4013      	ands	r3, r2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	039b      	lsls	r3, r3, #14
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_GPIO_Init+0x2b8>)
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	1e13      	subs	r3, r2, #0
 80012f6:	d000      	beq.n	80012fa <HAL_GPIO_Init+0x2ae>
 80012f8:	e6b0      	b.n	800105c <HAL_GPIO_Init+0x10>
  }
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b006      	add	sp, #24
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021800 	.word	0x40021800
 8001308:	50000400 	.word	0x50000400
 800130c:	50000800 	.word	0x50000800
 8001310:	50000c00 	.word	0x50000c00

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	0008      	movs	r0, r1
 800131e:	0011      	movs	r1, r2
 8001320:	1cbb      	adds	r3, r7, #2
 8001322:	1c02      	adds	r2, r0, #0
 8001324:	801a      	strh	r2, [r3, #0]
 8001326:	1c7b      	adds	r3, r7, #1
 8001328:	1c0a      	adds	r2, r1, #0
 800132a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800132c:	1c7b      	adds	r3, r7, #1
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d004      	beq.n	800133e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001334:	1cbb      	adds	r3, r7, #2
 8001336:	881a      	ldrh	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800133c:	e003      	b.n	8001346 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800133e:	1cbb      	adds	r3, r7, #2
 8001340:	881a      	ldrh	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	46bd      	mov	sp, r7
 800134a:	b002      	add	sp, #8
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800135e:	4013      	ands	r3, r2
 8001360:	0019      	movs	r1, r3
 8001362:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d11f      	bne.n	80013b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	0013      	movs	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	189b      	adds	r3, r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4912      	ldr	r1, [pc, #72]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001382:	0018      	movs	r0, r3
 8001384:	f7fe fec8 	bl	8000118 <__udivsi3>
 8001388:	0003      	movs	r3, r0
 800138a:	3301      	adds	r3, #1
 800138c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800138e:	e008      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	3b01      	subs	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	e001      	b.n	80013a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e009      	b.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	401a      	ands	r2, r3
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d0ed      	beq.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	0018      	movs	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b004      	add	sp, #16
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40007000 	.word	0x40007000
 80013c4:	fffff9ff 	.word	0xfffff9ff
 80013c8:	20000000 	.word	0x20000000
 80013cc:	000f4240 	.word	0x000f4240

080013d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	23e0      	movs	r3, #224	; 0xe0
 80013da:	01db      	lsls	r3, r3, #7
 80013dc:	4013      	ands	r3, r2
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e304      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x1e>
 8001404:	e07c      	b.n	8001500 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001406:	4bc3      	ldr	r3, [pc, #780]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2238      	movs	r2, #56	; 0x38
 800140c:	4013      	ands	r3, r2
 800140e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001410:	4bc0      	ldr	r3, [pc, #768]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	2203      	movs	r2, #3
 8001416:	4013      	ands	r3, r2
 8001418:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b10      	cmp	r3, #16
 800141e:	d102      	bne.n	8001426 <HAL_RCC_OscConfig+0x3e>
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b03      	cmp	r3, #3
 8001424:	d002      	beq.n	800142c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b08      	cmp	r3, #8
 800142a:	d10b      	bne.n	8001444 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	4bb9      	ldr	r3, [pc, #740]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	4013      	ands	r3, r2
 8001436:	d062      	beq.n	80014fe <HAL_RCC_OscConfig+0x116>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d15e      	bne.n	80014fe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e2df      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	025b      	lsls	r3, r3, #9
 800144c:	429a      	cmp	r2, r3
 800144e:	d107      	bne.n	8001460 <HAL_RCC_OscConfig+0x78>
 8001450:	4bb0      	ldr	r3, [pc, #704]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4baf      	ldr	r3, [pc, #700]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	0249      	lsls	r1, r1, #9
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e020      	b.n	80014a2 <HAL_RCC_OscConfig+0xba>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	23a0      	movs	r3, #160	; 0xa0
 8001466:	02db      	lsls	r3, r3, #11
 8001468:	429a      	cmp	r2, r3
 800146a:	d10e      	bne.n	800148a <HAL_RCC_OscConfig+0xa2>
 800146c:	4ba9      	ldr	r3, [pc, #676]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4ba8      	ldr	r3, [pc, #672]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	02c9      	lsls	r1, r1, #11
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	4ba6      	ldr	r3, [pc, #664]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4ba5      	ldr	r3, [pc, #660]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	0249      	lsls	r1, r1, #9
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	e00b      	b.n	80014a2 <HAL_RCC_OscConfig+0xba>
 800148a:	4ba2      	ldr	r3, [pc, #648]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4ba1      	ldr	r3, [pc, #644]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001490:	49a1      	ldr	r1, [pc, #644]	; (8001718 <HAL_RCC_OscConfig+0x330>)
 8001492:	400a      	ands	r2, r1
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	4b9f      	ldr	r3, [pc, #636]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b9e      	ldr	r3, [pc, #632]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800149c:	499f      	ldr	r1, [pc, #636]	; (800171c <HAL_RCC_OscConfig+0x334>)
 800149e:	400a      	ands	r2, r1
 80014a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d014      	beq.n	80014d4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014aa:	f7ff fc7d 	bl	8000da8 <HAL_GetTick>
 80014ae:	0003      	movs	r3, r0
 80014b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fc78 	bl	8000da8 <HAL_GetTick>
 80014b8:	0002      	movs	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e29e      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c6:	4b93      	ldr	r3, [pc, #588]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	029b      	lsls	r3, r3, #10
 80014ce:	4013      	ands	r3, r2
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0xcc>
 80014d2:	e015      	b.n	8001500 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc68 	bl	8000da8 <HAL_GetTick>
 80014d8:	0003      	movs	r3, r0
 80014da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014de:	f7ff fc63 	bl	8000da8 <HAL_GetTick>
 80014e2:	0002      	movs	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b64      	cmp	r3, #100	; 0x64
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e289      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f0:	4b88      	ldr	r3, [pc, #544]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	029b      	lsls	r3, r3, #10
 80014f8:	4013      	ands	r3, r2
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0xf6>
 80014fc:	e000      	b.n	8001500 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2202      	movs	r2, #2
 8001506:	4013      	ands	r3, r2
 8001508:	d100      	bne.n	800150c <HAL_RCC_OscConfig+0x124>
 800150a:	e099      	b.n	8001640 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800150c:	4b81      	ldr	r3, [pc, #516]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2238      	movs	r2, #56	; 0x38
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001516:	4b7f      	ldr	r3, [pc, #508]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2203      	movs	r2, #3
 800151c:	4013      	ands	r3, r2
 800151e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2b10      	cmp	r3, #16
 8001524:	d102      	bne.n	800152c <HAL_RCC_OscConfig+0x144>
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d002      	beq.n	8001532 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d135      	bne.n	800159e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001532:	4b78      	ldr	r3, [pc, #480]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4013      	ands	r3, r2
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x162>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e25c      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b72      	ldr	r3, [pc, #456]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4a74      	ldr	r2, [pc, #464]	; (8001720 <HAL_RCC_OscConfig+0x338>)
 8001550:	4013      	ands	r3, r2
 8001552:	0019      	movs	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	021a      	lsls	r2, r3, #8
 800155a:	4b6e      	ldr	r3, [pc, #440]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d112      	bne.n	800158c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001566:	4b6b      	ldr	r3, [pc, #428]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a6e      	ldr	r2, [pc, #440]	; (8001724 <HAL_RCC_OscConfig+0x33c>)
 800156c:	4013      	ands	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	691a      	ldr	r2, [r3, #16]
 8001574:	4b67      	ldr	r3, [pc, #412]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001576:	430a      	orrs	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800157a:	4b66      	ldr	r3, [pc, #408]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	0adb      	lsrs	r3, r3, #11
 8001580:	2207      	movs	r2, #7
 8001582:	4013      	ands	r3, r2
 8001584:	4a68      	ldr	r2, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x340>)
 8001586:	40da      	lsrs	r2, r3
 8001588:	4b68      	ldr	r3, [pc, #416]	; (800172c <HAL_RCC_OscConfig+0x344>)
 800158a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <HAL_RCC_OscConfig+0x348>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff fbad 	bl	8000cf0 <HAL_InitTick>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d051      	beq.n	800163e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e232      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d030      	beq.n	8001608 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015a6:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a5e      	ldr	r2, [pc, #376]	; (8001724 <HAL_RCC_OscConfig+0x33c>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	0019      	movs	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	4b57      	ldr	r3, [pc, #348]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	430a      	orrs	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80015ba:	4b56      	ldr	r3, [pc, #344]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b55      	ldr	r3, [pc, #340]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	0049      	lsls	r1, r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fbee 	bl	8000da8 <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fbe9 	bl	8000da8 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e20f      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e4:	4b4b      	ldr	r3, [pc, #300]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	4013      	ands	r3, r2
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b48      	ldr	r3, [pc, #288]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4a4a      	ldr	r2, [pc, #296]	; (8001720 <HAL_RCC_OscConfig+0x338>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	0019      	movs	r1, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	021a      	lsls	r2, r3, #8
 8001600:	4b44      	ldr	r3, [pc, #272]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001602:	430a      	orrs	r2, r1
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	e01b      	b.n	8001640 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001608:	4b42      	ldr	r3, [pc, #264]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800160e:	4949      	ldr	r1, [pc, #292]	; (8001734 <HAL_RCC_OscConfig+0x34c>)
 8001610:	400a      	ands	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fbc8 	bl	8000da8 <HAL_GetTick>
 8001618:	0003      	movs	r3, r0
 800161a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff fbc3 	bl	8000da8 <HAL_GetTick>
 8001622:	0002      	movs	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e1e9      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	4013      	ands	r3, r2
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x236>
 800163c:	e000      	b.n	8001640 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800163e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2208      	movs	r2, #8
 8001646:	4013      	ands	r3, r2
 8001648:	d047      	beq.n	80016da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2238      	movs	r2, #56	; 0x38
 8001650:	4013      	ands	r3, r2
 8001652:	2b18      	cmp	r3, #24
 8001654:	d10a      	bne.n	800166c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800165a:	2202      	movs	r2, #2
 800165c:	4013      	ands	r3, r2
 800165e:	d03c      	beq.n	80016da <HAL_RCC_OscConfig+0x2f2>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d138      	bne.n	80016da <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e1cb      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d019      	beq.n	80016a8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 8001676:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800167a:	2101      	movs	r1, #1
 800167c:	430a      	orrs	r2, r1
 800167e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fb92 	bl	8000da8 <HAL_GetTick>
 8001684:	0003      	movs	r3, r0
 8001686:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168a:	f7ff fb8d 	bl	8000da8 <HAL_GetTick>
 800168e:	0002      	movs	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1b3      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 800169e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a0:	2202      	movs	r2, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d0f1      	beq.n	800168a <HAL_RCC_OscConfig+0x2a2>
 80016a6:	e018      	b.n	80016da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	438a      	bics	r2, r1
 80016b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b4:	f7ff fb78 	bl	8000da8 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fb73 	bl	8000da8 <HAL_GetTick>
 80016c2:	0002      	movs	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e199      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d4:	2202      	movs	r2, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	d1f1      	bne.n	80016be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2204      	movs	r2, #4
 80016e0:	4013      	ands	r3, r2
 80016e2:	d100      	bne.n	80016e6 <HAL_RCC_OscConfig+0x2fe>
 80016e4:	e0c6      	b.n	8001874 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e6:	231f      	movs	r3, #31
 80016e8:	18fb      	adds	r3, r7, r3
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	2238      	movs	r2, #56	; 0x38
 80016f4:	4013      	ands	r3, r2
 80016f6:	2b20      	cmp	r3, #32
 80016f8:	d11e      	bne.n	8001738 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d100      	bne.n	8001706 <HAL_RCC_OscConfig+0x31e>
 8001704:	e0b6      	b.n	8001874 <HAL_RCC_OscConfig+0x48c>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d000      	beq.n	8001710 <HAL_RCC_OscConfig+0x328>
 800170e:	e0b1      	b.n	8001874 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e177      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
 8001714:	40021000 	.word	0x40021000
 8001718:	fffeffff 	.word	0xfffeffff
 800171c:	fffbffff 	.word	0xfffbffff
 8001720:	ffff80ff 	.word	0xffff80ff
 8001724:	ffffc7ff 	.word	0xffffc7ff
 8001728:	00f42400 	.word	0x00f42400
 800172c:	20000000 	.word	0x20000000
 8001730:	20000004 	.word	0x20000004
 8001734:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001738:	4bb4      	ldr	r3, [pc, #720]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 800173a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	055b      	lsls	r3, r3, #21
 8001740:	4013      	ands	r3, r2
 8001742:	d101      	bne.n	8001748 <HAL_RCC_OscConfig+0x360>
 8001744:	2301      	movs	r3, #1
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x362>
 8001748:	2300      	movs	r3, #0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d011      	beq.n	8001772 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4baf      	ldr	r3, [pc, #700]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001752:	4bae      	ldr	r3, [pc, #696]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0549      	lsls	r1, r1, #21
 8001758:	430a      	orrs	r2, r1
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c
 800175c:	4bab      	ldr	r3, [pc, #684]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 800175e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	055b      	lsls	r3, r3, #21
 8001764:	4013      	ands	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800176a:	231f      	movs	r3, #31
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001772:	4ba7      	ldr	r3, [pc, #668]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4013      	ands	r3, r2
 800177c:	d11a      	bne.n	80017b4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800177e:	4ba4      	ldr	r3, [pc, #656]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4ba3      	ldr	r3, [pc, #652]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 8001784:	2180      	movs	r1, #128	; 0x80
 8001786:	0049      	lsls	r1, r1, #1
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800178c:	f7ff fb0c 	bl	8000da8 <HAL_GetTick>
 8001790:	0003      	movs	r3, r0
 8001792:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001796:	f7ff fb07 	bl	8000da8 <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e12d      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a8:	4b99      	ldr	r3, [pc, #612]	; (8001a10 <HAL_RCC_OscConfig+0x628>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	d0f0      	beq.n	8001796 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d106      	bne.n	80017ca <HAL_RCC_OscConfig+0x3e2>
 80017bc:	4b93      	ldr	r3, [pc, #588]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017c0:	4b92      	ldr	r3, [pc, #584]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	430a      	orrs	r2, r1
 80017c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80017c8:	e01c      	b.n	8001804 <HAL_RCC_OscConfig+0x41c>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	2b05      	cmp	r3, #5
 80017d0:	d10c      	bne.n	80017ec <HAL_RCC_OscConfig+0x404>
 80017d2:	4b8e      	ldr	r3, [pc, #568]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017d6:	4b8d      	ldr	r3, [pc, #564]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017d8:	2104      	movs	r1, #4
 80017da:	430a      	orrs	r2, r1
 80017dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80017de:	4b8b      	ldr	r3, [pc, #556]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017e2:	4b8a      	ldr	r3, [pc, #552]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	430a      	orrs	r2, r1
 80017e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80017ea:	e00b      	b.n	8001804 <HAL_RCC_OscConfig+0x41c>
 80017ec:	4b87      	ldr	r3, [pc, #540]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017f0:	4b86      	ldr	r3, [pc, #536]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017f2:	2101      	movs	r1, #1
 80017f4:	438a      	bics	r2, r1
 80017f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80017f8:	4b84      	ldr	r3, [pc, #528]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017fc:	4b83      	ldr	r3, [pc, #524]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80017fe:	2104      	movs	r1, #4
 8001800:	438a      	bics	r2, r1
 8001802:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d014      	beq.n	8001836 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180c:	f7ff facc 	bl	8000da8 <HAL_GetTick>
 8001810:	0003      	movs	r3, r0
 8001812:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001814:	e009      	b.n	800182a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001816:	f7ff fac7 	bl	8000da8 <HAL_GetTick>
 800181a:	0002      	movs	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	4a7c      	ldr	r2, [pc, #496]	; (8001a14 <HAL_RCC_OscConfig+0x62c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e0ec      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2202      	movs	r2, #2
 8001830:	4013      	ands	r3, r2
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x42e>
 8001834:	e013      	b.n	800185e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001836:	f7ff fab7 	bl	8000da8 <HAL_GetTick>
 800183a:	0003      	movs	r3, r0
 800183c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800183e:	e009      	b.n	8001854 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7ff fab2 	bl	8000da8 <HAL_GetTick>
 8001844:	0002      	movs	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	4a72      	ldr	r2, [pc, #456]	; (8001a14 <HAL_RCC_OscConfig+0x62c>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0d7      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001854:	4b6d      	ldr	r3, [pc, #436]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001858:	2202      	movs	r2, #2
 800185a:	4013      	ands	r3, r2
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800185e:	231f      	movs	r3, #31
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d105      	bne.n	8001874 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 800186a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186c:	4b67      	ldr	r3, [pc, #412]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 800186e:	496a      	ldr	r1, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x630>)
 8001870:	400a      	ands	r2, r1
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d100      	bne.n	800187e <HAL_RCC_OscConfig+0x496>
 800187c:	e0c1      	b.n	8001a02 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187e:	4b63      	ldr	r3, [pc, #396]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2238      	movs	r2, #56	; 0x38
 8001884:	4013      	ands	r3, r2
 8001886:	2b10      	cmp	r3, #16
 8001888:	d100      	bne.n	800188c <HAL_RCC_OscConfig+0x4a4>
 800188a:	e081      	b.n	8001990 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d156      	bne.n	8001942 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001894:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b5c      	ldr	r3, [pc, #368]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 800189a:	4960      	ldr	r1, [pc, #384]	; (8001a1c <HAL_RCC_OscConfig+0x634>)
 800189c:	400a      	ands	r2, r1
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fa82 	bl	8000da8 <HAL_GetTick>
 80018a4:	0003      	movs	r3, r0
 80018a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018aa:	f7ff fa7d 	bl	8000da8 <HAL_GetTick>
 80018ae:	0002      	movs	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0a3      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	049b      	lsls	r3, r3, #18
 80018c4:	4013      	ands	r3, r2
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_RCC_OscConfig+0x638>)
 80018ce:	4013      	ands	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	431a      	orrs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	431a      	orrs	r2, r3
 80018f6:	4b45      	ldr	r3, [pc, #276]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80018f8:	430a      	orrs	r2, r1
 80018fa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fc:	4b43      	ldr	r3, [pc, #268]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	0449      	lsls	r1, r1, #17
 8001906:	430a      	orrs	r2, r1
 8001908:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800190a:	4b40      	ldr	r3, [pc, #256]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 800190c:	68da      	ldr	r2, [r3, #12]
 800190e:	4b3f      	ldr	r3, [pc, #252]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001910:	2180      	movs	r1, #128	; 0x80
 8001912:	0549      	lsls	r1, r1, #21
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fa46 	bl	8000da8 <HAL_GetTick>
 800191c:	0003      	movs	r3, r0
 800191e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001922:	f7ff fa41 	bl	8000da8 <HAL_GetTick>
 8001926:	0002      	movs	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e067      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001934:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2380      	movs	r3, #128	; 0x80
 800193a:	049b      	lsls	r3, r3, #18
 800193c:	4013      	ands	r3, r2
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x53a>
 8001940:	e05f      	b.n	8001a02 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001948:	4934      	ldr	r1, [pc, #208]	; (8001a1c <HAL_RCC_OscConfig+0x634>)
 800194a:	400a      	ands	r2, r1
 800194c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800194e:	4b2f      	ldr	r3, [pc, #188]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001954:	2103      	movs	r1, #3
 8001956:	438a      	bics	r2, r1
 8001958:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800195a:	4b2c      	ldr	r3, [pc, #176]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 800195c:	68da      	ldr	r2, [r3, #12]
 800195e:	4b2b      	ldr	r3, [pc, #172]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001960:	4930      	ldr	r1, [pc, #192]	; (8001a24 <HAL_RCC_OscConfig+0x63c>)
 8001962:	400a      	ands	r2, r1
 8001964:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff fa1f 	bl	8000da8 <HAL_GetTick>
 800196a:	0003      	movs	r3, r0
 800196c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fa1a 	bl	8000da8 <HAL_GetTick>
 8001974:	0002      	movs	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e040      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001982:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	049b      	lsls	r3, r3, #18
 800198a:	4013      	ands	r3, r2
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x588>
 800198e:	e038      	b.n	8001a02 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e033      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_RCC_OscConfig+0x624>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2203      	movs	r2, #3
 80019a6:	401a      	ands	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d126      	bne.n	80019fe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	2270      	movs	r2, #112	; 0x70
 80019b4:	401a      	ands	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d11f      	bne.n	80019fe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	23fe      	movs	r3, #254	; 0xfe
 80019c2:	01db      	lsls	r3, r3, #7
 80019c4:	401a      	ands	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ca:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d116      	bne.n	80019fe <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	23f8      	movs	r3, #248	; 0xf8
 80019d4:	039b      	lsls	r3, r3, #14
 80019d6:	401a      	ands	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d10e      	bne.n	80019fe <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	23e0      	movs	r3, #224	; 0xe0
 80019e4:	051b      	lsls	r3, r3, #20
 80019e6:	401a      	ands	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	0f5b      	lsrs	r3, r3, #29
 80019f4:	075a      	lsls	r2, r3, #29
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d001      	beq.n	8001a02 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	0018      	movs	r0, r3
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b008      	add	sp, #32
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40007000 	.word	0x40007000
 8001a14:	00001388 	.word	0x00001388
 8001a18:	efffffff 	.word	0xefffffff
 8001a1c:	feffffff 	.word	0xfeffffff
 8001a20:	11c1808c 	.word	0x11c1808c
 8001a24:	eefeffff 	.word	0xeefeffff

08001a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e0e9      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a3c:	4b76      	ldr	r3, [pc, #472]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2207      	movs	r2, #7
 8001a42:	4013      	ands	r3, r2
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d91e      	bls.n	8001a88 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	4b73      	ldr	r3, [pc, #460]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2207      	movs	r2, #7
 8001a50:	4393      	bics	r3, r2
 8001a52:	0019      	movs	r1, r3
 8001a54:	4b70      	ldr	r3, [pc, #448]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a5c:	f7ff f9a4 	bl	8000da8 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a64:	e009      	b.n	8001a7a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a66:	f7ff f99f 	bl	8000da8 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4a6a      	ldr	r2, [pc, #424]	; (8001c1c <HAL_RCC_ClockConfig+0x1f4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0ca      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a7a:	4b67      	ldr	r3, [pc, #412]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2207      	movs	r2, #7
 8001a80:	4013      	ands	r3, r2
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d1ee      	bne.n	8001a66 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d015      	beq.n	8001abe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2204      	movs	r2, #4
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d006      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a9c:	4b60      	ldr	r3, [pc, #384]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b5f      	ldr	r3, [pc, #380]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aa2:	21e0      	movs	r1, #224	; 0xe0
 8001aa4:	01c9      	lsls	r1, r1, #7
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aaa:	4b5d      	ldr	r3, [pc, #372]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4a5d      	ldr	r2, [pc, #372]	; (8001c24 <HAL_RCC_ClockConfig+0x1fc>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aba:	430a      	orrs	r2, r1
 8001abc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d057      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d107      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad0:	4b53      	ldr	r3, [pc, #332]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d12b      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e097      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae8:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	049b      	lsls	r3, r3, #18
 8001af0:	4013      	ands	r3, r2
 8001af2:	d11f      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e08b      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b00:	4b47      	ldr	r3, [pc, #284]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d113      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e07f      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d108      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e074      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b26:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e06d      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b34:	4b3a      	ldr	r3, [pc, #232]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2207      	movs	r2, #7
 8001b3a:	4393      	bics	r3, r2
 8001b3c:	0019      	movs	r1, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b48:	f7ff f92e 	bl	8000da8 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7ff f929 	bl	8000da8 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a2f      	ldr	r2, [pc, #188]	; (8001c1c <HAL_RCC_ClockConfig+0x1f4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e054      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2238      	movs	r2, #56	; 0x38
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d1ec      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	4013      	ands	r3, r2
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d21e      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b98:	f7ff f906 	bl	8000da8 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ba0:	e009      	b.n	8001bb6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba2:	f7ff f901 	bl	8000da8 <HAL_GetTick>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	4a1b      	ldr	r2, [pc, #108]	; (8001c1c <HAL_RCC_ClockConfig+0x1f4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e02c      	b.n	8001c10 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2207      	movs	r2, #7
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1ee      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2204      	movs	r2, #4
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <HAL_RCC_ClockConfig+0x200>)
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	4b10      	ldr	r3, [pc, #64]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001bde:	430a      	orrs	r2, r1
 8001be0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001be2:	f000 f829 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001be6:	0001      	movs	r1, r0
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <HAL_RCC_ClockConfig+0x1f8>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	0a1b      	lsrs	r3, r3, #8
 8001bee:	220f      	movs	r2, #15
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_RCC_ClockConfig+0x204>)
 8001bf4:	0092      	lsls	r2, r2, #2
 8001bf6:	58d3      	ldr	r3, [r2, r3]
 8001bf8:	221f      	movs	r2, #31
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	000a      	movs	r2, r1
 8001bfe:	40da      	lsrs	r2, r3
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_ClockConfig+0x208>)
 8001c02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <HAL_RCC_ClockConfig+0x20c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f7ff f871 	bl	8000cf0 <HAL_InitTick>
 8001c0e:	0003      	movs	r3, r0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b004      	add	sp, #16
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	00001388 	.word	0x00001388
 8001c20:	40021000 	.word	0x40021000
 8001c24:	fffff0ff 	.word	0xfffff0ff
 8001c28:	ffff8fff 	.word	0xffff8fff
 8001c2c:	080044e4 	.word	0x080044e4
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c3e:	4b3c      	ldr	r3, [pc, #240]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2238      	movs	r2, #56	; 0x38
 8001c44:	4013      	ands	r3, r2
 8001c46:	d10f      	bne.n	8001c68 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001c48:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0adb      	lsrs	r3, r3, #11
 8001c4e:	2207      	movs	r2, #7
 8001c50:	4013      	ands	r3, r2
 8001c52:	2201      	movs	r2, #1
 8001c54:	409a      	lsls	r2, r3
 8001c56:	0013      	movs	r3, r2
 8001c58:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001c5a:	6839      	ldr	r1, [r7, #0]
 8001c5c:	4835      	ldr	r0, [pc, #212]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001c5e:	f7fe fa5b 	bl	8000118 <__udivsi3>
 8001c62:	0003      	movs	r3, r0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	e05d      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c68:	4b31      	ldr	r3, [pc, #196]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2238      	movs	r2, #56	; 0x38
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c74:	4b30      	ldr	r3, [pc, #192]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	e054      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2238      	movs	r2, #56	; 0x38
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d138      	bne.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	2207      	movs	r2, #7
 8001c98:	4013      	ands	r3, r2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	4824      	ldr	r0, [pc, #144]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ca8:	f7fe fa36 	bl	8000118 <__udivsi3>
 8001cac:	0003      	movs	r3, r0
 8001cae:	0019      	movs	r1, r3
 8001cb0:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	227f      	movs	r2, #127	; 0x7f
 8001cb8:	4013      	ands	r3, r2
 8001cba:	434b      	muls	r3, r1
 8001cbc:	617b      	str	r3, [r7, #20]
        break;
 8001cbe:	e00d      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	481c      	ldr	r0, [pc, #112]	; (8001d34 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001cc4:	f7fe fa28 	bl	8000118 <__udivsi3>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	0019      	movs	r1, r3
 8001ccc:	4b18      	ldr	r3, [pc, #96]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	227f      	movs	r2, #127	; 0x7f
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	434b      	muls	r3, r1
 8001cd8:	617b      	str	r3, [r7, #20]
        break;
 8001cda:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	0f5b      	lsrs	r3, r3, #29
 8001ce2:	2207      	movs	r2, #7
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	6978      	ldr	r0, [r7, #20]
 8001cee:	f7fe fa13 	bl	8000118 <__udivsi3>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	613b      	str	r3, [r7, #16]
 8001cf6:	e015      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2238      	movs	r2, #56	; 0x38
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d103      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	e00b      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d0c:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2238      	movs	r2, #56	; 0x38
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b18      	cmp	r3, #24
 8001d16:	d103      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001d18:	23fa      	movs	r3, #250	; 0xfa
 8001d1a:	01db      	lsls	r3, r3, #7
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	e001      	b.n	8001d24 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d24:	693b      	ldr	r3, [r7, #16]
}
 8001d26:	0018      	movs	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b006      	add	sp, #24
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	007a1200 	.word	0x007a1200

08001d3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d40:	4b02      	ldr	r3, [pc, #8]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001d54:	f7ff fff2 	bl	8001d3c <HAL_RCC_GetHCLKFreq>
 8001d58:	0004      	movs	r4, r0
 8001d5a:	f7ff fb39 	bl	80013d0 <LL_RCC_GetAPB1Prescaler>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	0b1a      	lsrs	r2, r3, #12
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	58d3      	ldr	r3, [r2, r3]
 8001d68:	221f      	movs	r2, #31
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	40dc      	lsrs	r4, r3
 8001d6e:	0023      	movs	r3, r4
}
 8001d70:	0018      	movs	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdb0      	pop	{r4, r5, r7, pc}
 8001d76:	46c0      	nop			; (mov r8, r8)
 8001d78:	08004524 	.word	0x08004524

08001d7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0a8      	b.n	8001ee0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d109      	bne.n	8001daa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	2382      	movs	r3, #130	; 0x82
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d009      	beq.n	8001db6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
 8001da8:	e005      	b.n	8001db6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	225d      	movs	r2, #93	; 0x5d
 8001dc0:	5c9b      	ldrb	r3, [r3, r2]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d107      	bne.n	8001dd8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	225c      	movs	r2, #92	; 0x5c
 8001dcc:	2100      	movs	r1, #0
 8001dce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7fe fd62 	bl	800089c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	225d      	movs	r2, #93	; 0x5d
 8001ddc:	2102      	movs	r1, #2
 8001dde:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2140      	movs	r1, #64	; 0x40
 8001dec:	438a      	bics	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	23e0      	movs	r3, #224	; 0xe0
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d902      	bls.n	8001e02 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	e002      	b.n	8001e08 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	015b      	lsls	r3, r3, #5
 8001e06:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	23f0      	movs	r3, #240	; 0xf0
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d008      	beq.n	8001e26 <HAL_SPI_Init+0xaa>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	23e0      	movs	r3, #224	; 0xe0
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d002      	beq.n	8001e26 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	2382      	movs	r3, #130	; 0x82
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	401a      	ands	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	2384      	movs	r3, #132	; 0x84
 8001e36:	021b      	lsls	r3, r3, #8
 8001e38:	400b      	ands	r3, r1
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2102      	movs	r1, #2
 8001e42:	400b      	ands	r3, r1
 8001e44:	431a      	orrs	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	400b      	ands	r3, r1
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6999      	ldr	r1, [r3, #24]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	400b      	ands	r3, r1
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2138      	movs	r1, #56	; 0x38
 8001e62:	400b      	ands	r3, r1
 8001e64:	431a      	orrs	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	2180      	movs	r1, #128	; 0x80
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	0011      	movs	r1, r2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e76:	2380      	movs	r3, #128	; 0x80
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	0c1b      	lsrs	r3, r3, #16
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	2110      	movs	r1, #16
 8001e94:	400b      	ands	r3, r1
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	2108      	movs	r1, #8
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68d9      	ldr	r1, [r3, #12]
 8001ea6:	23f0      	movs	r3, #240	; 0xf0
 8001ea8:	011b      	lsls	r3, r3, #4
 8001eaa:	400b      	ands	r3, r1
 8001eac:	431a      	orrs	r2, r3
 8001eae:	0011      	movs	r1, r2
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	015b      	lsls	r3, r3, #5
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69da      	ldr	r2, [r3, #28]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <HAL_SPI_Init+0x16c>)
 8001ecc:	400a      	ands	r2, r1
 8001ece:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	225d      	movs	r2, #93	; 0x5d
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	fffff7ff 	.word	0xfffff7ff

08001eec <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	1dbb      	adds	r3, r7, #6
 8001ef8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001efa:	2317      	movs	r3, #23
 8001efc:	18fb      	adds	r3, r7, r3
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	225c      	movs	r2, #92	; 0x5c
 8001f06:	5c9b      	ldrb	r3, [r3, r2]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_SPI_Transmit_IT+0x24>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e07e      	b.n	800200e <HAL_SPI_Transmit_IT+0x122>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	225c      	movs	r2, #92	; 0x5c
 8001f14:	2101      	movs	r1, #1
 8001f16:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_SPI_Transmit_IT+0x3a>
 8001f1e:	1dbb      	adds	r3, r7, #6
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d104      	bne.n	8001f30 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8001f26:	2317      	movs	r3, #23
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f2e:	e067      	b.n	8002000 <HAL_SPI_Transmit_IT+0x114>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	225d      	movs	r2, #93	; 0x5d
 8001f34:	5c9b      	ldrb	r3, [r3, r2]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d004      	beq.n	8001f46 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8001f3c:	2317      	movs	r3, #23
 8001f3e:	18fb      	adds	r3, r7, r3
 8001f40:	2202      	movs	r2, #2
 8001f42:	701a      	strb	r2, [r3, #0]
    goto error;
 8001f44:	e05c      	b.n	8002000 <HAL_SPI_Transmit_IT+0x114>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	225d      	movs	r2, #93	; 0x5d
 8001f4a:	2103      	movs	r1, #3
 8001f4c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	1dba      	adds	r2, r7, #6
 8001f5e:	8812      	ldrh	r2, [r2, #0]
 8001f60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1dba      	adds	r2, r7, #6
 8001f66:	8812      	ldrh	r2, [r2, #0]
 8001f68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2244      	movs	r2, #68	; 0x44
 8001f74:	2100      	movs	r1, #0
 8001f76:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2246      	movs	r2, #70	; 0x46
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	5299      	strh	r1, [r3, r2]
  hspi->RxISR       = NULL;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	23e0      	movs	r3, #224	; 0xe0
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d903      	bls.n	8001f9a <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4a20      	ldr	r2, [pc, #128]	; (8002018 <HAL_SPI_Transmit_IT+0x12c>)
 8001f96:	651a      	str	r2, [r3, #80]	; 0x50
 8001f98:	e002      	b.n	8001fa0 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a1f      	ldr	r2, [pc, #124]	; (800201c <HAL_SPI_Transmit_IT+0x130>)
 8001f9e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	2380      	movs	r3, #128	; 0x80
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d110      	bne.n	8001fce <HAL_SPI_Transmit_IT+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2140      	movs	r1, #64	; 0x40
 8001fb8:	438a      	bics	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	01c9      	lsls	r1, r1, #7
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	21a0      	movs	r1, #160	; 0xa0
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2240      	movs	r2, #64	; 0x40
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	2b40      	cmp	r3, #64	; 0x40
 8001fea:	d008      	beq.n	8001ffe <HAL_SPI_Transmit_IT+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2140      	movs	r1, #64	; 0x40
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	e000      	b.n	8002000 <HAL_SPI_Transmit_IT+0x114>
  }

error :
 8001ffe:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	225c      	movs	r2, #92	; 0x5c
 8002004:	2100      	movs	r1, #0
 8002006:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002008:	2317      	movs	r3, #23
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	781b      	ldrb	r3, [r3, #0]
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b006      	add	sp, #24
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	080022a1 	.word	0x080022a1
 800201c:	08002259 	.word	0x08002259

08002020 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	099b      	lsrs	r3, r3, #6
 800203c:	001a      	movs	r2, r3
 800203e:	2301      	movs	r3, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d10f      	bne.n	8002064 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2201      	movs	r2, #1
 8002048:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800204a:	d00b      	beq.n	8002064 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	099b      	lsrs	r3, r3, #6
 8002050:	001a      	movs	r2, r3
 8002052:	2301      	movs	r3, #1
 8002054:	4013      	ands	r3, r2
 8002056:	d005      	beq.n	8002064 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	0010      	movs	r0, r2
 8002060:	4798      	blx	r3
    return;
 8002062:	e0d5      	b.n	8002210 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	001a      	movs	r2, r3
 800206a:	2301      	movs	r3, #1
 800206c:	4013      	ands	r3, r2
 800206e:	d00b      	beq.n	8002088 <HAL_SPI_IRQHandler+0x68>
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	09db      	lsrs	r3, r3, #7
 8002074:	001a      	movs	r2, r3
 8002076:	2301      	movs	r3, #1
 8002078:	4013      	ands	r3, r2
 800207a:	d005      	beq.n	8002088 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	0010      	movs	r0, r2
 8002084:	4798      	blx	r3
    return;
 8002086:	e0c3      	b.n	8002210 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	001a      	movs	r2, r3
 800208e:	2301      	movs	r3, #1
 8002090:	4013      	ands	r3, r2
 8002092:	d10c      	bne.n	80020ae <HAL_SPI_IRQHandler+0x8e>
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	099b      	lsrs	r3, r3, #6
 8002098:	001a      	movs	r2, r3
 800209a:	2301      	movs	r3, #1
 800209c:	4013      	ands	r3, r2
 800209e:	d106      	bne.n	80020ae <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	0a1b      	lsrs	r3, r3, #8
 80020a4:	001a      	movs	r2, r3
 80020a6:	2301      	movs	r3, #1
 80020a8:	4013      	ands	r3, r2
 80020aa:	d100      	bne.n	80020ae <HAL_SPI_IRQHandler+0x8e>
 80020ac:	e0b0      	b.n	8002210 <HAL_SPI_IRQHandler+0x1f0>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	001a      	movs	r2, r3
 80020b4:	2301      	movs	r3, #1
 80020b6:	4013      	ands	r3, r2
 80020b8:	d100      	bne.n	80020bc <HAL_SPI_IRQHandler+0x9c>
 80020ba:	e0a9      	b.n	8002210 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	099b      	lsrs	r3, r3, #6
 80020c0:	001a      	movs	r2, r3
 80020c2:	2301      	movs	r3, #1
 80020c4:	4013      	ands	r3, r2
 80020c6:	d023      	beq.n	8002110 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	225d      	movs	r2, #93	; 0x5d
 80020cc:	5c9b      	ldrb	r3, [r3, r2]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b03      	cmp	r3, #3
 80020d2:	d011      	beq.n	80020f8 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d8:	2204      	movs	r2, #4
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	e00b      	b.n	8002110 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80020f8:	2300      	movs	r3, #0
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
        return;
 800210e:	e07f      	b.n	8002210 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	001a      	movs	r2, r3
 8002116:	2301      	movs	r3, #1
 8002118:	4013      	ands	r3, r2
 800211a:	d014      	beq.n	8002146 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002120:	2201      	movs	r2, #1
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2140      	movs	r1, #64	; 0x40
 8002140:	438a      	bics	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	001a      	movs	r2, r3
 800214c:	2301      	movs	r3, #1
 800214e:	4013      	ands	r3, r2
 8002150:	d00c      	beq.n	800216c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	2208      	movs	r2, #8
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002170:	2b00      	cmp	r3, #0
 8002172:	d04c      	beq.n	800220e <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	21e0      	movs	r1, #224	; 0xe0
 8002180:	438a      	bics	r2, r1
 8002182:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	225d      	movs	r2, #93	; 0x5d
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	2202      	movs	r2, #2
 8002190:	4013      	ands	r3, r2
 8002192:	d103      	bne.n	800219c <HAL_SPI_IRQHandler+0x17c>
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2201      	movs	r2, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d032      	beq.n	8002202 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2103      	movs	r1, #3
 80021a8:	438a      	bics	r2, r1
 80021aa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d010      	beq.n	80021d6 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	4a17      	ldr	r2, [pc, #92]	; (8002218 <HAL_SPI_IRQHandler+0x1f8>)
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7fe fed9 	bl	8000f78 <HAL_DMA_Abort_IT>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	2240      	movs	r2, #64	; 0x40
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d016      	beq.n	800220c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021e2:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <HAL_SPI_IRQHandler+0x1f8>)
 80021e4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	0018      	movs	r0, r3
 80021ec:	f7fe fec4 	bl	8000f78 <HAL_DMA_Abort_IT>
 80021f0:	1e03      	subs	r3, r0, #0
 80021f2:	d00b      	beq.n	800220c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	2240      	movs	r2, #64	; 0x40
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002200:	e004      	b.n	800220c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 f809 	bl	800221c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800220a:	e000      	b.n	800220e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 800220c:	46c0      	nop			; (mov r8, r8)
    return;
 800220e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002210:	46bd      	mov	sp, r7
 8002212:	b008      	add	sp, #32
 8002214:	bd80      	pop	{r7, pc}
 8002216:	46c0      	nop			; (mov r8, r8)
 8002218:	0800222d 	.word	0x0800222d

0800221c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002224:	46c0      	nop			; (mov r8, r8)
 8002226:	46bd      	mov	sp, r7
 8002228:	b002      	add	sp, #8
 800222a:	bd80      	pop	{r7, pc}

0800222c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2246      	movs	r2, #70	; 0x46
 800223e:	2100      	movs	r1, #0
 8002240:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	0018      	movs	r0, r3
 800224c:	f7ff ffe6 	bl	800221c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b004      	add	sp, #16
 8002256:	bd80      	pop	{r7, pc}

08002258 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	330c      	adds	r3, #12
 800226a:	7812      	ldrb	r2, [r2, #0]
 800226c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800227c:	b29b      	uxth	r3, r3
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228a:	b29b      	uxth	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d103      	bne.n	8002298 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f000 f99e 	bl	80025d4 <SPI_CloseTx_ISR>
  }
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b002      	add	sp, #8
 800229e:	bd80      	pop	{r7, pc}

080022a0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	1c9a      	adds	r2, r3, #2
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	0018      	movs	r0, r3
 80022da:	f000 f97b 	bl	80025d4 <SPI_CloseTx_ISR>
  }
}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b002      	add	sp, #8
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	1dfb      	adds	r3, r7, #7
 80022f6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022f8:	f7fe fd56 	bl	8000da8 <HAL_GetTick>
 80022fc:	0002      	movs	r2, r0
 80022fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	18d3      	adds	r3, r2, r3
 8002306:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002308:	f7fe fd4e 	bl	8000da8 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002310:	4b3a      	ldr	r3, [pc, #232]	; (80023fc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	015b      	lsls	r3, r3, #5
 8002316:	0d1b      	lsrs	r3, r3, #20
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	4353      	muls	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800231e:	e058      	b.n	80023d2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	d055      	beq.n	80023d2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002326:	f7fe fd3f 	bl	8000da8 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	429a      	cmp	r2, r3
 8002334:	d902      	bls.n	800233c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d142      	bne.n	80023c2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	21e0      	movs	r1, #224	; 0xe0
 8002348:	438a      	bics	r2, r1
 800234a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	2382      	movs	r3, #130	; 0x82
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	429a      	cmp	r2, r3
 8002356:	d113      	bne.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	021b      	lsls	r3, r3, #8
 8002360:	429a      	cmp	r2, r3
 8002362:	d005      	beq.n	8002370 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2140      	movs	r1, #64	; 0x40
 800237c:	438a      	bics	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	019b      	lsls	r3, r3, #6
 8002388:	429a      	cmp	r2, r3
 800238a:	d110      	bne.n	80023ae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	491a      	ldr	r1, [pc, #104]	; (8002400 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002398:	400a      	ands	r2, r1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2180      	movs	r1, #128	; 0x80
 80023a8:	0189      	lsls	r1, r1, #6
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	225d      	movs	r2, #93	; 0x5d
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	225c      	movs	r2, #92	; 0x5c
 80023ba:	2100      	movs	r1, #0
 80023bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e017      	b.n	80023f2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	4013      	ands	r3, r2
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	425a      	negs	r2, r3
 80023e2:	4153      	adcs	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	001a      	movs	r2, r3
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d197      	bne.n	8002320 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	0018      	movs	r0, r3
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b008      	add	sp, #32
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	20000000 	.word	0x20000000
 8002400:	ffffdfff 	.word	0xffffdfff

08002404 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002412:	2317      	movs	r3, #23
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800241a:	f7fe fcc5 	bl	8000da8 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002422:	1a9b      	subs	r3, r3, r2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	18d3      	adds	r3, r2, r3
 8002428:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800242a:	f7fe fcbd 	bl	8000da8 <HAL_GetTick>
 800242e:	0003      	movs	r3, r0
 8002430:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	330c      	adds	r3, #12
 8002438:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	0013      	movs	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	189b      	adds	r3, r3, r2
 8002444:	00da      	lsls	r2, r3, #3
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	0d1b      	lsrs	r3, r3, #20
 800244a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244c:	4353      	muls	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002450:	e068      	b.n	8002524 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	23c0      	movs	r3, #192	; 0xc0
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	429a      	cmp	r2, r3
 800245a:	d10a      	bne.n	8002472 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	b2da      	uxtb	r2, r3
 8002468:	2117      	movs	r1, #23
 800246a:	187b      	adds	r3, r7, r1
 800246c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800246e:	187b      	adds	r3, r7, r1
 8002470:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	d055      	beq.n	8002524 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002478:	f7fe fc96 	bl	8000da8 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	429a      	cmp	r2, r3
 8002486:	d902      	bls.n	800248e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	2b00      	cmp	r3, #0
 800248c:	d142      	bne.n	8002514 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	21e0      	movs	r1, #224	; 0xe0
 800249a:	438a      	bics	r2, r1
 800249c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	2382      	movs	r3, #130	; 0x82
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d113      	bne.n	80024d2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	2380      	movs	r3, #128	; 0x80
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d005      	beq.n	80024c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	429a      	cmp	r2, r3
 80024c0:	d107      	bne.n	80024d2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2140      	movs	r1, #64	; 0x40
 80024ce:	438a      	bics	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	019b      	lsls	r3, r3, #6
 80024da:	429a      	cmp	r2, r3
 80024dc:	d110      	bne.n	8002500 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80024ea:	400a      	ands	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0189      	lsls	r1, r1, #6
 80024fc:	430a      	orrs	r2, r1
 80024fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	225d      	movs	r2, #93	; 0x5d
 8002504:	2101      	movs	r1, #1
 8002506:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	225c      	movs	r2, #92	; 0x5c
 800250c:	2100      	movs	r1, #0
 800250e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e010      	b.n	8002536 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	3b01      	subs	r3, #1
 8002522:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	429a      	cmp	r2, r3
 8002532:	d18e      	bne.n	8002452 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	0018      	movs	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	b00a      	add	sp, #40	; 0x28
 800253c:	bd80      	pop	{r7, pc}
 800253e:	46c0      	nop			; (mov r8, r8)
 8002540:	20000000 	.word	0x20000000
 8002544:	ffffdfff 	.word	0xffffdfff

08002548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af02      	add	r7, sp, #8
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	23c0      	movs	r3, #192	; 0xc0
 8002558:	0159      	lsls	r1, r3, #5
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	0013      	movs	r3, r2
 8002562:	2200      	movs	r2, #0
 8002564:	f7ff ff4e 	bl	8002404 <SPI_WaitFifoStateUntilTimeout>
 8002568:	1e03      	subs	r3, r0, #0
 800256a:	d007      	beq.n	800257c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	2220      	movs	r2, #32
 8002572:	431a      	orrs	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e027      	b.n	80025cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	0013      	movs	r3, r2
 8002586:	2200      	movs	r2, #0
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	f7ff fead 	bl	80022e8 <SPI_WaitFlagStateUntilTimeout>
 800258e:	1e03      	subs	r3, r0, #0
 8002590:	d007      	beq.n	80025a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	2220      	movs	r2, #32
 8002598:	431a      	orrs	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e014      	b.n	80025cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	23c0      	movs	r3, #192	; 0xc0
 80025a6:	00d9      	lsls	r1, r3, #3
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	0013      	movs	r3, r2
 80025b0:	2200      	movs	r2, #0
 80025b2:	f7ff ff27 	bl	8002404 <SPI_WaitFifoStateUntilTimeout>
 80025b6:	1e03      	subs	r3, r0, #0
 80025b8:	d007      	beq.n	80025ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025be:	2220      	movs	r2, #32
 80025c0:	431a      	orrs	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e000      	b.n	80025cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b004      	add	sp, #16
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025dc:	f7fe fbe4 	bl	8000da8 <HAL_GetTick>
 80025e0:	0003      	movs	r3, r0
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	21a0      	movs	r1, #160	; 0xa0
 80025f0:	438a      	bics	r2, r1
 80025f2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2164      	movs	r1, #100	; 0x64
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ffa4 	bl	8002548 <SPI_EndRxTxTransaction>
 8002600:	1e03      	subs	r3, r0, #0
 8002602:	d005      	beq.n	8002610 <SPI_CloseTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002608:	2220      	movs	r2, #32
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <SPI_CloseTx_ISR+0x5a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	225d      	movs	r2, #93	; 0x5d
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	2b00      	cmp	r3, #0
 800263c:	d004      	beq.n	8002648 <SPI_CloseTx_ISR+0x74>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	0018      	movs	r0, r3
 8002642:	f7ff fdeb 	bl	800221c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8002646:	e003      	b.n	8002650 <SPI_CloseTx_ISR+0x7c>
    HAL_SPI_TxCpltCallback(hspi);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 ff32 	bl	80034b4 <HAL_SPI_TxCpltCallback>
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b004      	add	sp, #16
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e04a      	b.n	8002700 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	223d      	movs	r2, #61	; 0x3d
 800266e:	5c9b      	ldrb	r3, [r3, r2]
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d107      	bne.n	8002686 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	223c      	movs	r2, #60	; 0x3c
 800267a:	2100      	movs	r1, #0
 800267c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	0018      	movs	r0, r3
 8002682:	f7fe f9bb 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	223d      	movs	r2, #61	; 0x3d
 800268a:	2102      	movs	r1, #2
 800268c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3304      	adds	r3, #4
 8002696:	0019      	movs	r1, r3
 8002698:	0010      	movs	r0, r2
 800269a:	f000 f881 	bl	80027a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2248      	movs	r2, #72	; 0x48
 80026a2:	2101      	movs	r1, #1
 80026a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	223e      	movs	r2, #62	; 0x3e
 80026aa:	2101      	movs	r1, #1
 80026ac:	5499      	strb	r1, [r3, r2]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	223f      	movs	r2, #63	; 0x3f
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2240      	movs	r2, #64	; 0x40
 80026ba:	2101      	movs	r1, #1
 80026bc:	5499      	strb	r1, [r3, r2]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2241      	movs	r2, #65	; 0x41
 80026c2:	2101      	movs	r1, #1
 80026c4:	5499      	strb	r1, [r3, r2]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2242      	movs	r2, #66	; 0x42
 80026ca:	2101      	movs	r1, #1
 80026cc:	5499      	strb	r1, [r3, r2]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2243      	movs	r2, #67	; 0x43
 80026d2:	2101      	movs	r1, #1
 80026d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2244      	movs	r2, #68	; 0x44
 80026da:	2101      	movs	r1, #1
 80026dc:	5499      	strb	r1, [r3, r2]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2245      	movs	r2, #69	; 0x45
 80026e2:	2101      	movs	r1, #1
 80026e4:	5499      	strb	r1, [r3, r2]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2246      	movs	r2, #70	; 0x46
 80026ea:	2101      	movs	r1, #1
 80026ec:	5499      	strb	r1, [r3, r2]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2247      	movs	r2, #71	; 0x47
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223d      	movs	r2, #61	; 0x3d
 80026fa:	2101      	movs	r1, #1
 80026fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	223d      	movs	r2, #61	; 0x3d
 8002714:	5c9b      	ldrb	r3, [r3, r2]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b01      	cmp	r3, #1
 800271a:	d001      	beq.n	8002720 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e035      	b.n	800278c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	223d      	movs	r2, #61	; 0x3d
 8002724:	2102      	movs	r1, #2
 8002726:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a19      	ldr	r2, [pc, #100]	; (8002794 <HAL_TIM_Base_Start+0x8c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00a      	beq.n	8002748 <HAL_TIM_Base_Start+0x40>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	05db      	lsls	r3, r3, #23
 800273a:	429a      	cmp	r2, r3
 800273c:	d004      	beq.n	8002748 <HAL_TIM_Base_Start+0x40>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a15      	ldr	r2, [pc, #84]	; (8002798 <HAL_TIM_Base_Start+0x90>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d116      	bne.n	8002776 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4a13      	ldr	r2, [pc, #76]	; (800279c <HAL_TIM_Base_Start+0x94>)
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b06      	cmp	r3, #6
 8002758:	d016      	beq.n	8002788 <HAL_TIM_Base_Start+0x80>
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	429a      	cmp	r2, r3
 8002762:	d011      	beq.n	8002788 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2101      	movs	r1, #1
 8002770:	430a      	orrs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	e008      	b.n	8002788 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2101      	movs	r1, #1
 8002782:	430a      	orrs	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	e000      	b.n	800278a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002788:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	0018      	movs	r0, r3
 800278e:	46bd      	mov	sp, r7
 8002790:	b004      	add	sp, #16
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40012c00 	.word	0x40012c00
 8002798:	40000400 	.word	0x40000400
 800279c:	00010007 	.word	0x00010007

080027a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a30      	ldr	r2, [pc, #192]	; (8002874 <TIM_Base_SetConfig+0xd4>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d008      	beq.n	80027ca <TIM_Base_SetConfig+0x2a>
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	05db      	lsls	r3, r3, #23
 80027be:	429a      	cmp	r2, r3
 80027c0:	d003      	beq.n	80027ca <TIM_Base_SetConfig+0x2a>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	; (8002878 <TIM_Base_SetConfig+0xd8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d108      	bne.n	80027dc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2270      	movs	r2, #112	; 0x70
 80027ce:	4393      	bics	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a25      	ldr	r2, [pc, #148]	; (8002874 <TIM_Base_SetConfig+0xd4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d014      	beq.n	800280e <TIM_Base_SetConfig+0x6e>
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	05db      	lsls	r3, r3, #23
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d00f      	beq.n	800280e <TIM_Base_SetConfig+0x6e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a21      	ldr	r2, [pc, #132]	; (8002878 <TIM_Base_SetConfig+0xd8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00b      	beq.n	800280e <TIM_Base_SetConfig+0x6e>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a20      	ldr	r2, [pc, #128]	; (800287c <TIM_Base_SetConfig+0xdc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <TIM_Base_SetConfig+0x6e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <TIM_Base_SetConfig+0xe0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d003      	beq.n	800280e <TIM_Base_SetConfig+0x6e>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a1e      	ldr	r2, [pc, #120]	; (8002884 <TIM_Base_SetConfig+0xe4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d108      	bne.n	8002820 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <TIM_Base_SetConfig+0xe8>)
 8002812:	4013      	ands	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4313      	orrs	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2280      	movs	r2, #128	; 0x80
 8002824:	4393      	bics	r3, r2
 8002826:	001a      	movs	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <TIM_Base_SetConfig+0xd4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <TIM_Base_SetConfig+0xbe>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <TIM_Base_SetConfig+0xe0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_Base_SetConfig+0xbe>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <TIM_Base_SetConfig+0xe4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d103      	bne.n	8002866 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	615a      	str	r2, [r3, #20]
}
 800286c:	46c0      	nop			; (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b004      	add	sp, #16
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40000400 	.word	0x40000400
 800287c:	40002000 	.word	0x40002000
 8002880:	40014400 	.word	0x40014400
 8002884:	40014800 	.word	0x40014800
 8002888:	fffffcff 	.word	0xfffffcff

0800288c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e046      	b.n	800292c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2284      	movs	r2, #132	; 0x84
 80028a2:	589b      	ldr	r3, [r3, r2]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2280      	movs	r2, #128	; 0x80
 80028ac:	2100      	movs	r1, #0
 80028ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	0018      	movs	r0, r3
 80028b4:	f7fe f8c2 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2284      	movs	r2, #132	; 0x84
 80028bc:	2124      	movs	r1, #36	; 0x24
 80028be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2101      	movs	r1, #1
 80028cc:	438a      	bics	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	0018      	movs	r0, r3
 80028d4:	f000 f830 	bl	8002938 <UART_SetConfig>
 80028d8:	0003      	movs	r3, r0
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e024      	b.n	800292c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f000 fab3 	bl	8002e58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	490d      	ldr	r1, [pc, #52]	; (8002934 <HAL_UART_Init+0xa8>)
 80028fe:	400a      	ands	r2, r1
 8002900:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	212a      	movs	r1, #42	; 0x2a
 800290e:	438a      	bics	r2, r1
 8002910:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2101      	movs	r1, #1
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 fb4b 	bl	8002fc0 <UART_CheckIdleState>
 800292a:	0003      	movs	r3, r0
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}
 8002934:	ffffb7ff 	.word	0xffffb7ff

08002938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	b5b0      	push	{r4, r5, r7, lr}
 800293a:	b090      	sub	sp, #64	; 0x40
 800293c:	af00      	add	r7, sp, #0
 800293e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002940:	231a      	movs	r3, #26
 8002942:	2220      	movs	r2, #32
 8002944:	4694      	mov	ip, r2
 8002946:	44bc      	add	ip, r7
 8002948:	4463      	add	r3, ip
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	431a      	orrs	r2, r3
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	431a      	orrs	r2, r3
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	4313      	orrs	r3, r2
 8002964:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4ac7      	ldr	r2, [pc, #796]	; (8002c8c <UART_SetConfig+0x354>)
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002978:	430b      	orrs	r3, r1
 800297a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4ac3      	ldr	r2, [pc, #780]	; (8002c90 <UART_SetConfig+0x358>)
 8002984:	4013      	ands	r3, r2
 8002986:	0018      	movs	r0, r3
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	68d9      	ldr	r1, [r3, #12]
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	0003      	movs	r3, r0
 8002992:	430b      	orrs	r3, r1
 8002994:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4abc      	ldr	r2, [pc, #752]	; (8002c94 <UART_SetConfig+0x35c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029ac:	4313      	orrs	r3, r2
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	4ab8      	ldr	r2, [pc, #736]	; (8002c98 <UART_SetConfig+0x360>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c2:	430b      	orrs	r3, r1
 80029c4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	220f      	movs	r2, #15
 80029ce:	4393      	bics	r3, r2
 80029d0:	0018      	movs	r0, r3
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	0003      	movs	r3, r0
 80029dc:	430b      	orrs	r3, r1
 80029de:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4aad      	ldr	r2, [pc, #692]	; (8002c9c <UART_SetConfig+0x364>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d136      	bne.n	8002a58 <UART_SetConfig+0x120>
 80029ea:	4bad      	ldr	r3, [pc, #692]	; (8002ca0 <UART_SetConfig+0x368>)
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	2203      	movs	r2, #3
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d020      	beq.n	8002a38 <UART_SetConfig+0x100>
 80029f6:	d827      	bhi.n	8002a48 <UART_SetConfig+0x110>
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d00d      	beq.n	8002a18 <UART_SetConfig+0xe0>
 80029fc:	d824      	bhi.n	8002a48 <UART_SetConfig+0x110>
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <UART_SetConfig+0xd0>
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d010      	beq.n	8002a28 <UART_SetConfig+0xf0>
 8002a06:	e01f      	b.n	8002a48 <UART_SetConfig+0x110>
 8002a08:	231b      	movs	r3, #27
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	4694      	mov	ip, r2
 8002a0e:	44bc      	add	ip, r7
 8002a10:	4463      	add	r3, ip
 8002a12:	2200      	movs	r2, #0
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e07c      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002a18:	231b      	movs	r3, #27
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	4694      	mov	ip, r2
 8002a1e:	44bc      	add	ip, r7
 8002a20:	4463      	add	r3, ip
 8002a22:	2202      	movs	r2, #2
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e074      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002a28:	231b      	movs	r3, #27
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	4694      	mov	ip, r2
 8002a2e:	44bc      	add	ip, r7
 8002a30:	4463      	add	r3, ip
 8002a32:	2204      	movs	r2, #4
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e06c      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002a38:	231b      	movs	r3, #27
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	4694      	mov	ip, r2
 8002a3e:	44bc      	add	ip, r7
 8002a40:	4463      	add	r3, ip
 8002a42:	2208      	movs	r2, #8
 8002a44:	701a      	strb	r2, [r3, #0]
 8002a46:	e064      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002a48:	231b      	movs	r3, #27
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	4694      	mov	ip, r2
 8002a4e:	44bc      	add	ip, r7
 8002a50:	4463      	add	r3, ip
 8002a52:	2210      	movs	r2, #16
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e05c      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a91      	ldr	r2, [pc, #580]	; (8002ca4 <UART_SetConfig+0x36c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d107      	bne.n	8002a72 <UART_SetConfig+0x13a>
 8002a62:	231b      	movs	r3, #27
 8002a64:	2220      	movs	r2, #32
 8002a66:	4694      	mov	ip, r2
 8002a68:	44bc      	add	ip, r7
 8002a6a:	4463      	add	r3, ip
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e04f      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a87      	ldr	r2, [pc, #540]	; (8002c94 <UART_SetConfig+0x35c>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d143      	bne.n	8002b04 <UART_SetConfig+0x1cc>
 8002a7c:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <UART_SetConfig+0x368>)
 8002a7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a80:	23c0      	movs	r3, #192	; 0xc0
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	4013      	ands	r3, r2
 8002a86:	22c0      	movs	r2, #192	; 0xc0
 8002a88:	0112      	lsls	r2, r2, #4
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d02a      	beq.n	8002ae4 <UART_SetConfig+0x1ac>
 8002a8e:	22c0      	movs	r2, #192	; 0xc0
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d82e      	bhi.n	8002af4 <UART_SetConfig+0x1bc>
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d012      	beq.n	8002ac4 <UART_SetConfig+0x18c>
 8002a9e:	2280      	movs	r2, #128	; 0x80
 8002aa0:	0112      	lsls	r2, r2, #4
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d826      	bhi.n	8002af4 <UART_SetConfig+0x1bc>
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d004      	beq.n	8002ab4 <UART_SetConfig+0x17c>
 8002aaa:	2280      	movs	r2, #128	; 0x80
 8002aac:	00d2      	lsls	r2, r2, #3
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d010      	beq.n	8002ad4 <UART_SetConfig+0x19c>
 8002ab2:	e01f      	b.n	8002af4 <UART_SetConfig+0x1bc>
 8002ab4:	231b      	movs	r3, #27
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	4694      	mov	ip, r2
 8002aba:	44bc      	add	ip, r7
 8002abc:	4463      	add	r3, ip
 8002abe:	2200      	movs	r2, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
 8002ac2:	e026      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002ac4:	231b      	movs	r3, #27
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	4694      	mov	ip, r2
 8002aca:	44bc      	add	ip, r7
 8002acc:	4463      	add	r3, ip
 8002ace:	2202      	movs	r2, #2
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e01e      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002ad4:	231b      	movs	r3, #27
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	4694      	mov	ip, r2
 8002ada:	44bc      	add	ip, r7
 8002adc:	4463      	add	r3, ip
 8002ade:	2204      	movs	r2, #4
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e016      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002ae4:	231b      	movs	r3, #27
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	4694      	mov	ip, r2
 8002aea:	44bc      	add	ip, r7
 8002aec:	4463      	add	r3, ip
 8002aee:	2208      	movs	r2, #8
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	e00e      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002af4:	231b      	movs	r3, #27
 8002af6:	2220      	movs	r2, #32
 8002af8:	4694      	mov	ip, r2
 8002afa:	44bc      	add	ip, r7
 8002afc:	4463      	add	r3, ip
 8002afe:	2210      	movs	r2, #16
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e006      	b.n	8002b12 <UART_SetConfig+0x1da>
 8002b04:	231b      	movs	r3, #27
 8002b06:	2220      	movs	r2, #32
 8002b08:	4694      	mov	ip, r2
 8002b0a:	44bc      	add	ip, r7
 8002b0c:	4463      	add	r3, ip
 8002b0e:	2210      	movs	r2, #16
 8002b10:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5f      	ldr	r2, [pc, #380]	; (8002c94 <UART_SetConfig+0x35c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d000      	beq.n	8002b1e <UART_SetConfig+0x1e6>
 8002b1c:	e096      	b.n	8002c4c <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b1e:	231b      	movs	r3, #27
 8002b20:	2220      	movs	r2, #32
 8002b22:	4694      	mov	ip, r2
 8002b24:	44bc      	add	ip, r7
 8002b26:	4463      	add	r3, ip
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d015      	beq.n	8002b5a <UART_SetConfig+0x222>
 8002b2e:	dc18      	bgt.n	8002b62 <UART_SetConfig+0x22a>
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d00d      	beq.n	8002b50 <UART_SetConfig+0x218>
 8002b34:	dc15      	bgt.n	8002b62 <UART_SetConfig+0x22a>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <UART_SetConfig+0x208>
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d005      	beq.n	8002b4a <UART_SetConfig+0x212>
 8002b3e:	e010      	b.n	8002b62 <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b40:	f7ff f906 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8002b44:	0003      	movs	r3, r0
 8002b46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b48:	e015      	b.n	8002b76 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b4a:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <UART_SetConfig+0x370>)
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b4e:	e012      	b.n	8002b76 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b50:	f7ff f872 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8002b54:	0003      	movs	r3, r0
 8002b56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b58:	e00d      	b.n	8002b76 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b5a:	2380      	movs	r3, #128	; 0x80
 8002b5c:	021b      	lsls	r3, r3, #8
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b60:	e009      	b.n	8002b76 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002b66:	231a      	movs	r3, #26
 8002b68:	2220      	movs	r2, #32
 8002b6a:	4694      	mov	ip, r2
 8002b6c:	44bc      	add	ip, r7
 8002b6e:	4463      	add	r3, ip
 8002b70:	2201      	movs	r2, #1
 8002b72:	701a      	strb	r2, [r3, #0]
        break;
 8002b74:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d100      	bne.n	8002b7e <UART_SetConfig+0x246>
 8002b7c:	e14f      	b.n	8002e1e <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <UART_SetConfig+0x374>)
 8002b84:	0052      	lsls	r2, r2, #1
 8002b86:	5ad3      	ldrh	r3, [r2, r3]
 8002b88:	0019      	movs	r1, r3
 8002b8a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b8c:	f7fd fac4 	bl	8000118 <__udivsi3>
 8002b90:	0003      	movs	r3, r0
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	0013      	movs	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	189b      	adds	r3, r3, r2
 8002b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d305      	bcc.n	8002bb0 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d907      	bls.n	8002bc0 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 8002bb0:	231a      	movs	r3, #26
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	4694      	mov	ip, r2
 8002bb6:	44bc      	add	ip, r7
 8002bb8:	4463      	add	r3, ip
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
 8002bbe:	e12e      	b.n	8002e1e <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bcc:	4b37      	ldr	r3, [pc, #220]	; (8002cac <UART_SetConfig+0x374>)
 8002bce:	0052      	lsls	r2, r2, #1
 8002bd0:	5ad3      	ldrh	r3, [r2, r3]
 8002bd2:	613b      	str	r3, [r7, #16]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	69b8      	ldr	r0, [r7, #24]
 8002bde:	69f9      	ldr	r1, [r7, #28]
 8002be0:	f7fd fb26 	bl	8000230 <__aeabi_uldivmod>
 8002be4:	0002      	movs	r2, r0
 8002be6:	000b      	movs	r3, r1
 8002be8:	0e11      	lsrs	r1, r2, #24
 8002bea:	021d      	lsls	r5, r3, #8
 8002bec:	430d      	orrs	r5, r1
 8002bee:	0214      	lsls	r4, r2, #8
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	085b      	lsrs	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68b8      	ldr	r0, [r7, #8]
 8002bfe:	68f9      	ldr	r1, [r7, #12]
 8002c00:	1900      	adds	r0, r0, r4
 8002c02:	4169      	adcs	r1, r5
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f7fd fb0d 	bl	8000230 <__aeabi_uldivmod>
 8002c16:	0002      	movs	r2, r0
 8002c18:	000b      	movs	r3, r1
 8002c1a:	0013      	movs	r3, r2
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c20:	23c0      	movs	r3, #192	; 0xc0
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d309      	bcc.n	8002c3c <UART_SetConfig+0x304>
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	035b      	lsls	r3, r3, #13
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d204      	bcs.n	8002c3c <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c38:	60da      	str	r2, [r3, #12]
 8002c3a:	e0f0      	b.n	8002e1e <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 8002c3c:	231a      	movs	r3, #26
 8002c3e:	2220      	movs	r2, #32
 8002c40:	4694      	mov	ip, r2
 8002c42:	44bc      	add	ip, r7
 8002c44:	4463      	add	r3, ip
 8002c46:	2201      	movs	r2, #1
 8002c48:	701a      	strb	r2, [r3, #0]
 8002c4a:	e0e8      	b.n	8002e1e <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	021b      	lsls	r3, r3, #8
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d000      	beq.n	8002c5a <UART_SetConfig+0x322>
 8002c58:	e086      	b.n	8002d68 <UART_SetConfig+0x430>
  {
    switch (clocksource)
 8002c5a:	231b      	movs	r3, #27
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	4694      	mov	ip, r2
 8002c60:	44bc      	add	ip, r7
 8002c62:	4463      	add	r3, ip
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d027      	beq.n	8002cba <UART_SetConfig+0x382>
 8002c6a:	dc2a      	bgt.n	8002cc2 <UART_SetConfig+0x38a>
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d01f      	beq.n	8002cb0 <UART_SetConfig+0x378>
 8002c70:	dc27      	bgt.n	8002cc2 <UART_SetConfig+0x38a>
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <UART_SetConfig+0x344>
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d005      	beq.n	8002c86 <UART_SetConfig+0x34e>
 8002c7a:	e022      	b.n	8002cc2 <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff f868 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8002c80:	0003      	movs	r3, r0
 8002c82:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c84:	e027      	b.n	8002cd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <UART_SetConfig+0x370>)
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002c8a:	e024      	b.n	8002cd6 <UART_SetConfig+0x39e>
 8002c8c:	cfff69f3 	.word	0xcfff69f3
 8002c90:	ffffcfff 	.word	0xffffcfff
 8002c94:	40008000 	.word	0x40008000
 8002c98:	11fff4ff 	.word	0x11fff4ff
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40004400 	.word	0x40004400
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	08004544 	.word	0x08004544
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cb0:	f7fe ffc2 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cb8:	e00d      	b.n	8002cd6 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	021b      	lsls	r3, r3, #8
 8002cbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cc0:	e009      	b.n	8002cd6 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002cc6:	231a      	movs	r3, #26
 8002cc8:	2220      	movs	r2, #32
 8002cca:	4694      	mov	ip, r2
 8002ccc:	44bc      	add	ip, r7
 8002cce:	4463      	add	r3, ip
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
        break;
 8002cd4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d100      	bne.n	8002cde <UART_SetConfig+0x3a6>
 8002cdc:	e09f      	b.n	8002e1e <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ce2:	4b5b      	ldr	r3, [pc, #364]	; (8002e50 <UART_SetConfig+0x518>)
 8002ce4:	0052      	lsls	r2, r2, #1
 8002ce6:	5ad3      	ldrh	r3, [r2, r3]
 8002ce8:	0019      	movs	r1, r3
 8002cea:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cec:	f7fd fa14 	bl	8000118 <__udivsi3>
 8002cf0:	0003      	movs	r3, r0
 8002cf2:	005a      	lsls	r2, r3, #1
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	18d2      	adds	r2, r2, r3
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	0019      	movs	r1, r3
 8002d02:	0010      	movs	r0, r2
 8002d04:	f7fd fa08 	bl	8000118 <__udivsi3>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d921      	bls.n	8002d58 <UART_SetConfig+0x420>
 8002d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	025b      	lsls	r3, r3, #9
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d21c      	bcs.n	8002d58 <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	200e      	movs	r0, #14
 8002d24:	2420      	movs	r4, #32
 8002d26:	193b      	adds	r3, r7, r4
 8002d28:	181b      	adds	r3, r3, r0
 8002d2a:	210f      	movs	r1, #15
 8002d2c:	438a      	bics	r2, r1
 8002d2e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	085b      	lsrs	r3, r3, #1
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2207      	movs	r2, #7
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b299      	uxth	r1, r3
 8002d3c:	193b      	adds	r3, r7, r4
 8002d3e:	181b      	adds	r3, r3, r0
 8002d40:	193a      	adds	r2, r7, r4
 8002d42:	1812      	adds	r2, r2, r0
 8002d44:	8812      	ldrh	r2, [r2, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	193a      	adds	r2, r7, r4
 8002d50:	1812      	adds	r2, r2, r0
 8002d52:	8812      	ldrh	r2, [r2, #0]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	e062      	b.n	8002e1e <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8002d58:	231a      	movs	r3, #26
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	4694      	mov	ip, r2
 8002d5e:	44bc      	add	ip, r7
 8002d60:	4463      	add	r3, ip
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
 8002d66:	e05a      	b.n	8002e1e <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d68:	231b      	movs	r3, #27
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	4694      	mov	ip, r2
 8002d6e:	44bc      	add	ip, r7
 8002d70:	4463      	add	r3, ip
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d015      	beq.n	8002da4 <UART_SetConfig+0x46c>
 8002d78:	dc18      	bgt.n	8002dac <UART_SetConfig+0x474>
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	d00d      	beq.n	8002d9a <UART_SetConfig+0x462>
 8002d7e:	dc15      	bgt.n	8002dac <UART_SetConfig+0x474>
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <UART_SetConfig+0x452>
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d005      	beq.n	8002d94 <UART_SetConfig+0x45c>
 8002d88:	e010      	b.n	8002dac <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d8a:	f7fe ffe1 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d92:	e015      	b.n	8002dc0 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d94:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <UART_SetConfig+0x51c>)
 8002d96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d98:	e012      	b.n	8002dc0 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d9a:	f7fe ff4d 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8002d9e:	0003      	movs	r3, r0
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002da2:	e00d      	b.n	8002dc0 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002daa:	e009      	b.n	8002dc0 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002db0:	231a      	movs	r3, #26
 8002db2:	2220      	movs	r2, #32
 8002db4:	4694      	mov	ip, r2
 8002db6:	44bc      	add	ip, r7
 8002db8:	4463      	add	r3, ip
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
        break;
 8002dbe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d02b      	beq.n	8002e1e <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dca:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <UART_SetConfig+0x518>)
 8002dcc:	0052      	lsls	r2, r2, #1
 8002dce:	5ad3      	ldrh	r3, [r2, r3]
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dd4:	f7fd f9a0 	bl	8000118 <__udivsi3>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	001a      	movs	r2, r3
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	085b      	lsrs	r3, r3, #1
 8002de2:	18d2      	adds	r2, r2, r3
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	0019      	movs	r1, r3
 8002dea:	0010      	movs	r0, r2
 8002dec:	f7fd f994 	bl	8000118 <__udivsi3>
 8002df0:	0003      	movs	r3, r0
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df8:	2b0f      	cmp	r3, #15
 8002dfa:	d909      	bls.n	8002e10 <UART_SetConfig+0x4d8>
 8002dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	025b      	lsls	r3, r3, #9
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d204      	bcs.n	8002e10 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	e006      	b.n	8002e1e <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8002e10:	231a      	movs	r3, #26
 8002e12:	2220      	movs	r2, #32
 8002e14:	4694      	mov	ip, r2
 8002e16:	44bc      	add	ip, r7
 8002e18:	4463      	add	r3, ip
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	226a      	movs	r2, #106	; 0x6a
 8002e22:	2101      	movs	r1, #1
 8002e24:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	2268      	movs	r2, #104	; 0x68
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	2200      	movs	r2, #0
 8002e32:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2200      	movs	r2, #0
 8002e38:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002e3a:	231a      	movs	r3, #26
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	4694      	mov	ip, r2
 8002e40:	44bc      	add	ip, r7
 8002e42:	4463      	add	r3, ip
 8002e44:	781b      	ldrb	r3, [r3, #0]
}
 8002e46:	0018      	movs	r0, r3
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	b010      	add	sp, #64	; 0x40
 8002e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	08004544 	.word	0x08004544
 8002e54:	00f42400 	.word	0x00f42400

08002e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	2201      	movs	r2, #1
 8002e66:	4013      	ands	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a4a      	ldr	r2, [pc, #296]	; (8002f9c <UART_AdvFeatureConfig+0x144>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	2202      	movs	r2, #2
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d00b      	beq.n	8002ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a43      	ldr	r2, [pc, #268]	; (8002fa0 <UART_AdvFeatureConfig+0x148>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <UART_AdvFeatureConfig+0x14c>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	2208      	movs	r2, #8
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4a34      	ldr	r2, [pc, #208]	; (8002fa8 <UART_AdvFeatureConfig+0x150>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	2210      	movs	r2, #16
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <UART_AdvFeatureConfig+0x154>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	2220      	movs	r2, #32
 8002f10:	4013      	ands	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <UART_AdvFeatureConfig+0x158>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	2240      	movs	r2, #64	; 0x40
 8002f32:	4013      	ands	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <UART_AdvFeatureConfig+0x15c>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	035b      	lsls	r3, r3, #13
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10b      	bne.n	8002f72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <UART_AdvFeatureConfig+0x160>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	0019      	movs	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <UART_AdvFeatureConfig+0x164>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
  }
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	fffdffff 	.word	0xfffdffff
 8002fa0:	fffeffff 	.word	0xfffeffff
 8002fa4:	fffbffff 	.word	0xfffbffff
 8002fa8:	ffff7fff 	.word	0xffff7fff
 8002fac:	ffffefff 	.word	0xffffefff
 8002fb0:	ffffdfff 	.word	0xffffdfff
 8002fb4:	ffefffff 	.word	0xffefffff
 8002fb8:	ff9fffff 	.word	0xff9fffff
 8002fbc:	fff7ffff 	.word	0xfff7ffff

08002fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	228c      	movs	r2, #140	; 0x8c
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd0:	f7fd feea 	bl	8000da8 <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d10c      	bne.n	8003000 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	0391      	lsls	r1, r2, #14
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4a18      	ldr	r2, [pc, #96]	; (8003050 <UART_CheckIdleState+0x90>)
 8002ff0:	9200      	str	r2, [sp, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f000 f82e 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d001      	beq.n	8003000 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e023      	b.n	8003048 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2204      	movs	r2, #4
 8003008:	4013      	ands	r3, r2
 800300a:	2b04      	cmp	r3, #4
 800300c:	d10c      	bne.n	8003028 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	03d1      	lsls	r1, r2, #15
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4a0e      	ldr	r2, [pc, #56]	; (8003050 <UART_CheckIdleState+0x90>)
 8003018:	9200      	str	r2, [sp, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	f000 f81a 	bl	8003054 <UART_WaitOnFlagUntilTimeout>
 8003020:	1e03      	subs	r3, r0, #0
 8003022:	d001      	beq.n	8003028 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e00f      	b.n	8003048 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2284      	movs	r2, #132	; 0x84
 800302c:	2120      	movs	r1, #32
 800302e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2288      	movs	r2, #136	; 0x88
 8003034:	2120      	movs	r1, #32
 8003036:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	2100      	movs	r1, #0
 8003044:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	0018      	movs	r0, r3
 800304a:	46bd      	mov	sp, r7
 800304c:	b004      	add	sp, #16
 800304e:	bd80      	pop	{r7, pc}
 8003050:	01ffffff 	.word	0x01ffffff

08003054 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b094      	sub	sp, #80	; 0x50
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003064:	e0a7      	b.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003068:	3301      	adds	r3, #1
 800306a:	d100      	bne.n	800306e <UART_WaitOnFlagUntilTimeout+0x1a>
 800306c:	e0a3      	b.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fd fe9b 	bl	8000da8 <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <UART_WaitOnFlagUntilTimeout+0x30>
 800307e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003080:	2b00      	cmp	r3, #0
 8003082:	d13f      	bne.n	8003104 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003084:	f3ef 8310 	mrs	r3, PRIMASK
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800308c:	647b      	str	r3, [r7, #68]	; 0x44
 800308e:	2301      	movs	r3, #1
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	f383 8810 	msr	PRIMASK, r3
}
 8003098:	46c0      	nop			; (mov r8, r8)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	494e      	ldr	r1, [pc, #312]	; (80031e0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	f383 8810 	msr	PRIMASK, r3
}
 80030b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b6:	f3ef 8310 	mrs	r3, PRIMASK
 80030ba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80030bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030be:	643b      	str	r3, [r7, #64]	; 0x40
 80030c0:	2301      	movs	r3, #1
 80030c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	f383 8810 	msr	PRIMASK, r3
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2101      	movs	r1, #1
 80030d8:	438a      	bics	r2, r1
 80030da:	609a      	str	r2, [r3, #8]
 80030dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030de:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e2:	f383 8810 	msr	PRIMASK, r3
}
 80030e6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2284      	movs	r2, #132	; 0x84
 80030ec:	2120      	movs	r1, #32
 80030ee:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2288      	movs	r2, #136	; 0x88
 80030f4:	2120      	movs	r1, #32
 80030f6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	2100      	movs	r1, #0
 80030fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e069      	b.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2204      	movs	r2, #4
 800310c:	4013      	ands	r3, r2
 800310e:	d052      	beq.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	401a      	ands	r2, r3
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	429a      	cmp	r2, r3
 8003122:	d148      	bne.n	80031b6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	0112      	lsls	r2, r2, #4
 800312c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800312e:	f3ef 8310 	mrs	r3, PRIMASK
 8003132:	613b      	str	r3, [r7, #16]
  return(result);
 8003134:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003138:	2301      	movs	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4924      	ldr	r1, [pc, #144]	; (80031e0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003150:	400a      	ands	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003156:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f383 8810 	msr	PRIMASK, r3
}
 800315e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003160:	f3ef 8310 	mrs	r3, PRIMASK
 8003164:	61fb      	str	r3, [r7, #28]
  return(result);
 8003166:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003168:	64bb      	str	r3, [r7, #72]	; 0x48
 800316a:	2301      	movs	r3, #1
 800316c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	f383 8810 	msr	PRIMASK, r3
}
 8003174:	46c0      	nop			; (mov r8, r8)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	438a      	bics	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	f383 8810 	msr	PRIMASK, r3
}
 8003190:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2284      	movs	r2, #132	; 0x84
 8003196:	2120      	movs	r1, #32
 8003198:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2288      	movs	r2, #136	; 0x88
 800319e:	2120      	movs	r1, #32
 80031a0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	228c      	movs	r2, #140	; 0x8c
 80031a6:	2120      	movs	r1, #32
 80031a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	2100      	movs	r1, #0
 80031b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e010      	b.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	69db      	ldr	r3, [r3, #28]
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	4013      	ands	r3, r2
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	425a      	negs	r2, r3
 80031c6:	4153      	adcs	r3, r2
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	001a      	movs	r2, r3
 80031cc:	1dfb      	adds	r3, r7, #7
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d100      	bne.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x182>
 80031d4:	e747      	b.n	8003066 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	b014      	add	sp, #80	; 0x50
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	fffffe5f 	.word	0xfffffe5f

080031e4 <IS31FL3743B_init>:

uint8_t baseADDR = 0;
bool cpltFlag = 0; //complete flag

SPI_HandleTypeDef hspi1;

 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
// for glowing patter
 80031ea:	f000 f93b 	bl	8003464 <IS31FL3743B_Dumby>
const uint8_t PWM_Gamma64[64] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
 80031ee:	f000 f903 	bl	80033f8 <IS31FL3743B_Reset>
//	IS31FL3743B_SetDotColor(41, White, full);
//	IS31FL3743B_SetDotColor(44, White, full);
//	IS31FL3743B_SetDotColor(45, White, full);

void IS31FL3743B_init(void) {
	IS31FL3743B_Dumby();
 80031f2:	23a0      	movs	r3, #160	; 0xa0
 80031f4:	05db      	lsls	r3, r3, #23
 80031f6:	2200      	movs	r2, #0
 80031f8:	2110      	movs	r1, #16
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7fe f88a 	bl	8001314 <HAL_GPIO_WritePin>
	IS31FL3743B_Reset();
 8003200:	201c      	movs	r0, #28
 8003202:	183b      	adds	r3, r7, r0
 8003204:	4a3b      	ldr	r2, [pc, #236]	; (80032f4 <IS31FL3743B_init+0x110>)
 8003206:	8811      	ldrh	r1, [r2, #0]
 8003208:	8019      	strh	r1, [r3, #0]
 800320a:	7892      	ldrb	r2, [r2, #2]
 800320c:	709a      	strb	r2, [r3, #2]

 800320e:	1839      	adds	r1, r7, r0
 8003210:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <IS31FL3743B_init+0x114>)
 8003212:	2203      	movs	r2, #3
 8003214:	0018      	movs	r0, r3
 8003216:	f7fe fe69 	bl	8001eec <HAL_SPI_Transmit_IT>
	/*Set config register
 800321a:	23a0      	movs	r3, #160	; 0xa0
 800321c:	05db      	lsls	r3, r3, #23
 800321e:	2201      	movs	r2, #1
 8003220:	2110      	movs	r1, #16
 8003222:	0018      	movs	r0, r3
 8003224:	f7fe f876 	bl	8001314 <HAL_GPIO_WritePin>
	 *
	 * On this board, we are using SW1-8 , SW9-11 are inactive, so we're using sws 0011
	 * bit 3 is reserved to 1
	 *
	 * OSDE can be 00 or 11*
	 *
 8003228:	23a0      	movs	r3, #160	; 0xa0
 800322a:	05db      	lsls	r3, r3, #23
 800322c:	2200      	movs	r2, #0
 800322e:	2110      	movs	r1, #16
 8003230:	0018      	movs	r0, r3
 8003232:	f7fe f86f 	bl	8001314 <HAL_GPIO_WritePin>
	 * No open short detection necessary, and normal operation
 8003236:	2018      	movs	r0, #24
 8003238:	183b      	adds	r3, r7, r0
 800323a:	4a30      	ldr	r2, [pc, #192]	; (80032fc <IS31FL3743B_init+0x118>)
 800323c:	8811      	ldrh	r1, [r2, #0]
 800323e:	8019      	strh	r1, [r3, #0]
 8003240:	7892      	ldrb	r2, [r2, #2]
 8003242:	709a      	strb	r2, [r3, #2]
	 * -----------------------
 8003244:	1839      	adds	r1, r7, r0
 8003246:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <IS31FL3743B_init+0x114>)
 8003248:	2203      	movs	r2, #3
 800324a:	0018      	movs	r0, r3
 800324c:	f7fe fe4e 	bl	8001eec <HAL_SPI_Transmit_IT>
	 * | SWS | - | OSDE | SSD|
 8003250:	23a0      	movs	r3, #160	; 0xa0
 8003252:	05db      	lsls	r3, r3, #23
 8003254:	2201      	movs	r2, #1
 8003256:	2110      	movs	r1, #16
 8003258:	0018      	movs	r0, r3
 800325a:	f7fe f85b 	bl	8001314 <HAL_GPIO_WritePin>
	 * -----------------------
	 *or 0x39 - Config def
	 *
	 *
	 * */

 800325e:	1d3b      	adds	r3, r7, #4
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	3304      	adds	r3, #4
 8003266:	220e      	movs	r2, #14
 8003268:	2100      	movs	r1, #0
 800326a:	0018      	movs	r0, r3
 800326c:	f000 f97c 	bl	8003568 <memset>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); //Pull chip select low
 8003270:	1d3b      	adds	r3, r7, #4
 8003272:	2212      	movs	r2, #18
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	0018      	movs	r0, r3
 8003278:	f000 f976 	bl	8003568 <memset>
	uint8_t spiDataTx[3] = { Page2_ADDR, Config_ADDR, ConfigDef };
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2251      	movs	r2, #81	; 0x51
 8003280:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx, sizeof(spiDataTx));
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2201      	movs	r2, #1
 8003286:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select low
 8003288:	231f      	movs	r3, #31
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e024      	b.n	80032dc <IS31FL3743B_init+0xf8>

 8003292:	23a0      	movs	r3, #160	; 0xa0
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	2200      	movs	r2, #0
 8003298:	2110      	movs	r1, #16
 800329a:	0018      	movs	r0, r3
 800329c:	f7fe f83a 	bl	8001314 <HAL_GPIO_WritePin>
	/*
 80032a0:	1d39      	adds	r1, r7, #4
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <IS31FL3743B_init+0x114>)
 80032a4:	2212      	movs	r2, #18
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fe fe20 	bl	8001eec <HAL_SPI_Transmit_IT>
	 * Set GCC to full power
 80032ac:	241f      	movs	r4, #31
 80032ae:	193b      	adds	r3, r7, r4
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	1c1a      	adds	r2, r3, #0
 80032b4:	00d2      	lsls	r2, r2, #3
 80032b6:	18d3      	adds	r3, r2, r3
 80032b8:	18db      	adds	r3, r3, r3
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	705a      	strb	r2, [r3, #1]
	 *
 80032c4:	23a0      	movs	r3, #160	; 0xa0
 80032c6:	05db      	lsls	r3, r3, #23
 80032c8:	2201      	movs	r2, #1
 80032ca:	2110      	movs	r1, #16
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fe f821 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select low
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	193b      	adds	r3, r7, r4
 80032d8:	3201      	adds	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	231f      	movs	r3, #31
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d9d5      	bls.n	8003292 <IS31FL3743B_init+0xae>
	 * */

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); //Pull chip select low
	uint8_t spiDataTx2[3] = { Page2_ADDR, GCC_ADDR, 0x40 };
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx2, sizeof(spiDataTx2));
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7fd fa7c 	bl	80007e4 <LedBlink>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select low
 80032ec:	46c0      	nop			; (mov r8, r8)
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b009      	add	sp, #36	; 0x24
 80032f2:	bd90      	pop	{r4, r7, pc}
 80032f4:	080044cc 	.word	0x080044cc
 80032f8:	20000104 	.word	0x20000104
 80032fc:	080044d0 	.word	0x080044d0

08003300 <IS31FL3743B_SetDotColor>:
	 *

	 * Set scaling to range
	 *
	 * */

 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	0004      	movs	r4, r0
 8003308:	0008      	movs	r0, r1
 800330a:	0011      	movs	r1, r2
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	1c22      	adds	r2, r4, #0
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	1dbb      	adds	r3, r7, #6
 8003314:	1c02      	adds	r2, r0, #0
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	1d7b      	adds	r3, r7, #5
 800331a:	1c0a      	adds	r2, r1, #0
 800331c:	701a      	strb	r2, [r3, #0]
	uint8_t spiDataTx4[146] = { 0x00 }; // create buffer for all leds
	memset(spiDataTx4, 0x80, sizeof(spiDataTx4));
 800331e:	1dfb      	adds	r3, r7, #7
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d012      	beq.n	800334c <IS31FL3743B_SetDotColor+0x4c>
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b06      	cmp	r3, #6
 800332c:	d80e      	bhi.n	800334c <IS31FL3743B_SetDotColor+0x4c>
	spiDataTx4[0] = Page1_ADDR;
 800332e:	1dfb      	adds	r3, r7, #7
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	0013      	movs	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	189b      	adds	r3, r3, r2
 8003338:	1e9a      	subs	r2, r3, #2
 800333a:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <IS31FL3743B_SetDotColor+0xf0>)
 800333c:	0011      	movs	r1, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f000 f91a 	bl	8003578 <iprintf>
 8003344:	0003      	movs	r3, r0
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <IS31FL3743B_SetDotColor+0xf4>)
 800334a:	701a      	strb	r2, [r3, #0]
	spiDataTx4[1] = StartADDR;
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx4, sizeof(spiDataTx4));
 800334c:	1dfb      	adds	r3, r7, #7
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b06      	cmp	r3, #6
 8003352:	d906      	bls.n	8003362 <IS31FL3743B_SetDotColor+0x62>
 8003354:	1dfb      	adds	r3, r7, #7
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b0c      	cmp	r3, #12
 800335a:	d802      	bhi.n	8003362 <IS31FL3743B_SetDotColor+0x62>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 800335c:	4b25      	ldr	r3, [pc, #148]	; (80033f4 <IS31FL3743B_SetDotColor+0xf4>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]

	// Confirmation
	LedBlink(1);
 8003362:	1dfb      	adds	r3, r7, #7
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d906      	bls.n	8003378 <IS31FL3743B_SetDotColor+0x78>
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b12      	cmp	r3, #18
 8003370:	d802      	bhi.n	8003378 <IS31FL3743B_SetDotColor+0x78>
}
 8003372:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <IS31FL3743B_SetDotColor+0xf4>)
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
;

uint8_t IS31FL3743B_SetDotColor(uint8_t led, uint8_t color, uint8_t intensity) {
 8003378:	1dfb      	adds	r3, r7, #7
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b12      	cmp	r3, #18
 800337e:	d906      	bls.n	800338e <IS31FL3743B_SetDotColor+0x8e>
 8003380:	1dfb      	adds	r3, r7, #7
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b18      	cmp	r3, #24
 8003386:	d802      	bhi.n	800338e <IS31FL3743B_SetDotColor+0x8e>
	uint8_t baseADDR = 0x00;
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <IS31FL3743B_SetDotColor+0xf4>)
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
	//filter out bad dot selections
	if (led < 1 || led > 48) {
		LedBlink(3);
 800338e:	1dfb      	adds	r3, r7, #7
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b18      	cmp	r3, #24
 8003394:	d906      	bls.n	80033a4 <IS31FL3743B_SetDotColor+0xa4>
 8003396:	1dfb      	adds	r3, r7, #7
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b1e      	cmp	r3, #30
 800339c:	d802      	bhi.n	80033a4 <IS31FL3743B_SetDotColor+0xa4>
		return HAL_ERROR;
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <IS31FL3743B_SetDotColor+0xf4>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]
	}
	//set correct base address current sink
	else
 80033a4:	1dfb      	adds	r3, r7, #7
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b1e      	cmp	r3, #30
 80033aa:	d906      	bls.n	80033ba <IS31FL3743B_SetDotColor+0xba>
 80033ac:	1dfb      	adds	r3, r7, #7
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	2b24      	cmp	r3, #36	; 0x24
 80033b2:	d802      	bhi.n	80033ba <IS31FL3743B_SetDotColor+0xba>
		baseADDR = (3 * led) - 2;	// convert led to starting reg (blue)
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <IS31FL3743B_SetDotColor+0xf4>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
	uint8_t intensityB, intensityG, intensityR = 0x01;
	/////////////////////////Set up intensity buffer///////////////////////
 80033ba:	1dfb      	adds	r3, r7, #7
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b24      	cmp	r3, #36	; 0x24
 80033c0:	d906      	bls.n	80033d0 <IS31FL3743B_SetDotColor+0xd0>
 80033c2:	1dfb      	adds	r3, r7, #7
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b2a      	cmp	r3, #42	; 0x2a
 80033c8:	d802      	bhi.n	80033d0 <IS31FL3743B_SetDotColor+0xd0>
	switch (color) {
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <IS31FL3743B_SetDotColor+0xf4>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
	case Blue:
		intensityB = 0x01;
 80033d0:	1dfb      	adds	r3, r7, #7
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b2a      	cmp	r3, #42	; 0x2a
 80033d6:	d906      	bls.n	80033e6 <IS31FL3743B_SetDotColor+0xe6>
 80033d8:	1dfb      	adds	r3, r7, #7
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b30      	cmp	r3, #48	; 0x30
 80033de:	d802      	bhi.n	80033e6 <IS31FL3743B_SetDotColor+0xe6>

 80033e0:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <IS31FL3743B_SetDotColor+0xf4>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
		intensityG = 0x00;
		intensityR = 0x00;
 80033e6:	46c0      	nop			; (mov r8, r8)
 80033e8:	46bd      	mov	sp, r7
 80033ea:	b003      	add	sp, #12
 80033ec:	bd90      	pop	{r4, r7, pc}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	080044d8 	.word	0x080044d8
 80033f4:	20000090 	.word	0x20000090

080033f8 <IS31FL3743B_Reset>:
		intensityB = 0x01;

		intensityG = 0x00;
		intensityR = 0x00;
		break;

 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
	case Purple:
		intensityB = 0x00;
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	0119      	lsls	r1, r3, #4
 8003402:	23a0      	movs	r3, #160	; 0xa0
 8003404:	05db      	lsls	r3, r3, #23
 8003406:	2200      	movs	r2, #0
 8003408:	0018      	movs	r0, r3
 800340a:	f7fd ff83 	bl	8001314 <HAL_GPIO_WritePin>
		intensityG = 0x01;
		intensityR = 0x00;
		break;
 800340e:	23a0      	movs	r3, #160	; 0xa0
 8003410:	05db      	lsls	r3, r3, #23
 8003412:	2200      	movs	r2, #0
 8003414:	2110      	movs	r1, #16
 8003416:	0018      	movs	r0, r3
 8003418:	f7fd ff7c 	bl	8001314 <HAL_GPIO_WritePin>

 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	4a0f      	ldr	r2, [pc, #60]	; (800345c <IS31FL3743B_Reset+0x64>)
 8003420:	8811      	ldrh	r1, [r2, #0]
 8003422:	8019      	strh	r1, [r3, #0]
 8003424:	7892      	ldrb	r2, [r2, #2]
 8003426:	709a      	strb	r2, [r3, #2]
	case Orange:
 8003428:	1d39      	adds	r1, r7, #4
 800342a:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <IS31FL3743B_Reset+0x68>)
 800342c:	2203      	movs	r2, #3
 800342e:	0018      	movs	r0, r3
 8003430:	f7fe fd5c 	bl	8001eec <HAL_SPI_Transmit_IT>
		intensityB = 0x00;
 8003434:	23a0      	movs	r3, #160	; 0xa0
 8003436:	05db      	lsls	r3, r3, #23
 8003438:	2201      	movs	r2, #1
 800343a:	2110      	movs	r1, #16
 800343c:	0018      	movs	r0, r3
 800343e:	f7fd ff69 	bl	8001314 <HAL_GPIO_WritePin>

		intensityG = intensityR * (2 / 3);
		intensityR = 0x01;
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	0119      	lsls	r1, r3, #4
 8003446:	23a0      	movs	r3, #160	; 0xa0
 8003448:	05db      	lsls	r3, r3, #23
 800344a:	2201      	movs	r2, #1
 800344c:	0018      	movs	r0, r3
 800344e:	f7fd ff61 	bl	8001314 <HAL_GPIO_WritePin>
		break;

 8003452:	46c0      	nop			; (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b002      	add	sp, #8
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	080044dc 	.word	0x080044dc
 8003460:	20000104 	.word	0x20000104

08003464 <IS31FL3743B_Dumby>:
	case White:
		intensityB = 0x01;
		intensityG = 0x01;
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
		intensityR = 0x01;
		//no need to change anything
 800346a:	23a0      	movs	r3, #160	; 0xa0
 800346c:	05db      	lsls	r3, r3, #23
 800346e:	2200      	movs	r2, #0
 8003470:	2110      	movs	r1, #16
 8003472:	0018      	movs	r0, r3
 8003474:	f7fd ff4e 	bl	8001314 <HAL_GPIO_WritePin>
		uint8_t spiDataTx[5] = { Page0_ADDR, baseADDR, intensityB * intensity,
 8003478:	2001      	movs	r0, #1
 800347a:	f000 f823 	bl	80034c4 <MyDelay_ms>
				intensityG * intensity, intensityR * intensity };
 800347e:	1d3b      	adds	r3, r7, #4
 8003480:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <IS31FL3743B_Dumby+0x48>)
 8003482:	8811      	ldrh	r1, [r2, #0]
 8003484:	8019      	strh	r1, [r3, #0]
 8003486:	7892      	ldrb	r2, [r2, #2]
 8003488:	709a      	strb	r2, [r3, #2]
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); // Pull chip select low
 800348a:	1d39      	adds	r1, r7, #4
 800348c:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <IS31FL3743B_Dumby+0x4c>)
 800348e:	2203      	movs	r2, #3
 8003490:	0018      	movs	r0, r3
 8003492:	f7fe fd2b 	bl	8001eec <HAL_SPI_Transmit_IT>
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx, sizeof(spiDataTx));
 8003496:	23a0      	movs	r3, #160	; 0xa0
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	2201      	movs	r2, #1
 800349c:	2110      	movs	r1, #16
 800349e:	0018      	movs	r0, r3
 80034a0:	f7fd ff38 	bl	8001314 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); // Pull chip select high
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b002      	add	sp, #8
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	080044e0 	.word	0x080044e0
 80034b0:	20000104 	.word	0x20000104

080034b4 <HAL_SPI_TxCpltCallback>:
		break;

	default:
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
		break;
	}
	return HAL_OK;
}
 80034bc:	46c0      	nop			; (mov r8, r8)
 80034be:	46bd      	mov	sp, r7
 80034c0:	b002      	add	sp, #8
 80034c2:	bd80      	pop	{r7, pc}

080034c4 <MyDelay_ms>:
 *  Created on: Mar 9, 2022
 *      Author: Rara_
 */
#include "MyDelay.h"

void MyDelay_ms(uint16_t HowLong) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	0002      	movs	r2, r0
 80034cc:	1dbb      	adds	r3, r7, #6
 80034ce:	801a      	strh	r2, [r3, #0]
	// Get current time (microseconds)
	timer_val = __HAL_TIM_GET_COUNTER(&(MY_TIM_HANDLE));
 80034d0:	4b0e      	ldr	r3, [pc, #56]	; (800350c <MyDelay_ms+0x48>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <MyDelay_ms+0x4c>)
 80034da:	801a      	strh	r2, [r3, #0]

	while (__HAL_TIM_GET_COUNTER(&(MY_TIM_HANDLE)) - timer_val <= HowLong * 10) {
 80034dc:	46c0      	nop			; (mov r8, r8)
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <MyDelay_ms+0x48>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <MyDelay_ms+0x4c>)
 80034e6:	8812      	ldrh	r2, [r2, #0]
 80034e8:	1a99      	subs	r1, r3, r2
 80034ea:	1dbb      	adds	r3, r7, #6
 80034ec:	881a      	ldrh	r2, [r3, #0]
 80034ee:	0013      	movs	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4299      	cmp	r1, r3
 80034f8:	d9f1      	bls.n	80034de <MyDelay_ms+0x1a>
		//do nothing
	}
	//reset timer to prevent roll over timing mismatch
	__HAL_TIM_SET_COUNTER(&(MY_TIM_HANDLE), 0);
 80034fa:	4b04      	ldr	r3, [pc, #16]	; (800350c <MyDelay_ms+0x48>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2200      	movs	r2, #0
 8003500:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b002      	add	sp, #8
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	200001f8 	.word	0x200001f8
 8003510:	20000100 	.word	0x20000100

08003514 <__errno>:
 8003514:	4b01      	ldr	r3, [pc, #4]	; (800351c <__errno+0x8>)
 8003516:	6818      	ldr	r0, [r3, #0]
 8003518:	4770      	bx	lr
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	2000000c 	.word	0x2000000c

08003520 <__libc_init_array>:
 8003520:	b570      	push	{r4, r5, r6, lr}
 8003522:	2600      	movs	r6, #0
 8003524:	4d0c      	ldr	r5, [pc, #48]	; (8003558 <__libc_init_array+0x38>)
 8003526:	4c0d      	ldr	r4, [pc, #52]	; (800355c <__libc_init_array+0x3c>)
 8003528:	1b64      	subs	r4, r4, r5
 800352a:	10a4      	asrs	r4, r4, #2
 800352c:	42a6      	cmp	r6, r4
 800352e:	d109      	bne.n	8003544 <__libc_init_array+0x24>
 8003530:	2600      	movs	r6, #0
 8003532:	f000 ffbf 	bl	80044b4 <_init>
 8003536:	4d0a      	ldr	r5, [pc, #40]	; (8003560 <__libc_init_array+0x40>)
 8003538:	4c0a      	ldr	r4, [pc, #40]	; (8003564 <__libc_init_array+0x44>)
 800353a:	1b64      	subs	r4, r4, r5
 800353c:	10a4      	asrs	r4, r4, #2
 800353e:	42a6      	cmp	r6, r4
 8003540:	d105      	bne.n	800354e <__libc_init_array+0x2e>
 8003542:	bd70      	pop	{r4, r5, r6, pc}
 8003544:	00b3      	lsls	r3, r6, #2
 8003546:	58eb      	ldr	r3, [r5, r3]
 8003548:	4798      	blx	r3
 800354a:	3601      	adds	r6, #1
 800354c:	e7ee      	b.n	800352c <__libc_init_array+0xc>
 800354e:	00b3      	lsls	r3, r6, #2
 8003550:	58eb      	ldr	r3, [r5, r3]
 8003552:	4798      	blx	r3
 8003554:	3601      	adds	r6, #1
 8003556:	e7f2      	b.n	800353e <__libc_init_array+0x1e>
 8003558:	080045fc 	.word	0x080045fc
 800355c:	080045fc 	.word	0x080045fc
 8003560:	080045fc 	.word	0x080045fc
 8003564:	08004600 	.word	0x08004600

08003568 <memset>:
 8003568:	0003      	movs	r3, r0
 800356a:	1882      	adds	r2, r0, r2
 800356c:	4293      	cmp	r3, r2
 800356e:	d100      	bne.n	8003572 <memset+0xa>
 8003570:	4770      	bx	lr
 8003572:	7019      	strb	r1, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	e7f9      	b.n	800356c <memset+0x4>

08003578 <iprintf>:
 8003578:	b40f      	push	{r0, r1, r2, r3}
 800357a:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <iprintf+0x30>)
 800357c:	b513      	push	{r0, r1, r4, lr}
 800357e:	681c      	ldr	r4, [r3, #0]
 8003580:	2c00      	cmp	r4, #0
 8003582:	d005      	beq.n	8003590 <iprintf+0x18>
 8003584:	69a3      	ldr	r3, [r4, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d102      	bne.n	8003590 <iprintf+0x18>
 800358a:	0020      	movs	r0, r4
 800358c:	f000 f870 	bl	8003670 <__sinit>
 8003590:	ab05      	add	r3, sp, #20
 8003592:	0020      	movs	r0, r4
 8003594:	9a04      	ldr	r2, [sp, #16]
 8003596:	68a1      	ldr	r1, [r4, #8]
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	f000 f993 	bl	80038c4 <_vfiprintf_r>
 800359e:	bc16      	pop	{r1, r2, r4}
 80035a0:	bc08      	pop	{r3}
 80035a2:	b004      	add	sp, #16
 80035a4:	4718      	bx	r3
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	2000000c 	.word	0x2000000c

080035ac <std>:
 80035ac:	2300      	movs	r3, #0
 80035ae:	b510      	push	{r4, lr}
 80035b0:	0004      	movs	r4, r0
 80035b2:	6003      	str	r3, [r0, #0]
 80035b4:	6043      	str	r3, [r0, #4]
 80035b6:	6083      	str	r3, [r0, #8]
 80035b8:	8181      	strh	r1, [r0, #12]
 80035ba:	6643      	str	r3, [r0, #100]	; 0x64
 80035bc:	0019      	movs	r1, r3
 80035be:	81c2      	strh	r2, [r0, #14]
 80035c0:	6103      	str	r3, [r0, #16]
 80035c2:	6143      	str	r3, [r0, #20]
 80035c4:	6183      	str	r3, [r0, #24]
 80035c6:	2208      	movs	r2, #8
 80035c8:	305c      	adds	r0, #92	; 0x5c
 80035ca:	f7ff ffcd 	bl	8003568 <memset>
 80035ce:	4b05      	ldr	r3, [pc, #20]	; (80035e4 <std+0x38>)
 80035d0:	6263      	str	r3, [r4, #36]	; 0x24
 80035d2:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <std+0x3c>)
 80035d4:	6224      	str	r4, [r4, #32]
 80035d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <std+0x40>)
 80035da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035dc:	4b04      	ldr	r3, [pc, #16]	; (80035f0 <std+0x44>)
 80035de:	6323      	str	r3, [r4, #48]	; 0x30
 80035e0:	bd10      	pop	{r4, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	08003e61 	.word	0x08003e61
 80035e8:	08003e89 	.word	0x08003e89
 80035ec:	08003ec1 	.word	0x08003ec1
 80035f0:	08003eed 	.word	0x08003eed

080035f4 <_cleanup_r>:
 80035f4:	b510      	push	{r4, lr}
 80035f6:	4902      	ldr	r1, [pc, #8]	; (8003600 <_cleanup_r+0xc>)
 80035f8:	f000 f8ba 	bl	8003770 <_fwalk_reent>
 80035fc:	bd10      	pop	{r4, pc}
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	080041f9 	.word	0x080041f9

08003604 <__sfmoreglue>:
 8003604:	b570      	push	{r4, r5, r6, lr}
 8003606:	2568      	movs	r5, #104	; 0x68
 8003608:	1e4a      	subs	r2, r1, #1
 800360a:	4355      	muls	r5, r2
 800360c:	000e      	movs	r6, r1
 800360e:	0029      	movs	r1, r5
 8003610:	3174      	adds	r1, #116	; 0x74
 8003612:	f000 f8d1 	bl	80037b8 <_malloc_r>
 8003616:	1e04      	subs	r4, r0, #0
 8003618:	d008      	beq.n	800362c <__sfmoreglue+0x28>
 800361a:	2100      	movs	r1, #0
 800361c:	002a      	movs	r2, r5
 800361e:	6001      	str	r1, [r0, #0]
 8003620:	6046      	str	r6, [r0, #4]
 8003622:	300c      	adds	r0, #12
 8003624:	60a0      	str	r0, [r4, #8]
 8003626:	3268      	adds	r2, #104	; 0x68
 8003628:	f7ff ff9e 	bl	8003568 <memset>
 800362c:	0020      	movs	r0, r4
 800362e:	bd70      	pop	{r4, r5, r6, pc}

08003630 <__sfp_lock_acquire>:
 8003630:	b510      	push	{r4, lr}
 8003632:	4802      	ldr	r0, [pc, #8]	; (800363c <__sfp_lock_acquire+0xc>)
 8003634:	f000 f8bd 	bl	80037b2 <__retarget_lock_acquire_recursive>
 8003638:	bd10      	pop	{r4, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	20000250 	.word	0x20000250

08003640 <__sfp_lock_release>:
 8003640:	b510      	push	{r4, lr}
 8003642:	4802      	ldr	r0, [pc, #8]	; (800364c <__sfp_lock_release+0xc>)
 8003644:	f000 f8b6 	bl	80037b4 <__retarget_lock_release_recursive>
 8003648:	bd10      	pop	{r4, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	20000250 	.word	0x20000250

08003650 <__sinit_lock_acquire>:
 8003650:	b510      	push	{r4, lr}
 8003652:	4802      	ldr	r0, [pc, #8]	; (800365c <__sinit_lock_acquire+0xc>)
 8003654:	f000 f8ad 	bl	80037b2 <__retarget_lock_acquire_recursive>
 8003658:	bd10      	pop	{r4, pc}
 800365a:	46c0      	nop			; (mov r8, r8)
 800365c:	2000024b 	.word	0x2000024b

08003660 <__sinit_lock_release>:
 8003660:	b510      	push	{r4, lr}
 8003662:	4802      	ldr	r0, [pc, #8]	; (800366c <__sinit_lock_release+0xc>)
 8003664:	f000 f8a6 	bl	80037b4 <__retarget_lock_release_recursive>
 8003668:	bd10      	pop	{r4, pc}
 800366a:	46c0      	nop			; (mov r8, r8)
 800366c:	2000024b 	.word	0x2000024b

08003670 <__sinit>:
 8003670:	b513      	push	{r0, r1, r4, lr}
 8003672:	0004      	movs	r4, r0
 8003674:	f7ff ffec 	bl	8003650 <__sinit_lock_acquire>
 8003678:	69a3      	ldr	r3, [r4, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <__sinit+0x14>
 800367e:	f7ff ffef 	bl	8003660 <__sinit_lock_release>
 8003682:	bd13      	pop	{r0, r1, r4, pc}
 8003684:	64a3      	str	r3, [r4, #72]	; 0x48
 8003686:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003688:	6523      	str	r3, [r4, #80]	; 0x50
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <__sinit+0x68>)
 800368c:	4a13      	ldr	r2, [pc, #76]	; (80036dc <__sinit+0x6c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	62a2      	str	r2, [r4, #40]	; 0x28
 8003692:	9301      	str	r3, [sp, #4]
 8003694:	42a3      	cmp	r3, r4
 8003696:	d101      	bne.n	800369c <__sinit+0x2c>
 8003698:	2301      	movs	r3, #1
 800369a:	61a3      	str	r3, [r4, #24]
 800369c:	0020      	movs	r0, r4
 800369e:	f000 f81f 	bl	80036e0 <__sfp>
 80036a2:	6060      	str	r0, [r4, #4]
 80036a4:	0020      	movs	r0, r4
 80036a6:	f000 f81b 	bl	80036e0 <__sfp>
 80036aa:	60a0      	str	r0, [r4, #8]
 80036ac:	0020      	movs	r0, r4
 80036ae:	f000 f817 	bl	80036e0 <__sfp>
 80036b2:	2200      	movs	r2, #0
 80036b4:	2104      	movs	r1, #4
 80036b6:	60e0      	str	r0, [r4, #12]
 80036b8:	6860      	ldr	r0, [r4, #4]
 80036ba:	f7ff ff77 	bl	80035ac <std>
 80036be:	2201      	movs	r2, #1
 80036c0:	2109      	movs	r1, #9
 80036c2:	68a0      	ldr	r0, [r4, #8]
 80036c4:	f7ff ff72 	bl	80035ac <std>
 80036c8:	2202      	movs	r2, #2
 80036ca:	2112      	movs	r1, #18
 80036cc:	68e0      	ldr	r0, [r4, #12]
 80036ce:	f7ff ff6d 	bl	80035ac <std>
 80036d2:	2301      	movs	r3, #1
 80036d4:	61a3      	str	r3, [r4, #24]
 80036d6:	e7d2      	b.n	800367e <__sinit+0xe>
 80036d8:	0800455c 	.word	0x0800455c
 80036dc:	080035f5 	.word	0x080035f5

080036e0 <__sfp>:
 80036e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e2:	0007      	movs	r7, r0
 80036e4:	f7ff ffa4 	bl	8003630 <__sfp_lock_acquire>
 80036e8:	4b1f      	ldr	r3, [pc, #124]	; (8003768 <__sfp+0x88>)
 80036ea:	681e      	ldr	r6, [r3, #0]
 80036ec:	69b3      	ldr	r3, [r6, #24]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d102      	bne.n	80036f8 <__sfp+0x18>
 80036f2:	0030      	movs	r0, r6
 80036f4:	f7ff ffbc 	bl	8003670 <__sinit>
 80036f8:	3648      	adds	r6, #72	; 0x48
 80036fa:	68b4      	ldr	r4, [r6, #8]
 80036fc:	6873      	ldr	r3, [r6, #4]
 80036fe:	3b01      	subs	r3, #1
 8003700:	d504      	bpl.n	800370c <__sfp+0x2c>
 8003702:	6833      	ldr	r3, [r6, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d022      	beq.n	800374e <__sfp+0x6e>
 8003708:	6836      	ldr	r6, [r6, #0]
 800370a:	e7f6      	b.n	80036fa <__sfp+0x1a>
 800370c:	220c      	movs	r2, #12
 800370e:	5ea5      	ldrsh	r5, [r4, r2]
 8003710:	2d00      	cmp	r5, #0
 8003712:	d11a      	bne.n	800374a <__sfp+0x6a>
 8003714:	0020      	movs	r0, r4
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <__sfp+0x8c>)
 8003718:	3058      	adds	r0, #88	; 0x58
 800371a:	60e3      	str	r3, [r4, #12]
 800371c:	6665      	str	r5, [r4, #100]	; 0x64
 800371e:	f000 f847 	bl	80037b0 <__retarget_lock_init_recursive>
 8003722:	f7ff ff8d 	bl	8003640 <__sfp_lock_release>
 8003726:	0020      	movs	r0, r4
 8003728:	2208      	movs	r2, #8
 800372a:	0029      	movs	r1, r5
 800372c:	6025      	str	r5, [r4, #0]
 800372e:	60a5      	str	r5, [r4, #8]
 8003730:	6065      	str	r5, [r4, #4]
 8003732:	6125      	str	r5, [r4, #16]
 8003734:	6165      	str	r5, [r4, #20]
 8003736:	61a5      	str	r5, [r4, #24]
 8003738:	305c      	adds	r0, #92	; 0x5c
 800373a:	f7ff ff15 	bl	8003568 <memset>
 800373e:	6365      	str	r5, [r4, #52]	; 0x34
 8003740:	63a5      	str	r5, [r4, #56]	; 0x38
 8003742:	64a5      	str	r5, [r4, #72]	; 0x48
 8003744:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003746:	0020      	movs	r0, r4
 8003748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800374a:	3468      	adds	r4, #104	; 0x68
 800374c:	e7d7      	b.n	80036fe <__sfp+0x1e>
 800374e:	2104      	movs	r1, #4
 8003750:	0038      	movs	r0, r7
 8003752:	f7ff ff57 	bl	8003604 <__sfmoreglue>
 8003756:	1e04      	subs	r4, r0, #0
 8003758:	6030      	str	r0, [r6, #0]
 800375a:	d1d5      	bne.n	8003708 <__sfp+0x28>
 800375c:	f7ff ff70 	bl	8003640 <__sfp_lock_release>
 8003760:	230c      	movs	r3, #12
 8003762:	603b      	str	r3, [r7, #0]
 8003764:	e7ef      	b.n	8003746 <__sfp+0x66>
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	0800455c 	.word	0x0800455c
 800376c:	ffff0001 	.word	0xffff0001

08003770 <_fwalk_reent>:
 8003770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003772:	0004      	movs	r4, r0
 8003774:	0006      	movs	r6, r0
 8003776:	2700      	movs	r7, #0
 8003778:	9101      	str	r1, [sp, #4]
 800377a:	3448      	adds	r4, #72	; 0x48
 800377c:	6863      	ldr	r3, [r4, #4]
 800377e:	68a5      	ldr	r5, [r4, #8]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	9b00      	ldr	r3, [sp, #0]
 8003784:	3b01      	subs	r3, #1
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	d504      	bpl.n	8003794 <_fwalk_reent+0x24>
 800378a:	6824      	ldr	r4, [r4, #0]
 800378c:	2c00      	cmp	r4, #0
 800378e:	d1f5      	bne.n	800377c <_fwalk_reent+0xc>
 8003790:	0038      	movs	r0, r7
 8003792:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003794:	89ab      	ldrh	r3, [r5, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d908      	bls.n	80037ac <_fwalk_reent+0x3c>
 800379a:	220e      	movs	r2, #14
 800379c:	5eab      	ldrsh	r3, [r5, r2]
 800379e:	3301      	adds	r3, #1
 80037a0:	d004      	beq.n	80037ac <_fwalk_reent+0x3c>
 80037a2:	0029      	movs	r1, r5
 80037a4:	0030      	movs	r0, r6
 80037a6:	9b01      	ldr	r3, [sp, #4]
 80037a8:	4798      	blx	r3
 80037aa:	4307      	orrs	r7, r0
 80037ac:	3568      	adds	r5, #104	; 0x68
 80037ae:	e7e8      	b.n	8003782 <_fwalk_reent+0x12>

080037b0 <__retarget_lock_init_recursive>:
 80037b0:	4770      	bx	lr

080037b2 <__retarget_lock_acquire_recursive>:
 80037b2:	4770      	bx	lr

080037b4 <__retarget_lock_release_recursive>:
 80037b4:	4770      	bx	lr
	...

080037b8 <_malloc_r>:
 80037b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ba:	2303      	movs	r3, #3
 80037bc:	1ccd      	adds	r5, r1, #3
 80037be:	439d      	bics	r5, r3
 80037c0:	3508      	adds	r5, #8
 80037c2:	0006      	movs	r6, r0
 80037c4:	2d0c      	cmp	r5, #12
 80037c6:	d21f      	bcs.n	8003808 <_malloc_r+0x50>
 80037c8:	250c      	movs	r5, #12
 80037ca:	42a9      	cmp	r1, r5
 80037cc:	d81e      	bhi.n	800380c <_malloc_r+0x54>
 80037ce:	0030      	movs	r0, r6
 80037d0:	f000 fdde 	bl	8004390 <__malloc_lock>
 80037d4:	4925      	ldr	r1, [pc, #148]	; (800386c <_malloc_r+0xb4>)
 80037d6:	680a      	ldr	r2, [r1, #0]
 80037d8:	0014      	movs	r4, r2
 80037da:	2c00      	cmp	r4, #0
 80037dc:	d11a      	bne.n	8003814 <_malloc_r+0x5c>
 80037de:	4f24      	ldr	r7, [pc, #144]	; (8003870 <_malloc_r+0xb8>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <_malloc_r+0x38>
 80037e6:	0021      	movs	r1, r4
 80037e8:	0030      	movs	r0, r6
 80037ea:	f000 fb27 	bl	8003e3c <_sbrk_r>
 80037ee:	6038      	str	r0, [r7, #0]
 80037f0:	0029      	movs	r1, r5
 80037f2:	0030      	movs	r0, r6
 80037f4:	f000 fb22 	bl	8003e3c <_sbrk_r>
 80037f8:	1c43      	adds	r3, r0, #1
 80037fa:	d12b      	bne.n	8003854 <_malloc_r+0x9c>
 80037fc:	230c      	movs	r3, #12
 80037fe:	0030      	movs	r0, r6
 8003800:	6033      	str	r3, [r6, #0]
 8003802:	f000 fdcd 	bl	80043a0 <__malloc_unlock>
 8003806:	e003      	b.n	8003810 <_malloc_r+0x58>
 8003808:	2d00      	cmp	r5, #0
 800380a:	dade      	bge.n	80037ca <_malloc_r+0x12>
 800380c:	230c      	movs	r3, #12
 800380e:	6033      	str	r3, [r6, #0]
 8003810:	2000      	movs	r0, #0
 8003812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	1b5b      	subs	r3, r3, r5
 8003818:	d419      	bmi.n	800384e <_malloc_r+0x96>
 800381a:	2b0b      	cmp	r3, #11
 800381c:	d903      	bls.n	8003826 <_malloc_r+0x6e>
 800381e:	6023      	str	r3, [r4, #0]
 8003820:	18e4      	adds	r4, r4, r3
 8003822:	6025      	str	r5, [r4, #0]
 8003824:	e003      	b.n	800382e <_malloc_r+0x76>
 8003826:	6863      	ldr	r3, [r4, #4]
 8003828:	42a2      	cmp	r2, r4
 800382a:	d10e      	bne.n	800384a <_malloc_r+0x92>
 800382c:	600b      	str	r3, [r1, #0]
 800382e:	0030      	movs	r0, r6
 8003830:	f000 fdb6 	bl	80043a0 <__malloc_unlock>
 8003834:	0020      	movs	r0, r4
 8003836:	2207      	movs	r2, #7
 8003838:	300b      	adds	r0, #11
 800383a:	1d23      	adds	r3, r4, #4
 800383c:	4390      	bics	r0, r2
 800383e:	1ac2      	subs	r2, r0, r3
 8003840:	4298      	cmp	r0, r3
 8003842:	d0e6      	beq.n	8003812 <_malloc_r+0x5a>
 8003844:	1a1b      	subs	r3, r3, r0
 8003846:	50a3      	str	r3, [r4, r2]
 8003848:	e7e3      	b.n	8003812 <_malloc_r+0x5a>
 800384a:	6053      	str	r3, [r2, #4]
 800384c:	e7ef      	b.n	800382e <_malloc_r+0x76>
 800384e:	0022      	movs	r2, r4
 8003850:	6864      	ldr	r4, [r4, #4]
 8003852:	e7c2      	b.n	80037da <_malloc_r+0x22>
 8003854:	2303      	movs	r3, #3
 8003856:	1cc4      	adds	r4, r0, #3
 8003858:	439c      	bics	r4, r3
 800385a:	42a0      	cmp	r0, r4
 800385c:	d0e1      	beq.n	8003822 <_malloc_r+0x6a>
 800385e:	1a21      	subs	r1, r4, r0
 8003860:	0030      	movs	r0, r6
 8003862:	f000 faeb 	bl	8003e3c <_sbrk_r>
 8003866:	1c43      	adds	r3, r0, #1
 8003868:	d1db      	bne.n	8003822 <_malloc_r+0x6a>
 800386a:	e7c7      	b.n	80037fc <_malloc_r+0x44>
 800386c:	20000094 	.word	0x20000094
 8003870:	20000098 	.word	0x20000098

08003874 <__sfputc_r>:
 8003874:	6893      	ldr	r3, [r2, #8]
 8003876:	b510      	push	{r4, lr}
 8003878:	3b01      	subs	r3, #1
 800387a:	6093      	str	r3, [r2, #8]
 800387c:	2b00      	cmp	r3, #0
 800387e:	da04      	bge.n	800388a <__sfputc_r+0x16>
 8003880:	6994      	ldr	r4, [r2, #24]
 8003882:	42a3      	cmp	r3, r4
 8003884:	db07      	blt.n	8003896 <__sfputc_r+0x22>
 8003886:	290a      	cmp	r1, #10
 8003888:	d005      	beq.n	8003896 <__sfputc_r+0x22>
 800388a:	6813      	ldr	r3, [r2, #0]
 800388c:	1c58      	adds	r0, r3, #1
 800388e:	6010      	str	r0, [r2, #0]
 8003890:	7019      	strb	r1, [r3, #0]
 8003892:	0008      	movs	r0, r1
 8003894:	bd10      	pop	{r4, pc}
 8003896:	f000 fb2f 	bl	8003ef8 <__swbuf_r>
 800389a:	0001      	movs	r1, r0
 800389c:	e7f9      	b.n	8003892 <__sfputc_r+0x1e>

0800389e <__sfputs_r>:
 800389e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a0:	0006      	movs	r6, r0
 80038a2:	000f      	movs	r7, r1
 80038a4:	0014      	movs	r4, r2
 80038a6:	18d5      	adds	r5, r2, r3
 80038a8:	42ac      	cmp	r4, r5
 80038aa:	d101      	bne.n	80038b0 <__sfputs_r+0x12>
 80038ac:	2000      	movs	r0, #0
 80038ae:	e007      	b.n	80038c0 <__sfputs_r+0x22>
 80038b0:	7821      	ldrb	r1, [r4, #0]
 80038b2:	003a      	movs	r2, r7
 80038b4:	0030      	movs	r0, r6
 80038b6:	f7ff ffdd 	bl	8003874 <__sfputc_r>
 80038ba:	3401      	adds	r4, #1
 80038bc:	1c43      	adds	r3, r0, #1
 80038be:	d1f3      	bne.n	80038a8 <__sfputs_r+0xa>
 80038c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038c4 <_vfiprintf_r>:
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b0a1      	sub	sp, #132	; 0x84
 80038c8:	0006      	movs	r6, r0
 80038ca:	000c      	movs	r4, r1
 80038cc:	001f      	movs	r7, r3
 80038ce:	9203      	str	r2, [sp, #12]
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d004      	beq.n	80038de <_vfiprintf_r+0x1a>
 80038d4:	6983      	ldr	r3, [r0, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <_vfiprintf_r+0x1a>
 80038da:	f7ff fec9 	bl	8003670 <__sinit>
 80038de:	4b8e      	ldr	r3, [pc, #568]	; (8003b18 <_vfiprintf_r+0x254>)
 80038e0:	429c      	cmp	r4, r3
 80038e2:	d11c      	bne.n	800391e <_vfiprintf_r+0x5a>
 80038e4:	6874      	ldr	r4, [r6, #4]
 80038e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038e8:	07db      	lsls	r3, r3, #31
 80038ea:	d405      	bmi.n	80038f8 <_vfiprintf_r+0x34>
 80038ec:	89a3      	ldrh	r3, [r4, #12]
 80038ee:	059b      	lsls	r3, r3, #22
 80038f0:	d402      	bmi.n	80038f8 <_vfiprintf_r+0x34>
 80038f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038f4:	f7ff ff5d 	bl	80037b2 <__retarget_lock_acquire_recursive>
 80038f8:	89a3      	ldrh	r3, [r4, #12]
 80038fa:	071b      	lsls	r3, r3, #28
 80038fc:	d502      	bpl.n	8003904 <_vfiprintf_r+0x40>
 80038fe:	6923      	ldr	r3, [r4, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d11d      	bne.n	8003940 <_vfiprintf_r+0x7c>
 8003904:	0021      	movs	r1, r4
 8003906:	0030      	movs	r0, r6
 8003908:	f000 fb60 	bl	8003fcc <__swsetup_r>
 800390c:	2800      	cmp	r0, #0
 800390e:	d017      	beq.n	8003940 <_vfiprintf_r+0x7c>
 8003910:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003912:	07db      	lsls	r3, r3, #31
 8003914:	d50d      	bpl.n	8003932 <_vfiprintf_r+0x6e>
 8003916:	2001      	movs	r0, #1
 8003918:	4240      	negs	r0, r0
 800391a:	b021      	add	sp, #132	; 0x84
 800391c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800391e:	4b7f      	ldr	r3, [pc, #508]	; (8003b1c <_vfiprintf_r+0x258>)
 8003920:	429c      	cmp	r4, r3
 8003922:	d101      	bne.n	8003928 <_vfiprintf_r+0x64>
 8003924:	68b4      	ldr	r4, [r6, #8]
 8003926:	e7de      	b.n	80038e6 <_vfiprintf_r+0x22>
 8003928:	4b7d      	ldr	r3, [pc, #500]	; (8003b20 <_vfiprintf_r+0x25c>)
 800392a:	429c      	cmp	r4, r3
 800392c:	d1db      	bne.n	80038e6 <_vfiprintf_r+0x22>
 800392e:	68f4      	ldr	r4, [r6, #12]
 8003930:	e7d9      	b.n	80038e6 <_vfiprintf_r+0x22>
 8003932:	89a3      	ldrh	r3, [r4, #12]
 8003934:	059b      	lsls	r3, r3, #22
 8003936:	d4ee      	bmi.n	8003916 <_vfiprintf_r+0x52>
 8003938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800393a:	f7ff ff3b 	bl	80037b4 <__retarget_lock_release_recursive>
 800393e:	e7ea      	b.n	8003916 <_vfiprintf_r+0x52>
 8003940:	2300      	movs	r3, #0
 8003942:	ad08      	add	r5, sp, #32
 8003944:	616b      	str	r3, [r5, #20]
 8003946:	3320      	adds	r3, #32
 8003948:	766b      	strb	r3, [r5, #25]
 800394a:	3310      	adds	r3, #16
 800394c:	76ab      	strb	r3, [r5, #26]
 800394e:	9707      	str	r7, [sp, #28]
 8003950:	9f03      	ldr	r7, [sp, #12]
 8003952:	783b      	ldrb	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <_vfiprintf_r+0x98>
 8003958:	2b25      	cmp	r3, #37	; 0x25
 800395a:	d14e      	bne.n	80039fa <_vfiprintf_r+0x136>
 800395c:	9b03      	ldr	r3, [sp, #12]
 800395e:	1afb      	subs	r3, r7, r3
 8003960:	9305      	str	r3, [sp, #20]
 8003962:	9b03      	ldr	r3, [sp, #12]
 8003964:	429f      	cmp	r7, r3
 8003966:	d00d      	beq.n	8003984 <_vfiprintf_r+0xc0>
 8003968:	9b05      	ldr	r3, [sp, #20]
 800396a:	0021      	movs	r1, r4
 800396c:	0030      	movs	r0, r6
 800396e:	9a03      	ldr	r2, [sp, #12]
 8003970:	f7ff ff95 	bl	800389e <__sfputs_r>
 8003974:	1c43      	adds	r3, r0, #1
 8003976:	d100      	bne.n	800397a <_vfiprintf_r+0xb6>
 8003978:	e0b5      	b.n	8003ae6 <_vfiprintf_r+0x222>
 800397a:	696a      	ldr	r2, [r5, #20]
 800397c:	9b05      	ldr	r3, [sp, #20]
 800397e:	4694      	mov	ip, r2
 8003980:	4463      	add	r3, ip
 8003982:	616b      	str	r3, [r5, #20]
 8003984:	783b      	ldrb	r3, [r7, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d100      	bne.n	800398c <_vfiprintf_r+0xc8>
 800398a:	e0ac      	b.n	8003ae6 <_vfiprintf_r+0x222>
 800398c:	2201      	movs	r2, #1
 800398e:	1c7b      	adds	r3, r7, #1
 8003990:	9303      	str	r3, [sp, #12]
 8003992:	2300      	movs	r3, #0
 8003994:	4252      	negs	r2, r2
 8003996:	606a      	str	r2, [r5, #4]
 8003998:	a904      	add	r1, sp, #16
 800399a:	3254      	adds	r2, #84	; 0x54
 800399c:	1852      	adds	r2, r2, r1
 800399e:	602b      	str	r3, [r5, #0]
 80039a0:	60eb      	str	r3, [r5, #12]
 80039a2:	60ab      	str	r3, [r5, #8]
 80039a4:	7013      	strb	r3, [r2, #0]
 80039a6:	65ab      	str	r3, [r5, #88]	; 0x58
 80039a8:	9b03      	ldr	r3, [sp, #12]
 80039aa:	2205      	movs	r2, #5
 80039ac:	7819      	ldrb	r1, [r3, #0]
 80039ae:	485d      	ldr	r0, [pc, #372]	; (8003b24 <_vfiprintf_r+0x260>)
 80039b0:	f000 fce2 	bl	8004378 <memchr>
 80039b4:	9b03      	ldr	r3, [sp, #12]
 80039b6:	1c5f      	adds	r7, r3, #1
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d120      	bne.n	80039fe <_vfiprintf_r+0x13a>
 80039bc:	682a      	ldr	r2, [r5, #0]
 80039be:	06d3      	lsls	r3, r2, #27
 80039c0:	d504      	bpl.n	80039cc <_vfiprintf_r+0x108>
 80039c2:	2353      	movs	r3, #83	; 0x53
 80039c4:	a904      	add	r1, sp, #16
 80039c6:	185b      	adds	r3, r3, r1
 80039c8:	2120      	movs	r1, #32
 80039ca:	7019      	strb	r1, [r3, #0]
 80039cc:	0713      	lsls	r3, r2, #28
 80039ce:	d504      	bpl.n	80039da <_vfiprintf_r+0x116>
 80039d0:	2353      	movs	r3, #83	; 0x53
 80039d2:	a904      	add	r1, sp, #16
 80039d4:	185b      	adds	r3, r3, r1
 80039d6:	212b      	movs	r1, #43	; 0x2b
 80039d8:	7019      	strb	r1, [r3, #0]
 80039da:	9b03      	ldr	r3, [sp, #12]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b2a      	cmp	r3, #42	; 0x2a
 80039e0:	d016      	beq.n	8003a10 <_vfiprintf_r+0x14c>
 80039e2:	2100      	movs	r1, #0
 80039e4:	68eb      	ldr	r3, [r5, #12]
 80039e6:	9f03      	ldr	r7, [sp, #12]
 80039e8:	783a      	ldrb	r2, [r7, #0]
 80039ea:	1c78      	adds	r0, r7, #1
 80039ec:	3a30      	subs	r2, #48	; 0x30
 80039ee:	4684      	mov	ip, r0
 80039f0:	2a09      	cmp	r2, #9
 80039f2:	d94f      	bls.n	8003a94 <_vfiprintf_r+0x1d0>
 80039f4:	2900      	cmp	r1, #0
 80039f6:	d111      	bne.n	8003a1c <_vfiprintf_r+0x158>
 80039f8:	e017      	b.n	8003a2a <_vfiprintf_r+0x166>
 80039fa:	3701      	adds	r7, #1
 80039fc:	e7a9      	b.n	8003952 <_vfiprintf_r+0x8e>
 80039fe:	4b49      	ldr	r3, [pc, #292]	; (8003b24 <_vfiprintf_r+0x260>)
 8003a00:	682a      	ldr	r2, [r5, #0]
 8003a02:	1ac0      	subs	r0, r0, r3
 8003a04:	2301      	movs	r3, #1
 8003a06:	4083      	lsls	r3, r0
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	602b      	str	r3, [r5, #0]
 8003a0c:	9703      	str	r7, [sp, #12]
 8003a0e:	e7cb      	b.n	80039a8 <_vfiprintf_r+0xe4>
 8003a10:	9b07      	ldr	r3, [sp, #28]
 8003a12:	1d19      	adds	r1, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	9107      	str	r1, [sp, #28]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	db01      	blt.n	8003a20 <_vfiprintf_r+0x15c>
 8003a1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a1e:	e004      	b.n	8003a2a <_vfiprintf_r+0x166>
 8003a20:	425b      	negs	r3, r3
 8003a22:	60eb      	str	r3, [r5, #12]
 8003a24:	2302      	movs	r3, #2
 8003a26:	4313      	orrs	r3, r2
 8003a28:	602b      	str	r3, [r5, #0]
 8003a2a:	783b      	ldrb	r3, [r7, #0]
 8003a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a2e:	d10a      	bne.n	8003a46 <_vfiprintf_r+0x182>
 8003a30:	787b      	ldrb	r3, [r7, #1]
 8003a32:	2b2a      	cmp	r3, #42	; 0x2a
 8003a34:	d137      	bne.n	8003aa6 <_vfiprintf_r+0x1e2>
 8003a36:	9b07      	ldr	r3, [sp, #28]
 8003a38:	3702      	adds	r7, #2
 8003a3a:	1d1a      	adds	r2, r3, #4
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	9207      	str	r2, [sp, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db2d      	blt.n	8003aa0 <_vfiprintf_r+0x1dc>
 8003a44:	9309      	str	r3, [sp, #36]	; 0x24
 8003a46:	2203      	movs	r2, #3
 8003a48:	7839      	ldrb	r1, [r7, #0]
 8003a4a:	4837      	ldr	r0, [pc, #220]	; (8003b28 <_vfiprintf_r+0x264>)
 8003a4c:	f000 fc94 	bl	8004378 <memchr>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d007      	beq.n	8003a64 <_vfiprintf_r+0x1a0>
 8003a54:	4b34      	ldr	r3, [pc, #208]	; (8003b28 <_vfiprintf_r+0x264>)
 8003a56:	682a      	ldr	r2, [r5, #0]
 8003a58:	1ac0      	subs	r0, r0, r3
 8003a5a:	2340      	movs	r3, #64	; 0x40
 8003a5c:	4083      	lsls	r3, r0
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	3701      	adds	r7, #1
 8003a62:	602b      	str	r3, [r5, #0]
 8003a64:	7839      	ldrb	r1, [r7, #0]
 8003a66:	1c7b      	adds	r3, r7, #1
 8003a68:	2206      	movs	r2, #6
 8003a6a:	4830      	ldr	r0, [pc, #192]	; (8003b2c <_vfiprintf_r+0x268>)
 8003a6c:	9303      	str	r3, [sp, #12]
 8003a6e:	7629      	strb	r1, [r5, #24]
 8003a70:	f000 fc82 	bl	8004378 <memchr>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	d045      	beq.n	8003b04 <_vfiprintf_r+0x240>
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <_vfiprintf_r+0x26c>)
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d127      	bne.n	8003ace <_vfiprintf_r+0x20a>
 8003a7e:	2207      	movs	r2, #7
 8003a80:	9b07      	ldr	r3, [sp, #28]
 8003a82:	3307      	adds	r3, #7
 8003a84:	4393      	bics	r3, r2
 8003a86:	3308      	adds	r3, #8
 8003a88:	9307      	str	r3, [sp, #28]
 8003a8a:	696b      	ldr	r3, [r5, #20]
 8003a8c:	9a04      	ldr	r2, [sp, #16]
 8003a8e:	189b      	adds	r3, r3, r2
 8003a90:	616b      	str	r3, [r5, #20]
 8003a92:	e75d      	b.n	8003950 <_vfiprintf_r+0x8c>
 8003a94:	210a      	movs	r1, #10
 8003a96:	434b      	muls	r3, r1
 8003a98:	4667      	mov	r7, ip
 8003a9a:	189b      	adds	r3, r3, r2
 8003a9c:	3909      	subs	r1, #9
 8003a9e:	e7a3      	b.n	80039e8 <_vfiprintf_r+0x124>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	425b      	negs	r3, r3
 8003aa4:	e7ce      	b.n	8003a44 <_vfiprintf_r+0x180>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	001a      	movs	r2, r3
 8003aaa:	3701      	adds	r7, #1
 8003aac:	606b      	str	r3, [r5, #4]
 8003aae:	7839      	ldrb	r1, [r7, #0]
 8003ab0:	1c78      	adds	r0, r7, #1
 8003ab2:	3930      	subs	r1, #48	; 0x30
 8003ab4:	4684      	mov	ip, r0
 8003ab6:	2909      	cmp	r1, #9
 8003ab8:	d903      	bls.n	8003ac2 <_vfiprintf_r+0x1fe>
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0c3      	beq.n	8003a46 <_vfiprintf_r+0x182>
 8003abe:	9209      	str	r2, [sp, #36]	; 0x24
 8003ac0:	e7c1      	b.n	8003a46 <_vfiprintf_r+0x182>
 8003ac2:	230a      	movs	r3, #10
 8003ac4:	435a      	muls	r2, r3
 8003ac6:	4667      	mov	r7, ip
 8003ac8:	1852      	adds	r2, r2, r1
 8003aca:	3b09      	subs	r3, #9
 8003acc:	e7ef      	b.n	8003aae <_vfiprintf_r+0x1ea>
 8003ace:	ab07      	add	r3, sp, #28
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	0022      	movs	r2, r4
 8003ad4:	0029      	movs	r1, r5
 8003ad6:	0030      	movs	r0, r6
 8003ad8:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <_vfiprintf_r+0x270>)
 8003ada:	e000      	b.n	8003ade <_vfiprintf_r+0x21a>
 8003adc:	bf00      	nop
 8003ade:	9004      	str	r0, [sp, #16]
 8003ae0:	9b04      	ldr	r3, [sp, #16]
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	d1d1      	bne.n	8003a8a <_vfiprintf_r+0x1c6>
 8003ae6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ae8:	07db      	lsls	r3, r3, #31
 8003aea:	d405      	bmi.n	8003af8 <_vfiprintf_r+0x234>
 8003aec:	89a3      	ldrh	r3, [r4, #12]
 8003aee:	059b      	lsls	r3, r3, #22
 8003af0:	d402      	bmi.n	8003af8 <_vfiprintf_r+0x234>
 8003af2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003af4:	f7ff fe5e 	bl	80037b4 <__retarget_lock_release_recursive>
 8003af8:	89a3      	ldrh	r3, [r4, #12]
 8003afa:	065b      	lsls	r3, r3, #25
 8003afc:	d500      	bpl.n	8003b00 <_vfiprintf_r+0x23c>
 8003afe:	e70a      	b.n	8003916 <_vfiprintf_r+0x52>
 8003b00:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b02:	e70a      	b.n	800391a <_vfiprintf_r+0x56>
 8003b04:	ab07      	add	r3, sp, #28
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	0022      	movs	r2, r4
 8003b0a:	0029      	movs	r1, r5
 8003b0c:	0030      	movs	r0, r6
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <_vfiprintf_r+0x270>)
 8003b10:	f000 f882 	bl	8003c18 <_printf_i>
 8003b14:	e7e3      	b.n	8003ade <_vfiprintf_r+0x21a>
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	08004580 	.word	0x08004580
 8003b1c:	080045a0 	.word	0x080045a0
 8003b20:	08004560 	.word	0x08004560
 8003b24:	080045c0 	.word	0x080045c0
 8003b28:	080045c6 	.word	0x080045c6
 8003b2c:	080045ca 	.word	0x080045ca
 8003b30:	00000000 	.word	0x00000000
 8003b34:	0800389f 	.word	0x0800389f

08003b38 <_printf_common>:
 8003b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b3a:	0015      	movs	r5, r2
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	688a      	ldr	r2, [r1, #8]
 8003b40:	690b      	ldr	r3, [r1, #16]
 8003b42:	000c      	movs	r4, r1
 8003b44:	9000      	str	r0, [sp, #0]
 8003b46:	4293      	cmp	r3, r2
 8003b48:	da00      	bge.n	8003b4c <_printf_common+0x14>
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	0022      	movs	r2, r4
 8003b4e:	602b      	str	r3, [r5, #0]
 8003b50:	3243      	adds	r2, #67	; 0x43
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	2a00      	cmp	r2, #0
 8003b56:	d001      	beq.n	8003b5c <_printf_common+0x24>
 8003b58:	3301      	adds	r3, #1
 8003b5a:	602b      	str	r3, [r5, #0]
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	069b      	lsls	r3, r3, #26
 8003b60:	d502      	bpl.n	8003b68 <_printf_common+0x30>
 8003b62:	682b      	ldr	r3, [r5, #0]
 8003b64:	3302      	adds	r3, #2
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	6822      	ldr	r2, [r4, #0]
 8003b6a:	2306      	movs	r3, #6
 8003b6c:	0017      	movs	r7, r2
 8003b6e:	401f      	ands	r7, r3
 8003b70:	421a      	tst	r2, r3
 8003b72:	d027      	beq.n	8003bc4 <_printf_common+0x8c>
 8003b74:	0023      	movs	r3, r4
 8003b76:	3343      	adds	r3, #67	; 0x43
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	1e5a      	subs	r2, r3, #1
 8003b7c:	4193      	sbcs	r3, r2
 8003b7e:	6822      	ldr	r2, [r4, #0]
 8003b80:	0692      	lsls	r2, r2, #26
 8003b82:	d430      	bmi.n	8003be6 <_printf_common+0xae>
 8003b84:	0022      	movs	r2, r4
 8003b86:	9901      	ldr	r1, [sp, #4]
 8003b88:	9800      	ldr	r0, [sp, #0]
 8003b8a:	9e08      	ldr	r6, [sp, #32]
 8003b8c:	3243      	adds	r2, #67	; 0x43
 8003b8e:	47b0      	blx	r6
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d025      	beq.n	8003be0 <_printf_common+0xa8>
 8003b94:	2306      	movs	r3, #6
 8003b96:	6820      	ldr	r0, [r4, #0]
 8003b98:	682a      	ldr	r2, [r5, #0]
 8003b9a:	68e1      	ldr	r1, [r4, #12]
 8003b9c:	2500      	movs	r5, #0
 8003b9e:	4003      	ands	r3, r0
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d103      	bne.n	8003bac <_printf_common+0x74>
 8003ba4:	1a8d      	subs	r5, r1, r2
 8003ba6:	43eb      	mvns	r3, r5
 8003ba8:	17db      	asrs	r3, r3, #31
 8003baa:	401d      	ands	r5, r3
 8003bac:	68a3      	ldr	r3, [r4, #8]
 8003bae:	6922      	ldr	r2, [r4, #16]
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	dd01      	ble.n	8003bb8 <_printf_common+0x80>
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	18ed      	adds	r5, r5, r3
 8003bb8:	2700      	movs	r7, #0
 8003bba:	42bd      	cmp	r5, r7
 8003bbc:	d120      	bne.n	8003c00 <_printf_common+0xc8>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e010      	b.n	8003be4 <_printf_common+0xac>
 8003bc2:	3701      	adds	r7, #1
 8003bc4:	68e3      	ldr	r3, [r4, #12]
 8003bc6:	682a      	ldr	r2, [r5, #0]
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	42bb      	cmp	r3, r7
 8003bcc:	ddd2      	ble.n	8003b74 <_printf_common+0x3c>
 8003bce:	0022      	movs	r2, r4
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	9901      	ldr	r1, [sp, #4]
 8003bd4:	9800      	ldr	r0, [sp, #0]
 8003bd6:	9e08      	ldr	r6, [sp, #32]
 8003bd8:	3219      	adds	r2, #25
 8003bda:	47b0      	blx	r6
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d1f0      	bne.n	8003bc2 <_printf_common+0x8a>
 8003be0:	2001      	movs	r0, #1
 8003be2:	4240      	negs	r0, r0
 8003be4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003be6:	2030      	movs	r0, #48	; 0x30
 8003be8:	18e1      	adds	r1, r4, r3
 8003bea:	3143      	adds	r1, #67	; 0x43
 8003bec:	7008      	strb	r0, [r1, #0]
 8003bee:	0021      	movs	r1, r4
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	3145      	adds	r1, #69	; 0x45
 8003bf4:	7809      	ldrb	r1, [r1, #0]
 8003bf6:	18a2      	adds	r2, r4, r2
 8003bf8:	3243      	adds	r2, #67	; 0x43
 8003bfa:	3302      	adds	r3, #2
 8003bfc:	7011      	strb	r1, [r2, #0]
 8003bfe:	e7c1      	b.n	8003b84 <_printf_common+0x4c>
 8003c00:	0022      	movs	r2, r4
 8003c02:	2301      	movs	r3, #1
 8003c04:	9901      	ldr	r1, [sp, #4]
 8003c06:	9800      	ldr	r0, [sp, #0]
 8003c08:	9e08      	ldr	r6, [sp, #32]
 8003c0a:	321a      	adds	r2, #26
 8003c0c:	47b0      	blx	r6
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d0e6      	beq.n	8003be0 <_printf_common+0xa8>
 8003c12:	3701      	adds	r7, #1
 8003c14:	e7d1      	b.n	8003bba <_printf_common+0x82>
	...

08003c18 <_printf_i>:
 8003c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c1a:	b08b      	sub	sp, #44	; 0x2c
 8003c1c:	9206      	str	r2, [sp, #24]
 8003c1e:	000a      	movs	r2, r1
 8003c20:	3243      	adds	r2, #67	; 0x43
 8003c22:	9307      	str	r3, [sp, #28]
 8003c24:	9005      	str	r0, [sp, #20]
 8003c26:	9204      	str	r2, [sp, #16]
 8003c28:	7e0a      	ldrb	r2, [r1, #24]
 8003c2a:	000c      	movs	r4, r1
 8003c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c2e:	2a78      	cmp	r2, #120	; 0x78
 8003c30:	d806      	bhi.n	8003c40 <_printf_i+0x28>
 8003c32:	2a62      	cmp	r2, #98	; 0x62
 8003c34:	d808      	bhi.n	8003c48 <_printf_i+0x30>
 8003c36:	2a00      	cmp	r2, #0
 8003c38:	d100      	bne.n	8003c3c <_printf_i+0x24>
 8003c3a:	e0c0      	b.n	8003dbe <_printf_i+0x1a6>
 8003c3c:	2a58      	cmp	r2, #88	; 0x58
 8003c3e:	d052      	beq.n	8003ce6 <_printf_i+0xce>
 8003c40:	0026      	movs	r6, r4
 8003c42:	3642      	adds	r6, #66	; 0x42
 8003c44:	7032      	strb	r2, [r6, #0]
 8003c46:	e022      	b.n	8003c8e <_printf_i+0x76>
 8003c48:	0010      	movs	r0, r2
 8003c4a:	3863      	subs	r0, #99	; 0x63
 8003c4c:	2815      	cmp	r0, #21
 8003c4e:	d8f7      	bhi.n	8003c40 <_printf_i+0x28>
 8003c50:	f7fc fa58 	bl	8000104 <__gnu_thumb1_case_shi>
 8003c54:	001f0016 	.word	0x001f0016
 8003c58:	fff6fff6 	.word	0xfff6fff6
 8003c5c:	fff6fff6 	.word	0xfff6fff6
 8003c60:	fff6001f 	.word	0xfff6001f
 8003c64:	fff6fff6 	.word	0xfff6fff6
 8003c68:	00a8fff6 	.word	0x00a8fff6
 8003c6c:	009a0036 	.word	0x009a0036
 8003c70:	fff6fff6 	.word	0xfff6fff6
 8003c74:	fff600b9 	.word	0xfff600b9
 8003c78:	fff60036 	.word	0xfff60036
 8003c7c:	009efff6 	.word	0x009efff6
 8003c80:	0026      	movs	r6, r4
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	3642      	adds	r6, #66	; 0x42
 8003c86:	1d11      	adds	r1, r2, #4
 8003c88:	6019      	str	r1, [r3, #0]
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	7033      	strb	r3, [r6, #0]
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0a7      	b.n	8003de2 <_printf_i+0x1ca>
 8003c92:	6808      	ldr	r0, [r1, #0]
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	1d0a      	adds	r2, r1, #4
 8003c98:	0605      	lsls	r5, r0, #24
 8003c9a:	d50b      	bpl.n	8003cb4 <_printf_i+0x9c>
 8003c9c:	680d      	ldr	r5, [r1, #0]
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	2d00      	cmp	r5, #0
 8003ca2:	da03      	bge.n	8003cac <_printf_i+0x94>
 8003ca4:	232d      	movs	r3, #45	; 0x2d
 8003ca6:	9a04      	ldr	r2, [sp, #16]
 8003ca8:	426d      	negs	r5, r5
 8003caa:	7013      	strb	r3, [r2, #0]
 8003cac:	4b61      	ldr	r3, [pc, #388]	; (8003e34 <_printf_i+0x21c>)
 8003cae:	270a      	movs	r7, #10
 8003cb0:	9303      	str	r3, [sp, #12]
 8003cb2:	e032      	b.n	8003d1a <_printf_i+0x102>
 8003cb4:	680d      	ldr	r5, [r1, #0]
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	0641      	lsls	r1, r0, #25
 8003cba:	d5f1      	bpl.n	8003ca0 <_printf_i+0x88>
 8003cbc:	b22d      	sxth	r5, r5
 8003cbe:	e7ef      	b.n	8003ca0 <_printf_i+0x88>
 8003cc0:	680d      	ldr	r5, [r1, #0]
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	1d08      	adds	r0, r1, #4
 8003cc6:	6018      	str	r0, [r3, #0]
 8003cc8:	062e      	lsls	r6, r5, #24
 8003cca:	d501      	bpl.n	8003cd0 <_printf_i+0xb8>
 8003ccc:	680d      	ldr	r5, [r1, #0]
 8003cce:	e003      	b.n	8003cd8 <_printf_i+0xc0>
 8003cd0:	066d      	lsls	r5, r5, #25
 8003cd2:	d5fb      	bpl.n	8003ccc <_printf_i+0xb4>
 8003cd4:	680d      	ldr	r5, [r1, #0]
 8003cd6:	b2ad      	uxth	r5, r5
 8003cd8:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <_printf_i+0x21c>)
 8003cda:	270a      	movs	r7, #10
 8003cdc:	9303      	str	r3, [sp, #12]
 8003cde:	2a6f      	cmp	r2, #111	; 0x6f
 8003ce0:	d117      	bne.n	8003d12 <_printf_i+0xfa>
 8003ce2:	2708      	movs	r7, #8
 8003ce4:	e015      	b.n	8003d12 <_printf_i+0xfa>
 8003ce6:	3145      	adds	r1, #69	; 0x45
 8003ce8:	700a      	strb	r2, [r1, #0]
 8003cea:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <_printf_i+0x21c>)
 8003cec:	9203      	str	r2, [sp, #12]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	6821      	ldr	r1, [r4, #0]
 8003cf2:	ca20      	ldmia	r2!, {r5}
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	0608      	lsls	r0, r1, #24
 8003cf8:	d550      	bpl.n	8003d9c <_printf_i+0x184>
 8003cfa:	07cb      	lsls	r3, r1, #31
 8003cfc:	d502      	bpl.n	8003d04 <_printf_i+0xec>
 8003cfe:	2320      	movs	r3, #32
 8003d00:	4319      	orrs	r1, r3
 8003d02:	6021      	str	r1, [r4, #0]
 8003d04:	2710      	movs	r7, #16
 8003d06:	2d00      	cmp	r5, #0
 8003d08:	d103      	bne.n	8003d12 <_printf_i+0xfa>
 8003d0a:	2320      	movs	r3, #32
 8003d0c:	6822      	ldr	r2, [r4, #0]
 8003d0e:	439a      	bics	r2, r3
 8003d10:	6022      	str	r2, [r4, #0]
 8003d12:	0023      	movs	r3, r4
 8003d14:	2200      	movs	r2, #0
 8003d16:	3343      	adds	r3, #67	; 0x43
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	6863      	ldr	r3, [r4, #4]
 8003d1c:	60a3      	str	r3, [r4, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	db03      	blt.n	8003d2a <_printf_i+0x112>
 8003d22:	2204      	movs	r2, #4
 8003d24:	6821      	ldr	r1, [r4, #0]
 8003d26:	4391      	bics	r1, r2
 8003d28:	6021      	str	r1, [r4, #0]
 8003d2a:	2d00      	cmp	r5, #0
 8003d2c:	d102      	bne.n	8003d34 <_printf_i+0x11c>
 8003d2e:	9e04      	ldr	r6, [sp, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00c      	beq.n	8003d4e <_printf_i+0x136>
 8003d34:	9e04      	ldr	r6, [sp, #16]
 8003d36:	0028      	movs	r0, r5
 8003d38:	0039      	movs	r1, r7
 8003d3a:	f7fc fa73 	bl	8000224 <__aeabi_uidivmod>
 8003d3e:	9b03      	ldr	r3, [sp, #12]
 8003d40:	3e01      	subs	r6, #1
 8003d42:	5c5b      	ldrb	r3, [r3, r1]
 8003d44:	7033      	strb	r3, [r6, #0]
 8003d46:	002b      	movs	r3, r5
 8003d48:	0005      	movs	r5, r0
 8003d4a:	429f      	cmp	r7, r3
 8003d4c:	d9f3      	bls.n	8003d36 <_printf_i+0x11e>
 8003d4e:	2f08      	cmp	r7, #8
 8003d50:	d109      	bne.n	8003d66 <_printf_i+0x14e>
 8003d52:	6823      	ldr	r3, [r4, #0]
 8003d54:	07db      	lsls	r3, r3, #31
 8003d56:	d506      	bpl.n	8003d66 <_printf_i+0x14e>
 8003d58:	6863      	ldr	r3, [r4, #4]
 8003d5a:	6922      	ldr	r2, [r4, #16]
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	dc02      	bgt.n	8003d66 <_printf_i+0x14e>
 8003d60:	2330      	movs	r3, #48	; 0x30
 8003d62:	3e01      	subs	r6, #1
 8003d64:	7033      	strb	r3, [r6, #0]
 8003d66:	9b04      	ldr	r3, [sp, #16]
 8003d68:	1b9b      	subs	r3, r3, r6
 8003d6a:	6123      	str	r3, [r4, #16]
 8003d6c:	9b07      	ldr	r3, [sp, #28]
 8003d6e:	0021      	movs	r1, r4
 8003d70:	9300      	str	r3, [sp, #0]
 8003d72:	9805      	ldr	r0, [sp, #20]
 8003d74:	9b06      	ldr	r3, [sp, #24]
 8003d76:	aa09      	add	r2, sp, #36	; 0x24
 8003d78:	f7ff fede 	bl	8003b38 <_printf_common>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d135      	bne.n	8003dec <_printf_i+0x1d4>
 8003d80:	2001      	movs	r0, #1
 8003d82:	4240      	negs	r0, r0
 8003d84:	b00b      	add	sp, #44	; 0x2c
 8003d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d88:	2220      	movs	r2, #32
 8003d8a:	6809      	ldr	r1, [r1, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	6022      	str	r2, [r4, #0]
 8003d90:	0022      	movs	r2, r4
 8003d92:	2178      	movs	r1, #120	; 0x78
 8003d94:	3245      	adds	r2, #69	; 0x45
 8003d96:	7011      	strb	r1, [r2, #0]
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <_printf_i+0x220>)
 8003d9a:	e7a7      	b.n	8003cec <_printf_i+0xd4>
 8003d9c:	0648      	lsls	r0, r1, #25
 8003d9e:	d5ac      	bpl.n	8003cfa <_printf_i+0xe2>
 8003da0:	b2ad      	uxth	r5, r5
 8003da2:	e7aa      	b.n	8003cfa <_printf_i+0xe2>
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	680d      	ldr	r5, [r1, #0]
 8003da8:	1d10      	adds	r0, r2, #4
 8003daa:	6949      	ldr	r1, [r1, #20]
 8003dac:	6018      	str	r0, [r3, #0]
 8003dae:	6813      	ldr	r3, [r2, #0]
 8003db0:	062e      	lsls	r6, r5, #24
 8003db2:	d501      	bpl.n	8003db8 <_printf_i+0x1a0>
 8003db4:	6019      	str	r1, [r3, #0]
 8003db6:	e002      	b.n	8003dbe <_printf_i+0x1a6>
 8003db8:	066d      	lsls	r5, r5, #25
 8003dba:	d5fb      	bpl.n	8003db4 <_printf_i+0x19c>
 8003dbc:	8019      	strh	r1, [r3, #0]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9e04      	ldr	r6, [sp, #16]
 8003dc2:	6123      	str	r3, [r4, #16]
 8003dc4:	e7d2      	b.n	8003d6c <_printf_i+0x154>
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	1d11      	adds	r1, r2, #4
 8003dca:	6019      	str	r1, [r3, #0]
 8003dcc:	6816      	ldr	r6, [r2, #0]
 8003dce:	2100      	movs	r1, #0
 8003dd0:	0030      	movs	r0, r6
 8003dd2:	6862      	ldr	r2, [r4, #4]
 8003dd4:	f000 fad0 	bl	8004378 <memchr>
 8003dd8:	2800      	cmp	r0, #0
 8003dda:	d001      	beq.n	8003de0 <_printf_i+0x1c8>
 8003ddc:	1b80      	subs	r0, r0, r6
 8003dde:	6060      	str	r0, [r4, #4]
 8003de0:	6863      	ldr	r3, [r4, #4]
 8003de2:	6123      	str	r3, [r4, #16]
 8003de4:	2300      	movs	r3, #0
 8003de6:	9a04      	ldr	r2, [sp, #16]
 8003de8:	7013      	strb	r3, [r2, #0]
 8003dea:	e7bf      	b.n	8003d6c <_printf_i+0x154>
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	0032      	movs	r2, r6
 8003df0:	9906      	ldr	r1, [sp, #24]
 8003df2:	9805      	ldr	r0, [sp, #20]
 8003df4:	9d07      	ldr	r5, [sp, #28]
 8003df6:	47a8      	blx	r5
 8003df8:	1c43      	adds	r3, r0, #1
 8003dfa:	d0c1      	beq.n	8003d80 <_printf_i+0x168>
 8003dfc:	6823      	ldr	r3, [r4, #0]
 8003dfe:	079b      	lsls	r3, r3, #30
 8003e00:	d415      	bmi.n	8003e2e <_printf_i+0x216>
 8003e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e04:	68e0      	ldr	r0, [r4, #12]
 8003e06:	4298      	cmp	r0, r3
 8003e08:	dabc      	bge.n	8003d84 <_printf_i+0x16c>
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	e7ba      	b.n	8003d84 <_printf_i+0x16c>
 8003e0e:	0022      	movs	r2, r4
 8003e10:	2301      	movs	r3, #1
 8003e12:	9906      	ldr	r1, [sp, #24]
 8003e14:	9805      	ldr	r0, [sp, #20]
 8003e16:	9e07      	ldr	r6, [sp, #28]
 8003e18:	3219      	adds	r2, #25
 8003e1a:	47b0      	blx	r6
 8003e1c:	1c43      	adds	r3, r0, #1
 8003e1e:	d0af      	beq.n	8003d80 <_printf_i+0x168>
 8003e20:	3501      	adds	r5, #1
 8003e22:	68e3      	ldr	r3, [r4, #12]
 8003e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	42ab      	cmp	r3, r5
 8003e2a:	dcf0      	bgt.n	8003e0e <_printf_i+0x1f6>
 8003e2c:	e7e9      	b.n	8003e02 <_printf_i+0x1ea>
 8003e2e:	2500      	movs	r5, #0
 8003e30:	e7f7      	b.n	8003e22 <_printf_i+0x20a>
 8003e32:	46c0      	nop			; (mov r8, r8)
 8003e34:	080045d1 	.word	0x080045d1
 8003e38:	080045e2 	.word	0x080045e2

08003e3c <_sbrk_r>:
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	b570      	push	{r4, r5, r6, lr}
 8003e40:	4d06      	ldr	r5, [pc, #24]	; (8003e5c <_sbrk_r+0x20>)
 8003e42:	0004      	movs	r4, r0
 8003e44:	0008      	movs	r0, r1
 8003e46:	602b      	str	r3, [r5, #0]
 8003e48:	f7fc fecc 	bl	8000be4 <_sbrk>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d103      	bne.n	8003e58 <_sbrk_r+0x1c>
 8003e50:	682b      	ldr	r3, [r5, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d000      	beq.n	8003e58 <_sbrk_r+0x1c>
 8003e56:	6023      	str	r3, [r4, #0]
 8003e58:	bd70      	pop	{r4, r5, r6, pc}
 8003e5a:	46c0      	nop			; (mov r8, r8)
 8003e5c:	20000254 	.word	0x20000254

08003e60 <__sread>:
 8003e60:	b570      	push	{r4, r5, r6, lr}
 8003e62:	000c      	movs	r4, r1
 8003e64:	250e      	movs	r5, #14
 8003e66:	5f49      	ldrsh	r1, [r1, r5]
 8003e68:	f000 faec 	bl	8004444 <_read_r>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	db03      	blt.n	8003e78 <__sread+0x18>
 8003e70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e72:	181b      	adds	r3, r3, r0
 8003e74:	6563      	str	r3, [r4, #84]	; 0x54
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	4a02      	ldr	r2, [pc, #8]	; (8003e84 <__sread+0x24>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	81a3      	strh	r3, [r4, #12]
 8003e80:	e7f9      	b.n	8003e76 <__sread+0x16>
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	ffffefff 	.word	0xffffefff

08003e88 <__swrite>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	001f      	movs	r7, r3
 8003e8c:	898b      	ldrh	r3, [r1, #12]
 8003e8e:	0005      	movs	r5, r0
 8003e90:	000c      	movs	r4, r1
 8003e92:	0016      	movs	r6, r2
 8003e94:	05db      	lsls	r3, r3, #23
 8003e96:	d505      	bpl.n	8003ea4 <__swrite+0x1c>
 8003e98:	230e      	movs	r3, #14
 8003e9a:	5ec9      	ldrsh	r1, [r1, r3]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	f000 f9ea 	bl	8004278 <_lseek_r>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	4a05      	ldr	r2, [pc, #20]	; (8003ebc <__swrite+0x34>)
 8003ea8:	0028      	movs	r0, r5
 8003eaa:	4013      	ands	r3, r2
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	0032      	movs	r2, r6
 8003eb0:	230e      	movs	r3, #14
 8003eb2:	5ee1      	ldrsh	r1, [r4, r3]
 8003eb4:	003b      	movs	r3, r7
 8003eb6:	f000 f875 	bl	8003fa4 <_write_r>
 8003eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ebc:	ffffefff 	.word	0xffffefff

08003ec0 <__sseek>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	000c      	movs	r4, r1
 8003ec4:	250e      	movs	r5, #14
 8003ec6:	5f49      	ldrsh	r1, [r1, r5]
 8003ec8:	f000 f9d6 	bl	8004278 <_lseek_r>
 8003ecc:	89a3      	ldrh	r3, [r4, #12]
 8003ece:	1c42      	adds	r2, r0, #1
 8003ed0:	d103      	bne.n	8003eda <__sseek+0x1a>
 8003ed2:	4a05      	ldr	r2, [pc, #20]	; (8003ee8 <__sseek+0x28>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	81a3      	strh	r3, [r4, #12]
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
 8003eda:	2280      	movs	r2, #128	; 0x80
 8003edc:	0152      	lsls	r2, r2, #5
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	81a3      	strh	r3, [r4, #12]
 8003ee2:	6560      	str	r0, [r4, #84]	; 0x54
 8003ee4:	e7f8      	b.n	8003ed8 <__sseek+0x18>
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	ffffefff 	.word	0xffffefff

08003eec <__sclose>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	230e      	movs	r3, #14
 8003ef0:	5ec9      	ldrsh	r1, [r1, r3]
 8003ef2:	f000 f8e3 	bl	80040bc <_close_r>
 8003ef6:	bd10      	pop	{r4, pc}

08003ef8 <__swbuf_r>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	0005      	movs	r5, r0
 8003efc:	000e      	movs	r6, r1
 8003efe:	0014      	movs	r4, r2
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d004      	beq.n	8003f0e <__swbuf_r+0x16>
 8003f04:	6983      	ldr	r3, [r0, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <__swbuf_r+0x16>
 8003f0a:	f7ff fbb1 	bl	8003670 <__sinit>
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <__swbuf_r+0xa0>)
 8003f10:	429c      	cmp	r4, r3
 8003f12:	d12e      	bne.n	8003f72 <__swbuf_r+0x7a>
 8003f14:	686c      	ldr	r4, [r5, #4]
 8003f16:	69a3      	ldr	r3, [r4, #24]
 8003f18:	60a3      	str	r3, [r4, #8]
 8003f1a:	89a3      	ldrh	r3, [r4, #12]
 8003f1c:	071b      	lsls	r3, r3, #28
 8003f1e:	d532      	bpl.n	8003f86 <__swbuf_r+0x8e>
 8003f20:	6923      	ldr	r3, [r4, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d02f      	beq.n	8003f86 <__swbuf_r+0x8e>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	6922      	ldr	r2, [r4, #16]
 8003f2a:	b2f7      	uxtb	r7, r6
 8003f2c:	1a98      	subs	r0, r3, r2
 8003f2e:	6963      	ldr	r3, [r4, #20]
 8003f30:	b2f6      	uxtb	r6, r6
 8003f32:	4283      	cmp	r3, r0
 8003f34:	dc05      	bgt.n	8003f42 <__swbuf_r+0x4a>
 8003f36:	0021      	movs	r1, r4
 8003f38:	0028      	movs	r0, r5
 8003f3a:	f000 f95d 	bl	80041f8 <_fflush_r>
 8003f3e:	2800      	cmp	r0, #0
 8003f40:	d127      	bne.n	8003f92 <__swbuf_r+0x9a>
 8003f42:	68a3      	ldr	r3, [r4, #8]
 8003f44:	3001      	adds	r0, #1
 8003f46:	3b01      	subs	r3, #1
 8003f48:	60a3      	str	r3, [r4, #8]
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	6022      	str	r2, [r4, #0]
 8003f50:	701f      	strb	r7, [r3, #0]
 8003f52:	6963      	ldr	r3, [r4, #20]
 8003f54:	4283      	cmp	r3, r0
 8003f56:	d004      	beq.n	8003f62 <__swbuf_r+0x6a>
 8003f58:	89a3      	ldrh	r3, [r4, #12]
 8003f5a:	07db      	lsls	r3, r3, #31
 8003f5c:	d507      	bpl.n	8003f6e <__swbuf_r+0x76>
 8003f5e:	2e0a      	cmp	r6, #10
 8003f60:	d105      	bne.n	8003f6e <__swbuf_r+0x76>
 8003f62:	0021      	movs	r1, r4
 8003f64:	0028      	movs	r0, r5
 8003f66:	f000 f947 	bl	80041f8 <_fflush_r>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d111      	bne.n	8003f92 <__swbuf_r+0x9a>
 8003f6e:	0030      	movs	r0, r6
 8003f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <__swbuf_r+0xa4>)
 8003f74:	429c      	cmp	r4, r3
 8003f76:	d101      	bne.n	8003f7c <__swbuf_r+0x84>
 8003f78:	68ac      	ldr	r4, [r5, #8]
 8003f7a:	e7cc      	b.n	8003f16 <__swbuf_r+0x1e>
 8003f7c:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <__swbuf_r+0xa8>)
 8003f7e:	429c      	cmp	r4, r3
 8003f80:	d1c9      	bne.n	8003f16 <__swbuf_r+0x1e>
 8003f82:	68ec      	ldr	r4, [r5, #12]
 8003f84:	e7c7      	b.n	8003f16 <__swbuf_r+0x1e>
 8003f86:	0021      	movs	r1, r4
 8003f88:	0028      	movs	r0, r5
 8003f8a:	f000 f81f 	bl	8003fcc <__swsetup_r>
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	d0c9      	beq.n	8003f26 <__swbuf_r+0x2e>
 8003f92:	2601      	movs	r6, #1
 8003f94:	4276      	negs	r6, r6
 8003f96:	e7ea      	b.n	8003f6e <__swbuf_r+0x76>
 8003f98:	08004580 	.word	0x08004580
 8003f9c:	080045a0 	.word	0x080045a0
 8003fa0:	08004560 	.word	0x08004560

08003fa4 <_write_r>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	0004      	movs	r4, r0
 8003fa8:	0008      	movs	r0, r1
 8003faa:	0011      	movs	r1, r2
 8003fac:	001a      	movs	r2, r3
 8003fae:	2300      	movs	r3, #0
 8003fb0:	4d05      	ldr	r5, [pc, #20]	; (8003fc8 <_write_r+0x24>)
 8003fb2:	602b      	str	r3, [r5, #0]
 8003fb4:	f7fc fdcd 	bl	8000b52 <_write>
 8003fb8:	1c43      	adds	r3, r0, #1
 8003fba:	d103      	bne.n	8003fc4 <_write_r+0x20>
 8003fbc:	682b      	ldr	r3, [r5, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d000      	beq.n	8003fc4 <_write_r+0x20>
 8003fc2:	6023      	str	r3, [r4, #0]
 8003fc4:	bd70      	pop	{r4, r5, r6, pc}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	20000254 	.word	0x20000254

08003fcc <__swsetup_r>:
 8003fcc:	4b37      	ldr	r3, [pc, #220]	; (80040ac <__swsetup_r+0xe0>)
 8003fce:	b570      	push	{r4, r5, r6, lr}
 8003fd0:	681d      	ldr	r5, [r3, #0]
 8003fd2:	0006      	movs	r6, r0
 8003fd4:	000c      	movs	r4, r1
 8003fd6:	2d00      	cmp	r5, #0
 8003fd8:	d005      	beq.n	8003fe6 <__swsetup_r+0x1a>
 8003fda:	69ab      	ldr	r3, [r5, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <__swsetup_r+0x1a>
 8003fe0:	0028      	movs	r0, r5
 8003fe2:	f7ff fb45 	bl	8003670 <__sinit>
 8003fe6:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <__swsetup_r+0xe4>)
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d10f      	bne.n	800400c <__swsetup_r+0x40>
 8003fec:	686c      	ldr	r4, [r5, #4]
 8003fee:	230c      	movs	r3, #12
 8003ff0:	5ee2      	ldrsh	r2, [r4, r3]
 8003ff2:	b293      	uxth	r3, r2
 8003ff4:	0711      	lsls	r1, r2, #28
 8003ff6:	d42d      	bmi.n	8004054 <__swsetup_r+0x88>
 8003ff8:	06d9      	lsls	r1, r3, #27
 8003ffa:	d411      	bmi.n	8004020 <__swsetup_r+0x54>
 8003ffc:	2309      	movs	r3, #9
 8003ffe:	2001      	movs	r0, #1
 8004000:	6033      	str	r3, [r6, #0]
 8004002:	3337      	adds	r3, #55	; 0x37
 8004004:	4313      	orrs	r3, r2
 8004006:	81a3      	strh	r3, [r4, #12]
 8004008:	4240      	negs	r0, r0
 800400a:	bd70      	pop	{r4, r5, r6, pc}
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <__swsetup_r+0xe8>)
 800400e:	429c      	cmp	r4, r3
 8004010:	d101      	bne.n	8004016 <__swsetup_r+0x4a>
 8004012:	68ac      	ldr	r4, [r5, #8]
 8004014:	e7eb      	b.n	8003fee <__swsetup_r+0x22>
 8004016:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <__swsetup_r+0xec>)
 8004018:	429c      	cmp	r4, r3
 800401a:	d1e8      	bne.n	8003fee <__swsetup_r+0x22>
 800401c:	68ec      	ldr	r4, [r5, #12]
 800401e:	e7e6      	b.n	8003fee <__swsetup_r+0x22>
 8004020:	075b      	lsls	r3, r3, #29
 8004022:	d513      	bpl.n	800404c <__swsetup_r+0x80>
 8004024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004026:	2900      	cmp	r1, #0
 8004028:	d008      	beq.n	800403c <__swsetup_r+0x70>
 800402a:	0023      	movs	r3, r4
 800402c:	3344      	adds	r3, #68	; 0x44
 800402e:	4299      	cmp	r1, r3
 8004030:	d002      	beq.n	8004038 <__swsetup_r+0x6c>
 8004032:	0030      	movs	r0, r6
 8004034:	f000 f9bc 	bl	80043b0 <_free_r>
 8004038:	2300      	movs	r3, #0
 800403a:	6363      	str	r3, [r4, #52]	; 0x34
 800403c:	2224      	movs	r2, #36	; 0x24
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	4393      	bics	r3, r2
 8004042:	81a3      	strh	r3, [r4, #12]
 8004044:	2300      	movs	r3, #0
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	2308      	movs	r3, #8
 800404e:	89a2      	ldrh	r2, [r4, #12]
 8004050:	4313      	orrs	r3, r2
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	6923      	ldr	r3, [r4, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10b      	bne.n	8004072 <__swsetup_r+0xa6>
 800405a:	21a0      	movs	r1, #160	; 0xa0
 800405c:	2280      	movs	r2, #128	; 0x80
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	0089      	lsls	r1, r1, #2
 8004062:	0092      	lsls	r2, r2, #2
 8004064:	400b      	ands	r3, r1
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <__swsetup_r+0xa6>
 800406a:	0021      	movs	r1, r4
 800406c:	0030      	movs	r0, r6
 800406e:	f000 f93f 	bl	80042f0 <__smakebuf_r>
 8004072:	220c      	movs	r2, #12
 8004074:	5ea3      	ldrsh	r3, [r4, r2]
 8004076:	2001      	movs	r0, #1
 8004078:	001a      	movs	r2, r3
 800407a:	b299      	uxth	r1, r3
 800407c:	4002      	ands	r2, r0
 800407e:	4203      	tst	r3, r0
 8004080:	d00f      	beq.n	80040a2 <__swsetup_r+0xd6>
 8004082:	2200      	movs	r2, #0
 8004084:	60a2      	str	r2, [r4, #8]
 8004086:	6962      	ldr	r2, [r4, #20]
 8004088:	4252      	negs	r2, r2
 800408a:	61a2      	str	r2, [r4, #24]
 800408c:	2000      	movs	r0, #0
 800408e:	6922      	ldr	r2, [r4, #16]
 8004090:	4282      	cmp	r2, r0
 8004092:	d1ba      	bne.n	800400a <__swsetup_r+0x3e>
 8004094:	060a      	lsls	r2, r1, #24
 8004096:	d5b8      	bpl.n	800400a <__swsetup_r+0x3e>
 8004098:	2240      	movs	r2, #64	; 0x40
 800409a:	4313      	orrs	r3, r2
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	3801      	subs	r0, #1
 80040a0:	e7b3      	b.n	800400a <__swsetup_r+0x3e>
 80040a2:	0788      	lsls	r0, r1, #30
 80040a4:	d400      	bmi.n	80040a8 <__swsetup_r+0xdc>
 80040a6:	6962      	ldr	r2, [r4, #20]
 80040a8:	60a2      	str	r2, [r4, #8]
 80040aa:	e7ef      	b.n	800408c <__swsetup_r+0xc0>
 80040ac:	2000000c 	.word	0x2000000c
 80040b0:	08004580 	.word	0x08004580
 80040b4:	080045a0 	.word	0x080045a0
 80040b8:	08004560 	.word	0x08004560

080040bc <_close_r>:
 80040bc:	2300      	movs	r3, #0
 80040be:	b570      	push	{r4, r5, r6, lr}
 80040c0:	4d06      	ldr	r5, [pc, #24]	; (80040dc <_close_r+0x20>)
 80040c2:	0004      	movs	r4, r0
 80040c4:	0008      	movs	r0, r1
 80040c6:	602b      	str	r3, [r5, #0]
 80040c8:	f7fc fd5f 	bl	8000b8a <_close>
 80040cc:	1c43      	adds	r3, r0, #1
 80040ce:	d103      	bne.n	80040d8 <_close_r+0x1c>
 80040d0:	682b      	ldr	r3, [r5, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d000      	beq.n	80040d8 <_close_r+0x1c>
 80040d6:	6023      	str	r3, [r4, #0]
 80040d8:	bd70      	pop	{r4, r5, r6, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	20000254 	.word	0x20000254

080040e0 <__sflush_r>:
 80040e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040e2:	898b      	ldrh	r3, [r1, #12]
 80040e4:	0005      	movs	r5, r0
 80040e6:	000c      	movs	r4, r1
 80040e8:	071a      	lsls	r2, r3, #28
 80040ea:	d45f      	bmi.n	80041ac <__sflush_r+0xcc>
 80040ec:	684a      	ldr	r2, [r1, #4]
 80040ee:	2a00      	cmp	r2, #0
 80040f0:	dc04      	bgt.n	80040fc <__sflush_r+0x1c>
 80040f2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80040f4:	2a00      	cmp	r2, #0
 80040f6:	dc01      	bgt.n	80040fc <__sflush_r+0x1c>
 80040f8:	2000      	movs	r0, #0
 80040fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80040fc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80040fe:	2f00      	cmp	r7, #0
 8004100:	d0fa      	beq.n	80040f8 <__sflush_r+0x18>
 8004102:	2200      	movs	r2, #0
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	682e      	ldr	r6, [r5, #0]
 8004108:	602a      	str	r2, [r5, #0]
 800410a:	001a      	movs	r2, r3
 800410c:	0149      	lsls	r1, r1, #5
 800410e:	400a      	ands	r2, r1
 8004110:	420b      	tst	r3, r1
 8004112:	d034      	beq.n	800417e <__sflush_r+0x9e>
 8004114:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004116:	89a3      	ldrh	r3, [r4, #12]
 8004118:	075b      	lsls	r3, r3, #29
 800411a:	d506      	bpl.n	800412a <__sflush_r+0x4a>
 800411c:	6863      	ldr	r3, [r4, #4]
 800411e:	1ac0      	subs	r0, r0, r3
 8004120:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <__sflush_r+0x4a>
 8004126:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004128:	1ac0      	subs	r0, r0, r3
 800412a:	0002      	movs	r2, r0
 800412c:	6a21      	ldr	r1, [r4, #32]
 800412e:	2300      	movs	r3, #0
 8004130:	0028      	movs	r0, r5
 8004132:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004134:	47b8      	blx	r7
 8004136:	89a1      	ldrh	r1, [r4, #12]
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d106      	bne.n	800414a <__sflush_r+0x6a>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	2b1d      	cmp	r3, #29
 8004140:	d831      	bhi.n	80041a6 <__sflush_r+0xc6>
 8004142:	4a2c      	ldr	r2, [pc, #176]	; (80041f4 <__sflush_r+0x114>)
 8004144:	40da      	lsrs	r2, r3
 8004146:	07d3      	lsls	r3, r2, #31
 8004148:	d52d      	bpl.n	80041a6 <__sflush_r+0xc6>
 800414a:	2300      	movs	r3, #0
 800414c:	6063      	str	r3, [r4, #4]
 800414e:	6923      	ldr	r3, [r4, #16]
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	04cb      	lsls	r3, r1, #19
 8004154:	d505      	bpl.n	8004162 <__sflush_r+0x82>
 8004156:	1c43      	adds	r3, r0, #1
 8004158:	d102      	bne.n	8004160 <__sflush_r+0x80>
 800415a:	682b      	ldr	r3, [r5, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d100      	bne.n	8004162 <__sflush_r+0x82>
 8004160:	6560      	str	r0, [r4, #84]	; 0x54
 8004162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004164:	602e      	str	r6, [r5, #0]
 8004166:	2900      	cmp	r1, #0
 8004168:	d0c6      	beq.n	80040f8 <__sflush_r+0x18>
 800416a:	0023      	movs	r3, r4
 800416c:	3344      	adds	r3, #68	; 0x44
 800416e:	4299      	cmp	r1, r3
 8004170:	d002      	beq.n	8004178 <__sflush_r+0x98>
 8004172:	0028      	movs	r0, r5
 8004174:	f000 f91c 	bl	80043b0 <_free_r>
 8004178:	2000      	movs	r0, #0
 800417a:	6360      	str	r0, [r4, #52]	; 0x34
 800417c:	e7bd      	b.n	80040fa <__sflush_r+0x1a>
 800417e:	2301      	movs	r3, #1
 8004180:	0028      	movs	r0, r5
 8004182:	6a21      	ldr	r1, [r4, #32]
 8004184:	47b8      	blx	r7
 8004186:	1c43      	adds	r3, r0, #1
 8004188:	d1c5      	bne.n	8004116 <__sflush_r+0x36>
 800418a:	682b      	ldr	r3, [r5, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0c2      	beq.n	8004116 <__sflush_r+0x36>
 8004190:	2b1d      	cmp	r3, #29
 8004192:	d001      	beq.n	8004198 <__sflush_r+0xb8>
 8004194:	2b16      	cmp	r3, #22
 8004196:	d101      	bne.n	800419c <__sflush_r+0xbc>
 8004198:	602e      	str	r6, [r5, #0]
 800419a:	e7ad      	b.n	80040f8 <__sflush_r+0x18>
 800419c:	2340      	movs	r3, #64	; 0x40
 800419e:	89a2      	ldrh	r2, [r4, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	e7a9      	b.n	80040fa <__sflush_r+0x1a>
 80041a6:	2340      	movs	r3, #64	; 0x40
 80041a8:	430b      	orrs	r3, r1
 80041aa:	e7fa      	b.n	80041a2 <__sflush_r+0xc2>
 80041ac:	690f      	ldr	r7, [r1, #16]
 80041ae:	2f00      	cmp	r7, #0
 80041b0:	d0a2      	beq.n	80040f8 <__sflush_r+0x18>
 80041b2:	680a      	ldr	r2, [r1, #0]
 80041b4:	600f      	str	r7, [r1, #0]
 80041b6:	1bd2      	subs	r2, r2, r7
 80041b8:	9201      	str	r2, [sp, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	079b      	lsls	r3, r3, #30
 80041be:	d100      	bne.n	80041c2 <__sflush_r+0xe2>
 80041c0:	694a      	ldr	r2, [r1, #20]
 80041c2:	60a2      	str	r2, [r4, #8]
 80041c4:	9b01      	ldr	r3, [sp, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	dc00      	bgt.n	80041cc <__sflush_r+0xec>
 80041ca:	e795      	b.n	80040f8 <__sflush_r+0x18>
 80041cc:	003a      	movs	r2, r7
 80041ce:	0028      	movs	r0, r5
 80041d0:	9b01      	ldr	r3, [sp, #4]
 80041d2:	6a21      	ldr	r1, [r4, #32]
 80041d4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041d6:	47b0      	blx	r6
 80041d8:	2800      	cmp	r0, #0
 80041da:	dc06      	bgt.n	80041ea <__sflush_r+0x10a>
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	2001      	movs	r0, #1
 80041e0:	89a2      	ldrh	r2, [r4, #12]
 80041e2:	4240      	negs	r0, r0
 80041e4:	4313      	orrs	r3, r2
 80041e6:	81a3      	strh	r3, [r4, #12]
 80041e8:	e787      	b.n	80040fa <__sflush_r+0x1a>
 80041ea:	9b01      	ldr	r3, [sp, #4]
 80041ec:	183f      	adds	r7, r7, r0
 80041ee:	1a1b      	subs	r3, r3, r0
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	e7e7      	b.n	80041c4 <__sflush_r+0xe4>
 80041f4:	20400001 	.word	0x20400001

080041f8 <_fflush_r>:
 80041f8:	690b      	ldr	r3, [r1, #16]
 80041fa:	b570      	push	{r4, r5, r6, lr}
 80041fc:	0005      	movs	r5, r0
 80041fe:	000c      	movs	r4, r1
 8004200:	2b00      	cmp	r3, #0
 8004202:	d102      	bne.n	800420a <_fflush_r+0x12>
 8004204:	2500      	movs	r5, #0
 8004206:	0028      	movs	r0, r5
 8004208:	bd70      	pop	{r4, r5, r6, pc}
 800420a:	2800      	cmp	r0, #0
 800420c:	d004      	beq.n	8004218 <_fflush_r+0x20>
 800420e:	6983      	ldr	r3, [r0, #24]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d101      	bne.n	8004218 <_fflush_r+0x20>
 8004214:	f7ff fa2c 	bl	8003670 <__sinit>
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <_fflush_r+0x74>)
 800421a:	429c      	cmp	r4, r3
 800421c:	d11b      	bne.n	8004256 <_fflush_r+0x5e>
 800421e:	686c      	ldr	r4, [r5, #4]
 8004220:	220c      	movs	r2, #12
 8004222:	5ea3      	ldrsh	r3, [r4, r2]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0ed      	beq.n	8004204 <_fflush_r+0xc>
 8004228:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800422a:	07d2      	lsls	r2, r2, #31
 800422c:	d404      	bmi.n	8004238 <_fflush_r+0x40>
 800422e:	059b      	lsls	r3, r3, #22
 8004230:	d402      	bmi.n	8004238 <_fflush_r+0x40>
 8004232:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004234:	f7ff fabd 	bl	80037b2 <__retarget_lock_acquire_recursive>
 8004238:	0028      	movs	r0, r5
 800423a:	0021      	movs	r1, r4
 800423c:	f7ff ff50 	bl	80040e0 <__sflush_r>
 8004240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004242:	0005      	movs	r5, r0
 8004244:	07db      	lsls	r3, r3, #31
 8004246:	d4de      	bmi.n	8004206 <_fflush_r+0xe>
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	059b      	lsls	r3, r3, #22
 800424c:	d4db      	bmi.n	8004206 <_fflush_r+0xe>
 800424e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004250:	f7ff fab0 	bl	80037b4 <__retarget_lock_release_recursive>
 8004254:	e7d7      	b.n	8004206 <_fflush_r+0xe>
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <_fflush_r+0x78>)
 8004258:	429c      	cmp	r4, r3
 800425a:	d101      	bne.n	8004260 <_fflush_r+0x68>
 800425c:	68ac      	ldr	r4, [r5, #8]
 800425e:	e7df      	b.n	8004220 <_fflush_r+0x28>
 8004260:	4b04      	ldr	r3, [pc, #16]	; (8004274 <_fflush_r+0x7c>)
 8004262:	429c      	cmp	r4, r3
 8004264:	d1dc      	bne.n	8004220 <_fflush_r+0x28>
 8004266:	68ec      	ldr	r4, [r5, #12]
 8004268:	e7da      	b.n	8004220 <_fflush_r+0x28>
 800426a:	46c0      	nop			; (mov r8, r8)
 800426c:	08004580 	.word	0x08004580
 8004270:	080045a0 	.word	0x080045a0
 8004274:	08004560 	.word	0x08004560

08004278 <_lseek_r>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	0004      	movs	r4, r0
 800427c:	0008      	movs	r0, r1
 800427e:	0011      	movs	r1, r2
 8004280:	001a      	movs	r2, r3
 8004282:	2300      	movs	r3, #0
 8004284:	4d05      	ldr	r5, [pc, #20]	; (800429c <_lseek_r+0x24>)
 8004286:	602b      	str	r3, [r5, #0]
 8004288:	f7fc fca0 	bl	8000bcc <_lseek>
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d103      	bne.n	8004298 <_lseek_r+0x20>
 8004290:	682b      	ldr	r3, [r5, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d000      	beq.n	8004298 <_lseek_r+0x20>
 8004296:	6023      	str	r3, [r4, #0]
 8004298:	bd70      	pop	{r4, r5, r6, pc}
 800429a:	46c0      	nop			; (mov r8, r8)
 800429c:	20000254 	.word	0x20000254

080042a0 <__swhatbuf_r>:
 80042a0:	b570      	push	{r4, r5, r6, lr}
 80042a2:	000e      	movs	r6, r1
 80042a4:	001d      	movs	r5, r3
 80042a6:	230e      	movs	r3, #14
 80042a8:	5ec9      	ldrsh	r1, [r1, r3]
 80042aa:	0014      	movs	r4, r2
 80042ac:	b096      	sub	sp, #88	; 0x58
 80042ae:	2900      	cmp	r1, #0
 80042b0:	da07      	bge.n	80042c2 <__swhatbuf_r+0x22>
 80042b2:	2300      	movs	r3, #0
 80042b4:	602b      	str	r3, [r5, #0]
 80042b6:	89b3      	ldrh	r3, [r6, #12]
 80042b8:	061b      	lsls	r3, r3, #24
 80042ba:	d411      	bmi.n	80042e0 <__swhatbuf_r+0x40>
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	e00f      	b.n	80042e2 <__swhatbuf_r+0x42>
 80042c2:	466a      	mov	r2, sp
 80042c4:	f000 f8d2 	bl	800446c <_fstat_r>
 80042c8:	2800      	cmp	r0, #0
 80042ca:	dbf2      	blt.n	80042b2 <__swhatbuf_r+0x12>
 80042cc:	23f0      	movs	r3, #240	; 0xf0
 80042ce:	9901      	ldr	r1, [sp, #4]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	4019      	ands	r1, r3
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <__swhatbuf_r+0x4c>)
 80042d6:	18c9      	adds	r1, r1, r3
 80042d8:	424b      	negs	r3, r1
 80042da:	4159      	adcs	r1, r3
 80042dc:	6029      	str	r1, [r5, #0]
 80042de:	e7ed      	b.n	80042bc <__swhatbuf_r+0x1c>
 80042e0:	2340      	movs	r3, #64	; 0x40
 80042e2:	2000      	movs	r0, #0
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	b016      	add	sp, #88	; 0x58
 80042e8:	bd70      	pop	{r4, r5, r6, pc}
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	ffffe000 	.word	0xffffe000

080042f0 <__smakebuf_r>:
 80042f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042f2:	2602      	movs	r6, #2
 80042f4:	898b      	ldrh	r3, [r1, #12]
 80042f6:	0005      	movs	r5, r0
 80042f8:	000c      	movs	r4, r1
 80042fa:	4233      	tst	r3, r6
 80042fc:	d006      	beq.n	800430c <__smakebuf_r+0x1c>
 80042fe:	0023      	movs	r3, r4
 8004300:	3347      	adds	r3, #71	; 0x47
 8004302:	6023      	str	r3, [r4, #0]
 8004304:	6123      	str	r3, [r4, #16]
 8004306:	2301      	movs	r3, #1
 8004308:	6163      	str	r3, [r4, #20]
 800430a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800430c:	466a      	mov	r2, sp
 800430e:	ab01      	add	r3, sp, #4
 8004310:	f7ff ffc6 	bl	80042a0 <__swhatbuf_r>
 8004314:	9900      	ldr	r1, [sp, #0]
 8004316:	0007      	movs	r7, r0
 8004318:	0028      	movs	r0, r5
 800431a:	f7ff fa4d 	bl	80037b8 <_malloc_r>
 800431e:	2800      	cmp	r0, #0
 8004320:	d108      	bne.n	8004334 <__smakebuf_r+0x44>
 8004322:	220c      	movs	r2, #12
 8004324:	5ea3      	ldrsh	r3, [r4, r2]
 8004326:	059a      	lsls	r2, r3, #22
 8004328:	d4ef      	bmi.n	800430a <__smakebuf_r+0x1a>
 800432a:	2203      	movs	r2, #3
 800432c:	4393      	bics	r3, r2
 800432e:	431e      	orrs	r6, r3
 8004330:	81a6      	strh	r6, [r4, #12]
 8004332:	e7e4      	b.n	80042fe <__smakebuf_r+0xe>
 8004334:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <__smakebuf_r+0x84>)
 8004336:	62ab      	str	r3, [r5, #40]	; 0x28
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	89a2      	ldrh	r2, [r4, #12]
 800433c:	6020      	str	r0, [r4, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	9b00      	ldr	r3, [sp, #0]
 8004344:	6120      	str	r0, [r4, #16]
 8004346:	6163      	str	r3, [r4, #20]
 8004348:	9b01      	ldr	r3, [sp, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00d      	beq.n	800436a <__smakebuf_r+0x7a>
 800434e:	0028      	movs	r0, r5
 8004350:	230e      	movs	r3, #14
 8004352:	5ee1      	ldrsh	r1, [r4, r3]
 8004354:	f000 f89c 	bl	8004490 <_isatty_r>
 8004358:	2800      	cmp	r0, #0
 800435a:	d006      	beq.n	800436a <__smakebuf_r+0x7a>
 800435c:	2203      	movs	r2, #3
 800435e:	89a3      	ldrh	r3, [r4, #12]
 8004360:	4393      	bics	r3, r2
 8004362:	001a      	movs	r2, r3
 8004364:	2301      	movs	r3, #1
 8004366:	4313      	orrs	r3, r2
 8004368:	81a3      	strh	r3, [r4, #12]
 800436a:	89a0      	ldrh	r0, [r4, #12]
 800436c:	4307      	orrs	r7, r0
 800436e:	81a7      	strh	r7, [r4, #12]
 8004370:	e7cb      	b.n	800430a <__smakebuf_r+0x1a>
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	080035f5 	.word	0x080035f5

08004378 <memchr>:
 8004378:	b2c9      	uxtb	r1, r1
 800437a:	1882      	adds	r2, r0, r2
 800437c:	4290      	cmp	r0, r2
 800437e:	d101      	bne.n	8004384 <memchr+0xc>
 8004380:	2000      	movs	r0, #0
 8004382:	4770      	bx	lr
 8004384:	7803      	ldrb	r3, [r0, #0]
 8004386:	428b      	cmp	r3, r1
 8004388:	d0fb      	beq.n	8004382 <memchr+0xa>
 800438a:	3001      	adds	r0, #1
 800438c:	e7f6      	b.n	800437c <memchr+0x4>
	...

08004390 <__malloc_lock>:
 8004390:	b510      	push	{r4, lr}
 8004392:	4802      	ldr	r0, [pc, #8]	; (800439c <__malloc_lock+0xc>)
 8004394:	f7ff fa0d 	bl	80037b2 <__retarget_lock_acquire_recursive>
 8004398:	bd10      	pop	{r4, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	2000024c 	.word	0x2000024c

080043a0 <__malloc_unlock>:
 80043a0:	b510      	push	{r4, lr}
 80043a2:	4802      	ldr	r0, [pc, #8]	; (80043ac <__malloc_unlock+0xc>)
 80043a4:	f7ff fa06 	bl	80037b4 <__retarget_lock_release_recursive>
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	2000024c 	.word	0x2000024c

080043b0 <_free_r>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	0005      	movs	r5, r0
 80043b4:	2900      	cmp	r1, #0
 80043b6:	d010      	beq.n	80043da <_free_r+0x2a>
 80043b8:	1f0c      	subs	r4, r1, #4
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da00      	bge.n	80043c2 <_free_r+0x12>
 80043c0:	18e4      	adds	r4, r4, r3
 80043c2:	0028      	movs	r0, r5
 80043c4:	f7ff ffe4 	bl	8004390 <__malloc_lock>
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <_free_r+0x90>)
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <_free_r+0x2c>
 80043d0:	6063      	str	r3, [r4, #4]
 80043d2:	6014      	str	r4, [r2, #0]
 80043d4:	0028      	movs	r0, r5
 80043d6:	f7ff ffe3 	bl	80043a0 <__malloc_unlock>
 80043da:	bd70      	pop	{r4, r5, r6, pc}
 80043dc:	42a3      	cmp	r3, r4
 80043de:	d908      	bls.n	80043f2 <_free_r+0x42>
 80043e0:	6821      	ldr	r1, [r4, #0]
 80043e2:	1860      	adds	r0, r4, r1
 80043e4:	4283      	cmp	r3, r0
 80043e6:	d1f3      	bne.n	80043d0 <_free_r+0x20>
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	1841      	adds	r1, r0, r1
 80043ee:	6021      	str	r1, [r4, #0]
 80043f0:	e7ee      	b.n	80043d0 <_free_r+0x20>
 80043f2:	001a      	movs	r2, r3
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <_free_r+0x4e>
 80043fa:	42a3      	cmp	r3, r4
 80043fc:	d9f9      	bls.n	80043f2 <_free_r+0x42>
 80043fe:	6811      	ldr	r1, [r2, #0]
 8004400:	1850      	adds	r0, r2, r1
 8004402:	42a0      	cmp	r0, r4
 8004404:	d10b      	bne.n	800441e <_free_r+0x6e>
 8004406:	6820      	ldr	r0, [r4, #0]
 8004408:	1809      	adds	r1, r1, r0
 800440a:	1850      	adds	r0, r2, r1
 800440c:	6011      	str	r1, [r2, #0]
 800440e:	4283      	cmp	r3, r0
 8004410:	d1e0      	bne.n	80043d4 <_free_r+0x24>
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	1841      	adds	r1, r0, r1
 8004418:	6011      	str	r1, [r2, #0]
 800441a:	6053      	str	r3, [r2, #4]
 800441c:	e7da      	b.n	80043d4 <_free_r+0x24>
 800441e:	42a0      	cmp	r0, r4
 8004420:	d902      	bls.n	8004428 <_free_r+0x78>
 8004422:	230c      	movs	r3, #12
 8004424:	602b      	str	r3, [r5, #0]
 8004426:	e7d5      	b.n	80043d4 <_free_r+0x24>
 8004428:	6821      	ldr	r1, [r4, #0]
 800442a:	1860      	adds	r0, r4, r1
 800442c:	4283      	cmp	r3, r0
 800442e:	d103      	bne.n	8004438 <_free_r+0x88>
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	1841      	adds	r1, r0, r1
 8004436:	6021      	str	r1, [r4, #0]
 8004438:	6063      	str	r3, [r4, #4]
 800443a:	6054      	str	r4, [r2, #4]
 800443c:	e7ca      	b.n	80043d4 <_free_r+0x24>
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	20000094 	.word	0x20000094

08004444 <_read_r>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	0004      	movs	r4, r0
 8004448:	0008      	movs	r0, r1
 800444a:	0011      	movs	r1, r2
 800444c:	001a      	movs	r2, r3
 800444e:	2300      	movs	r3, #0
 8004450:	4d05      	ldr	r5, [pc, #20]	; (8004468 <_read_r+0x24>)
 8004452:	602b      	str	r3, [r5, #0]
 8004454:	f7fc fb60 	bl	8000b18 <_read>
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	d103      	bne.n	8004464 <_read_r+0x20>
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d000      	beq.n	8004464 <_read_r+0x20>
 8004462:	6023      	str	r3, [r4, #0]
 8004464:	bd70      	pop	{r4, r5, r6, pc}
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	20000254 	.word	0x20000254

0800446c <_fstat_r>:
 800446c:	2300      	movs	r3, #0
 800446e:	b570      	push	{r4, r5, r6, lr}
 8004470:	4d06      	ldr	r5, [pc, #24]	; (800448c <_fstat_r+0x20>)
 8004472:	0004      	movs	r4, r0
 8004474:	0008      	movs	r0, r1
 8004476:	0011      	movs	r1, r2
 8004478:	602b      	str	r3, [r5, #0]
 800447a:	f7fc fb90 	bl	8000b9e <_fstat>
 800447e:	1c43      	adds	r3, r0, #1
 8004480:	d103      	bne.n	800448a <_fstat_r+0x1e>
 8004482:	682b      	ldr	r3, [r5, #0]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d000      	beq.n	800448a <_fstat_r+0x1e>
 8004488:	6023      	str	r3, [r4, #0]
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	20000254 	.word	0x20000254

08004490 <_isatty_r>:
 8004490:	2300      	movs	r3, #0
 8004492:	b570      	push	{r4, r5, r6, lr}
 8004494:	4d06      	ldr	r5, [pc, #24]	; (80044b0 <_isatty_r+0x20>)
 8004496:	0004      	movs	r4, r0
 8004498:	0008      	movs	r0, r1
 800449a:	602b      	str	r3, [r5, #0]
 800449c:	f7fc fb8d 	bl	8000bba <_isatty>
 80044a0:	1c43      	adds	r3, r0, #1
 80044a2:	d103      	bne.n	80044ac <_isatty_r+0x1c>
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d000      	beq.n	80044ac <_isatty_r+0x1c>
 80044aa:	6023      	str	r3, [r4, #0]
 80044ac:	bd70      	pop	{r4, r5, r6, pc}
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	20000254 	.word	0x20000254

080044b4 <_init>:
 80044b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ba:	bc08      	pop	{r3}
 80044bc:	469e      	mov	lr, r3
 80044be:	4770      	bx	lr

080044c0 <_fini>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr
