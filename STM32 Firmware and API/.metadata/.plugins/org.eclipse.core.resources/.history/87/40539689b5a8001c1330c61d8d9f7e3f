/*
 * IS31FL3743B.c
 *
 *  Created on: Mar 19, 2022
 *      Author: Rara_
 */

#include "IS31FL3743B.h"
#include "MyDelay.h"
#include "string.h"

uint8_t baseADDR = 0;
bool cpltFlag = 0; //complete flag

SPI_HandleTypeDef hspi1;

void IS31FL3743B_init(void) {
	IS31FL3743B_Dumby();
	IS31FL3743B_Reset();

	/*Set config register
	 *
	 * On this board, we are using SW1-8 , SW9-11 are inactive, so we're using sws 0011
	 * bit 3 is reserved to 1
	 *
	 * OSDE can be 00 or 11*
	 *
	 * No open short detection necessary, and normal operation
	 * -----------------------
	 * | SWS | - | OSDE | SSD|
	 * | 0011| 1 |  00* |  1 |
	 * -----------------------
	 *or 0x39 - Config def
	 *
	 *
	 * */
	uint8_t spiDataTx[3] = { Page2_ADDR, Config_ADDR, ConfigDef };
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); //Pull chip select low
	HAL_SPIEx_FlushRxFifo(&hspi1);
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx, 3);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select high

	/*
	 * Set GCC to full power
	 *
	 * */
	uint8_t spiDataTx2[3] = { Page2_ADDR, GCC_ADDR, GCCDef };
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); //Pull chip select low
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx2, sizeof(spiDataTx2));
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select high

	/*
	 * Set deghost
	 *
	 * */
	uint8_t spiDataTx3[3] =
			{ Page2_ADDR, SW_PullUp_CS_PullDown_ADDR, SWxCSxDef };
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); //Pull chip select low
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx3, sizeof(spiDataTx3));
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select high

	/*
	 *
	 * Set scaling to range
	 *
	 * */

	uint8_t spiDataTx4[3] = { Page1_ADDR, StartADDR, 0x80 };
	for (uint8_t reg = 0x01; reg <= 144; reg++) {
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); //Pull chip select low
		HAL_SPI_Transmit_IT(&hspi1, spiDataTx4, sizeof(spiDataTx4));
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select high
		spiDataTx4[1] = StartADDR + 1;
	}

	//Confirmation
	LedBlink(1);

//	uint8_t StartADDR = 0x01;
//			for (uint8_t cnt = 0; cnt <= 64; cnt++) {
//				uint8_t spiDataTx[21] = { 0x00 };
//				memset(spiDataTx, PWM_Gamma64[cnt], sizeof(spiDataTx));
//				spiDataTx[0] = Page0_ADDR;
//				spiDataTx[1] = StartADDR;
//				for (uint8_t column = 1; column <= 8; column++) {
//					HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
//					HAL_SPI_Transmit_IT(&hspi1, spiDataTx, sizeof(spiDataTx) - 1);
//					spiDataTx[1] = (column * 18) + 1;
//					HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
//				}
//				MyDelay_ms(10);
//			}
}
;

uint16_t IS31FL3743B_TempStat(void) {

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0); //Pull chip select low
	uint8_t spiDataRx[3] = { Page2_ADDR_R, TempStat_ADDR, 0x00 };
	HAL_SPI_Receive(&hspi1, spiDataRx, sizeof(spiDataRx), 100);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1); //Pull chip select low
	LedBlink(1);
	return spiDataRx[3];
//	if (cpltFlag == 1)
//		return spiDataRx[3]; //temperature
//	else
//		return 404; //error
}
;

void IS31FL3743B_SetDotColor(uint8_t led, uint8_t color, uint8_t intensity) {

	if (led >= 1 && led <= 6) {
		baseADDR = printf("%x", (3 * led) - 2); //first led, blue
	}

	if (led > 6 && led <= 12) {
		baseADDR = 0x01; //first led, blue
	}

	if (led > 12 && led <= 18) {
		baseADDR = 0x01; //first led, blue
	}

	if (led > 18 && led <= 24) {
		baseADDR = 0x01; //first led, blue
	}

	if (led > 24 && led <= 30) {
		baseADDR = 0x01; //first led, blue
	}

	if (led > 30 && led <= 36) {
		baseADDR = 0x01; //first led, blue
	}
	if (led > 36 && led <= 42) {
		baseADDR = 0x01; //first led, blue
	}
	if (led > 42 && led <= 48) {
		baseADDR = 0x01; //first led, blue
	}
}
;

//void IS31FL3743B_SetFullColor(uint8_t color, uint8_t intensity) {
//	switch (color) {
//	case Blue:
//
//		break;
//
//	case Green:
//		break;
//
//	case Red:
//		break;
//	}
//
//}
//;

void IS31FL3743B_SetColumnColor(uint8_t row, uint8_t color) {

}
;

void IS31FL3743B_Breathe(uint8_t color, int speed) {

}
;

void IS31FL3743B_Reset(void) {
	//Pull sdb low for reset
	HAL_GPIO_WritePin(SDB_GPIO_Port, SDB_Pin, 0);

	//reset all registers to prevent old data recycling
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
	uint8_t spiDataTx[3] = { Page2_ADDR, Reset_ADDR, ResetDef };
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx, sizeof(spiDataTx));
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);

	//Pull sdb high for to operate
	HAL_GPIO_WritePin(SDB_GPIO_Port, SDB_Pin, 1);

}
;

void IS31FL3743B_Dumby(void) {
//To prevent a data mismatch, send a dumby request before sending other commands
	MyDelay_ms(1);
	uint8_t spiDataTx[3] = { 0x00, 0x00, 0x00 };
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
	HAL_SPI_Transmit_IT(&hspi1, spiDataTx, 3);
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
}
;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
	HAL_SPIEx_FlushRxFifo(&hspi1);
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_SPI_TxRxCpltCallback should be implemented in the user file
	 */
}
